[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"# Duke.Duke project template","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"3. After that, locate the `src/main/java/Duke.Duke.java` file, right-click it, and choose `Run Duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-10-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ksw95":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"    mainClassName \u003d \"Duke.Duke\"","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ksw95":1,"-":45}},{"path":"src/main/java/Duke/Checker/FileLineChecker.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Checker;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":" * FileLine Checker contains methods to check whether","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":" * the lines from the files","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":" * contains valid task information.","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"public class FileLineChecker {","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"     * Takes a string array and checks whether","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"     * it contains parts with information of a \"to do\" object.","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"     * @param parts","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidTodoLine(String[] parts) {","lastModifiedDate":"2021-11-11"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"        if (parts.length !\u003d 4) {","lastModifiedDate":"2021-11-10"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"        } else if (parts[2].trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"        } else if (!parts[1].trim().equals(\"1\") \u0026\u0026 !parts[1].trim().equals(\"0\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"        return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"     * Takes a string array and checks whether","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"     * it contains parts with information of a \"deadline\" object.","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"     * @param parts","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidDeadlineLine(String[] parts) {","lastModifiedDate":"2021-11-11"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"        if (parts.length !\u003d 5) {","lastModifiedDate":"2021-11-10"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        } else if (parts[2].trim().equals(\"\") || parts[3].trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        } else if (!parts[1].trim().equals(\"1\") \u0026\u0026 !parts[1].trim().equals(\"0\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"        return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"     * Takes a string array and checks whether","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"     * it contains parts with information of a \"event\" object.","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"     * @param parts","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidEventLine(String[] parts) {","lastModifiedDate":"2021-11-11"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"        if (parts.length !\u003d 5) {","lastModifiedDate":"2021-11-10"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"        } else if (parts[2].trim().equals(\"\") || parts[3].trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"        } else if (!parts[1].trim().equals(\"1\") \u0026\u0026 !parts[1].trim().equals(\"0\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"        return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"ksw95":60}},{"path":"src/main/java/Duke/Checker/InputChecker.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Checker;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.DukeException;","lastModifiedDate":"2021-11-11"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":" * Checks whether the input by the Duke user","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":" * contains valid task information.","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"public class InputChecker {","lastModifiedDate":"2021-10-29"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"     * Check whether input contains all the parts of a \"to do\" object.","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"     * Returns true if it contains all the respective parts.","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidTodoInput(String input) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"        if (input.length() \u003c 5) {","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"        } else if (input.substring(4).trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"            return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"     * Checks whether input contains all that parts of a \"deadline\" object.","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"     * Returns true if it contains all the respective parts.","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidDeadlineInput(String input) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"        if (input.contains(\"/by\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"            String[] parts \u003d input.substring(8).split(\"/by\");","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"            if (parts.length !\u003d 2) {","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! Invalid syntax for adding deadline.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"            } else if (parts[0].trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! The task description of a deadline cannot be empty.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"            } else if (parts[1].trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! The due date/time of a deadline cannot be empty.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"                return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! Invalid syntax for adding deadline.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"     * Checks whether input contains all that parts of a \"event\" object.","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"     * Returns true if it contains all the respective parts.","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidEventInput(String input) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"        if (input.contains(\"/at\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"            String[] parts \u003d input.substring(5).split(\"/at\");","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"            if (parts.length !\u003d 2) {","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! Invalid syntax for adding event.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"            } else if (parts[0].trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! The task description of an event cannot be empty.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"            } else if (parts[1].trim().equals(\"\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! The date/time of an event cannot be empty.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"                return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! Invalid syntax for adding event.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"     * Checks whether input contains the enough and correct information","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"     * to mark a task as done.","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidDoneInput(String input) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"        if (input.length() \u003c 5) {","lastModifiedDate":"2021-10-29"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! The index of the task to be marked as done is missing.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"            try {","lastModifiedDate":"2021-10-29"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"                int index \u003d Integer.parseInt(input.substring(4).trim()) - 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! \" +","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"                        \"The index of the task to mark as done has to be an integer!\");","lastModifiedDate":"2021-10-29"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"            return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"     * Checks whether input contains the enough and correct information","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"     * to delete a task.","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidDeleteInput(String input) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"        if (input.length() \u003c 7) {","lastModifiedDate":"2021-10-29"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! The index of the task to delete is missing.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"            try {","lastModifiedDate":"2021-10-29"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"                int test \u003d Integer.parseInt(input.substring(6).trim()) - 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"☹ OOPS!!! \" +","lastModifiedDate":"2021-10-29"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"                        \"The index of the task to delete has to be an integer!\");","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"            return true;","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":116,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":117,"author":{"gitId":"ksw95"},"content":"    public static boolean isValidFindInput(String[] parts) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":118,"author":{"gitId":"ksw95"},"content":"        if (parts.length !\u003d 2) {","lastModifiedDate":"2021-11-10"},{"lineNumber":119,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! The keyword to find is missing.\");","lastModifiedDate":"2021-11-10"},{"lineNumber":120,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-10"},{"lineNumber":121,"author":{"gitId":"ksw95"},"content":"            return true;","lastModifiedDate":"2021-11-10"},{"lineNumber":122,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-10"},{"lineNumber":123,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":124,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"ksw95":124}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.DukeException;","lastModifiedDate":"2021-11-11"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.Storage;","lastModifiedDate":"2021-11-11"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import Duke.Parser.*;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.Ui;","lastModifiedDate":"2021-11-11"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"import java.io.File;","lastModifiedDate":"2021-10-26"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-08-31"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-08-31"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":" * Duke is a program that opens a storage file,","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":" * parses the tasks in the file into a list in Duke","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":" * and that allows users to do CRUD operations on tasks.","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    static Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-08-31"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * Scans and returns user input as String.","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     * @return","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"    public static String getInput() {","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"        return input;","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-11"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"     * Starts Duke by opening storage file","lastModifiedDate":"2021-11-11"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"     * and updating the duke list using th information from the file.","lastModifiedDate":"2021-11-11"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"     * Then print the duke start up message and a greeting from the program.","lastModifiedDate":"2021-11-11"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-11"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"    public static void runDuke() {","lastModifiedDate":"2021-11-11"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-11"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"            File StorageFile \u003d Storage.openStorageFile();","lastModifiedDate":"2021-11-11"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"            Storage.readFileToArray(StorageFile);","lastModifiedDate":"2021-11-11"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-11"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"            e.printErrMsg();","lastModifiedDate":"2021-11-11"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"        Ui.startDuke();","lastModifiedDate":"2021-11-11"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"        Ui.greet();","lastModifiedDate":"2021-11-11"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-11"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"     * Continuously read input from the user of Duke","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"     * and parse the different inputs.","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"    public static void useDuke() {","lastModifiedDate":"2021-11-11"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"        while (true) {","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"            String input \u003d getInput();","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"            System.out.println(Ui.LINE);","lastModifiedDate":"2021-11-11"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"            if (input.equals(\"bye\")) {","lastModifiedDate":"2021-10-10"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"                endDuke();","lastModifiedDate":"2021-11-11"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"                break;","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-10-18"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"                InputParser.parseInput(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-18"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"            System.out.println(Ui.LINE + \"\\n\");","lastModifiedDate":"2021-11-11"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-18"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-18"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-18"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"    public static void endDuke() {","lastModifiedDate":"2021-11-11"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-11-11"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2021-11-11"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"     * Runs the main logic of Duke program.","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"     * @param args","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-11-11"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"        runDuke();","lastModifiedDate":"2021-11-11"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"        useDuke();","lastModifiedDate":"2021-11-11"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-10-27"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"            Storage.writeListToFile(Storage.openStorageFile());","lastModifiedDate":"2021-11-11"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-27"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Failed to write to file\");","lastModifiedDate":"2021-10-27"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-27"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-08-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ksw95":77,"-":2}},{"path":"src/main/java/Duke/DukeLogic/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.DukeLogic;","lastModifiedDate":"2021-11-11"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":" * An exception class that represents the errors that are thrown when using duke.","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2021-10-19"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"    protected String ErrMsg;","lastModifiedDate":"2021-10-19"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"     * DukeException constructor that creates a DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"     * with an empty error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    public DukeException() {","lastModifiedDate":"2021-10-19"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"        this.ErrMsg \u003d \"\";","lastModifiedDate":"2021-10-19"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"     * DukeException constructor takes in a custom error message.","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * @param invalid","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"    public DukeException(String invalid) {","lastModifiedDate":"2021-10-19"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"        this.ErrMsg \u003d invalid;","lastModifiedDate":"2021-10-19"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-19"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"     * Prints the custom error message of a DukeException if any.","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"    public void printErrMsg() {","lastModifiedDate":"2021-10-19"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        System.out.println(ErrMsg);","lastModifiedDate":"2021-10-19"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-19"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-19"}],"authorContributionMap":{"ksw95":31}},{"path":"src/main/java/Duke/DukeLogic/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.DukeLogic;","lastModifiedDate":"2021-11-11"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.Parser.FileLineParser;","lastModifiedDate":"2021-11-11"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import Duke.Models.*;","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import java.io.File;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-29"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-29"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-29"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":" * Storage class contains the methods related to the storage file.","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"public class Storage {","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"     * Creates a new file and directory.","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * @return the new File object.","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"    public static File createStorageFile() throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        File newFile \u003d new File(\"data\\\\Duke.DukeLogic.Storage.txt\");","lastModifiedDate":"2021-11-11"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"            newFile.getParentFile().mkdirs();","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"            newFile.createNewFile();","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"New Duke.DukeLogic.Storage.txt file created.\");","lastModifiedDate":"2021-11-11"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"            return newFile;","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        } catch (IOException err) {","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"Failed to create new Duke.DukeLogic.Storage.txt file.\");","lastModifiedDate":"2021-11-11"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"     * Opens and returns storage file.","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"     * If a storage file does not exist, create one and return that.","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"     * @return an opened File object.","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"    public static File openStorageFile() throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"        File newFile \u003d new File(\"data\\\\storage.txt\");","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"        if (!newFile.exists()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"            try {","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"                newFile \u003d createStorageFile();","lastModifiedDate":"2021-11-11"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"                throw new DukeException(\"Duke.Duke will run without \" +","lastModifiedDate":"2021-11-11"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"                        \"any prior stored task information\");","lastModifiedDate":"2021-11-11"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"        return newFile;","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"     * Takes a file and parse the contents into task objects","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"     * The parsed task objects will then be added to Duke\u0027s task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"     * @param storageFile","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"    public static void readFileToArray(File storageFile) {","lastModifiedDate":"2021-11-11"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"            Scanner s \u003d new Scanner(storageFile);","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"                try {","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"                    Task taskFromLine \u003d FileLineParser.parseLineFromFile(s.nextLine());","lastModifiedDate":"2021-11-11"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"                    TaskList.addTaskToList(taskFromLine);","lastModifiedDate":"2021-11-11"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"                    e.printErrMsg();","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"                }","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"File cannot be opened, \" +","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"                    \"Duke will not have any prior stored task information\");","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"     * Retrieves information of all the tasks inside Duke task list","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"     * and converts each into a string to store inside storage file.","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"     * @param FileWrite","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"    public static void writeListToFile(File FileWrite) {","lastModifiedDate":"2021-10-29"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-10-29"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"            FileWriter fw \u003d new FileWriter(FileWrite, false);","lastModifiedDate":"2021-10-29"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"            ArrayList\u003cTask\u003e list \u003d TaskList.getDukeList();","lastModifiedDate":"2021-11-11"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2021-10-29"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"                Task taskAtIndex \u003d list.get(i);","lastModifiedDate":"2021-10-29"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"                String taskType \u003d taskAtIndex.getTaskType();","lastModifiedDate":"2021-11-11"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"                String newLine \u003d \"\";","lastModifiedDate":"2021-10-29"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"                if (taskType.equals(\"T\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"                    newLine \u003d buildStorageLine(taskAtIndex);","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"                } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"                    newLine \u003d buildStorageLine(taskAtIndex);","lastModifiedDate":"2021-10-29"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"                } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"                    newLine \u003d buildStorageLine(taskAtIndex);","lastModifiedDate":"2021-10-29"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"                }","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"                fw.write(newLine + System.getProperty(\"line.separator\"));","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"            fw.close();","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Write to file failed\");","lastModifiedDate":"2021-10-29"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"     * Takes in a task object using it to build","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"     * and return a string with the format of lines in storage file.","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"     * @param targetTask","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"     * @return a String with task information in storage line format.","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"    public static String buildStorageLine(Task targetTask) {","lastModifiedDate":"2021-10-29"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"        String divider \u003d \" | \";","lastModifiedDate":"2021-10-29"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"        String initial \u003d targetTask.getTaskType();","lastModifiedDate":"2021-10-29"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"        String newLine \u003d initial + divider;","lastModifiedDate":"2021-10-29"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"        if (targetTask.isCompleted()) {","lastModifiedDate":"2021-10-29"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"            newLine \u003d newLine + \"1\" + divider;","lastModifiedDate":"2021-10-29"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":116,"author":{"gitId":"ksw95"},"content":"            newLine \u003d newLine + \"0\" + divider;","lastModifiedDate":"2021-10-29"},{"lineNumber":117,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":118,"author":{"gitId":"ksw95"},"content":"        newLine \u003d newLine + targetTask.getDescription();","lastModifiedDate":"2021-10-29"},{"lineNumber":119,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":120,"author":{"gitId":"ksw95"},"content":"        if (initial.equals(\"D\") || initial.equals(\"E\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":121,"author":{"gitId":"ksw95"},"content":"            newLine \u003d newLine + divider + targetTask.getAdditionalInfo();","lastModifiedDate":"2021-10-29"},{"lineNumber":122,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":123,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":124,"author":{"gitId":"ksw95"},"content":"        newLine \u003d newLine + divider + targetTask.getPriority();","lastModifiedDate":"2021-11-10"},{"lineNumber":125,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":126,"author":{"gitId":"ksw95"},"content":"        return newLine;","lastModifiedDate":"2021-10-29"},{"lineNumber":127,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":128,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"ksw95":128}},{"path":"src/main/java/Duke/DukeLogic/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.DukeLogic;","lastModifiedDate":"2021-11-11"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.Models.*;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-29"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":" * Represents the list that contains the task inputted by using Duke.","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":" *","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"public class TaskList {","lastModifiedDate":"2021-10-29"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    protected static ArrayList\u003cTask\u003e DukeList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-11"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"    public static ArrayList\u003cTask\u003e getDukeList() {","lastModifiedDate":"2021-11-11"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"        return DukeList;","lastModifiedDate":"2021-11-11"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-11"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * Returns the number of tasks inside the task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     * @return int of the size of task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"    public static int size() {","lastModifiedDate":"2021-10-29"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        return DukeList.size();","lastModifiedDate":"2021-10-29"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"     * Takes in a new Task","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"     * and adds it to the task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"     * @param newEntry","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"    public static void addTaskToList(Task newEntry) {","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"        DukeList.add(newEntry);","lastModifiedDate":"2021-10-29"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"     * Takes in a index and removes the task at the index from the task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"     * @param index","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"    public static void removeTask(int index) {","lastModifiedDate":"2021-11-11"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"        DukeList.remove(index);","lastModifiedDate":"2021-10-29"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"     * Prints all the task in the task list with their information.","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"    public static void printTaskList() {","lastModifiedDate":"2021-10-29"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-10-29"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"        for (int i \u003d 0; i \u003c DukeList.size(); i++) {","lastModifiedDate":"2021-10-29"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"            System.out.println((i + 1) + \".\" + DukeList.get(i).getTaskInfo());","lastModifiedDate":"2021-10-29"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"     * Takes in a valid \"done\" input and gets the index.","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"     * If index is valid, marks the task at that index of the list as completed.","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"    public static void markTaskAtIndex(String input) throws DukeException {","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"        int index \u003d Integer.parseInt(input.substring(4).trim()) - 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"        if (index \u003c DukeList.size() \u0026\u0026 index \u003e -1) {","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"            markTask(DukeList.get(index));","lastModifiedDate":"2021-11-11"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \"","lastModifiedDate":"2021-10-29"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"                    + DukeList.get(index).getTaskInfo());","lastModifiedDate":"2021-10-29"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! \" +","lastModifiedDate":"2021-10-29"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"                    \"The index number of the task to be done is invalid!\");","lastModifiedDate":"2021-10-29"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"     * Mark the task given as a parameter as completed.","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"     * @param inputTask","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"    public static void markTask(Task inputTask) {","lastModifiedDate":"2021-11-11"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"        inputTask.markCompleted();","lastModifiedDate":"2021-10-29"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"     * Takes in a valid \"delete\" input and gets the index.","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"     * If index is valid, the task at that index of the list is deleted from the list.","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"     *","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"    public static void deleteTaskAtIndex(String input) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"        int index \u003d Integer.parseInt(input.substring(6).trim()) - 1;","lastModifiedDate":"2021-10-29"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"        if (index \u003c DukeList.size() \u0026\u0026 index \u003e -1) {","lastModifiedDate":"2021-10-29"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"            String DeletedInfo \u003d DukeList.get(index).getTaskInfo();","lastModifiedDate":"2021-10-29"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"            removeTask(index);","lastModifiedDate":"2021-11-11"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Noted! I\u0027ve removed this task:\\n  \" + DeletedInfo);","lastModifiedDate":"2021-10-29"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"            Ui.printTaskCount();","lastModifiedDate":"2021-11-11"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"☹ OOPS!!! The index number of the task to delete is invalid!\");","lastModifiedDate":"2021-10-29"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"    public static void printTaskWithDesc(String desc) {","lastModifiedDate":"2021-11-10"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-11-10"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"        for (int i \u003d 0; i \u003c TaskList.size(); i++) {","lastModifiedDate":"2021-11-10"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"            Task currentTask \u003d DukeList.get(i);","lastModifiedDate":"2021-11-10"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"            if (currentTask.getDescription().toLowerCase().contains(desc.toLowerCase())) {","lastModifiedDate":"2021-11-10"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"                if (count \u003d\u003d 0) {","lastModifiedDate":"2021-11-10"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"                    System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-11-10"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"                }","lastModifiedDate":"2021-11-10"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"                count++;","lastModifiedDate":"2021-11-10"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"                System.out.println(count + \". \" + currentTask.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-10"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-10"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2021-11-10"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"There are no matching tasks in your list.\");","lastModifiedDate":"2021-11-10"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-10"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-29"}],"authorContributionMap":{"ksw95":115}},{"path":"src/main/java/Duke/DukeLogic/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.DukeLogic;","lastModifiedDate":"2021-11-11"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Task;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":" * Ui class holds Ui display methods that interact with the user.","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"public class Ui {","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"    public final static String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2021-11-11"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"     * Prints the opening message of Duke.","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"    public static void startDuke() {","lastModifiedDate":"2021-11-11"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"        System.out.println(LINE + \"\\nWelcome to\\n\" + logo + \" chatbot!\");","lastModifiedDate":"2021-11-11"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"     * Prints a greeting from Duke.","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"    public static void greet() {","lastModifiedDate":"2021-11-11"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        String start \u003d \"Hello, I\u0027m Duke.\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"                + \"What can I do for you?\\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        System.out.println(LINE + \"\\n\" + start + LINE + \"\\n\");","lastModifiedDate":"2021-11-11"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"     * Prints a message with the number of task inside the task list of Duke.","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"    public static void printTaskCount() {","lastModifiedDate":"2021-11-11"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        System.out.println(\"Now you have \" + TaskList.size() + \" tasks in the list.\");","lastModifiedDate":"2021-10-29"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"     * Prints a message that a Task that has been added.","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"    public static void printTaskAdded(Task newTask) {","lastModifiedDate":"2021-11-11"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-11-11"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"                + newTask.getTaskInfo());","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"    public static void requestPriorityLevel() {","lastModifiedDate":"2021-11-10"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"        System.out.println(\"What is the priority level of this task?\" +","lastModifiedDate":"2021-11-10"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"                \"\\n(enter 1 - LOW priority, 2 - MEDIUM priority, 3 - HIGH priority.\" +","lastModifiedDate":"2021-11-10"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"                \"\\nOther inputs will assume task has NIL priority level.)\");","lastModifiedDate":"2021-11-10"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"        System.out.println(LINE);","lastModifiedDate":"2021-11-11"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"ksw95":55}},{"path":"src/main/java/Duke/Models/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":" * Represents a task with a deadline","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":" * with a description of the task","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":" * and the date and time when it is due.","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    protected String by;","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"    protected LocalTime time;","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"     * A constructor for deadline object that takes in two strings","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * one as the task description","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     * and the other as the deadline of the deadline object.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"     * @param datetime","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    public Deadline(String newTask, String datetime) {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        super(newTask);","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"        by \u003d datetime;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"     * A constructor for deadline object that takes in a string and LocalDate object","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"     * where the string is the task description","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"     * and the LocalDate is the date the task is due.","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"     * @param newDate","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"    public Deadline(String newTask, LocalDate newDate) {","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        super(newTask);","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        date \u003d newDate;","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"     * A constructor for deadline object that takes in a string and LocalDate object","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"     * where the string is the task description,","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"     * the LocalDate is the date the task is due","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"     * and the LocalTime is the time the task is due.","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"     * @param newDate","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"    public Deadline(String newTask, LocalDate newDate, LocalTime newTime) {","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"        super(newTask);","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"        date \u003d newDate;","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"        time \u003d newTime;","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"     * Get the date and time of the deadline.","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"     * @return","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"    public String getAdditionalInfo() {","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"        String info;","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"            info \u003d by;","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"            info \u003d date.toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"                info \u003d info + \" \" + time;","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"        return info;","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"     * Gets a string with task type symbol","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"     * and a cross symbol to indicate whether a task is complete.","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"     * @return String with task type and completed symbol.","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"    public String getCompletedSymbol() {","lastModifiedDate":"2021-10-09"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"        if (Completed) {","lastModifiedDate":"2021-10-09"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"            return \"[D][X]\";","lastModifiedDate":"2021-10-09"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-09"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"            return \"[D][ ]\";","lastModifiedDate":"2021-10-09"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"     * Return string of deadline information.","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"     * Date is given in a new format if event has a LocalDate object.","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"     * @return String with information on the deadline of the task.","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-10-09"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"        String info \u003d super.getTaskInfo() + \" (by: \";","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"            info \u003d info + by;","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"            info \u003d info + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2021-11-03"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"                info \u003d info + \" \" + time;","lastModifiedDate":"2021-11-03"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"        info \u003d info + \")\";","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"        info \u003d info + \" - with \" + Priority + \" priority\";","lastModifiedDate":"2021-11-09"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"        return info;","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"     * Returns task type symbol.","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"     * @return String with initials of the task type.","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"        return \"D\";","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"     * Prints event date in \"MMM, dd, yyyy\" format.","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"ksw95"},"content":"     * Only works if event object has a LocalTime variable.","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"ksw95"},"content":"    public void printDate() {","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"ksw95"},"content":"        System.out.println(date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"ksw95":121}},{"path":"src/main/java/Duke/Models/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-01"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-11-01"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-02"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":" * Represents Events the user has to attend","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":" * with the description of the event and date and time of the event.","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"public class Event extends Task {","lastModifiedDate":"2021-10-09"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    protected String at;","lastModifiedDate":"2021-10-09"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    protected LocalDate date;","lastModifiedDate":"2021-11-01"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"    protected LocalTime time;","lastModifiedDate":"2021-11-01"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-01"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"     * A constructor for event object that takes in two strings","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * one as the task description","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     * and the other as the date/time of event.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"     * @param datetime","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    public Event(String newTask, String datetime) {","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        super(newTask);","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"        at \u003d datetime;","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"     * A constructor for event object that takes in a string and LocalDate object","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"     * where the string is the task description","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"     * and the LocalDate is the date of the event.","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"     * @param newDate","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"    public Event(String newTask, LocalDate newDate) {","lastModifiedDate":"2021-11-02"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        super(newTask);","lastModifiedDate":"2021-11-02"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        date \u003d newDate;","lastModifiedDate":"2021-11-02"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"     * A constructor for event object that takes in a string, LocalDate and LocalTime object","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"     * where the string is the task description,","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"     * the LocalDate is the date of the event","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"     * and the LocalTime is the time of the event.","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"     * @param newDate","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"    public Event(String newTask, LocalDate newDate, LocalTime newTime) {","lastModifiedDate":"2021-11-02"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"        super(newTask);","lastModifiedDate":"2021-11-02"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"        date \u003d newDate;","lastModifiedDate":"2021-11-02"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"        time \u003d newTime;","lastModifiedDate":"2021-11-02"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-02"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-02"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"     * Get the date and time information of the event.","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"     * @return String with date and time of the event.","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"    public String getAdditionalInfo() {","lastModifiedDate":"2021-10-26"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"        String info;","lastModifiedDate":"2021-11-03"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2021-11-03"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"            info \u003d at;","lastModifiedDate":"2021-11-03"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-03"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"            info \u003d date.toString();","lastModifiedDate":"2021-11-03"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2021-11-03"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"                info \u003d info + \" \" + time;","lastModifiedDate":"2021-11-03"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"        return info;","lastModifiedDate":"2021-11-03"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"     * Gets a string with task type symbol","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"     * and a cross symbol to indicate whether a task is complete.","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"     * @return String with task type and completed symbol.","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"    public String getCompletedSymbol() {","lastModifiedDate":"2021-10-10"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"        if (Completed) {","lastModifiedDate":"2021-10-10"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"            return \"[E][X]\";","lastModifiedDate":"2021-10-10"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-10"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"            return \"[E][ ]\";","lastModifiedDate":"2021-10-10"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-10"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"     * Return string of date time information.","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"     * Date is given in a new format if event has a LocalDate object.","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"     * @return String with information on the event of the task.","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-10-10"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"        String info \u003d super.getTaskInfo() + \" (at: \";","lastModifiedDate":"2021-11-02"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2021-11-02"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"            info \u003d info + at;","lastModifiedDate":"2021-11-02"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-02"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"            info \u003d info + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2021-11-02"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"            if (time !\u003d null) {","lastModifiedDate":"2021-11-02"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"                info \u003d info + \" \" + time;","lastModifiedDate":"2021-11-02"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-02"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-02"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"        info \u003d info + \")\";","lastModifiedDate":"2021-11-02"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"        info \u003d info + \" - with \" + Priority + \" priority\";","lastModifiedDate":"2021-11-09"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"        return info;","lastModifiedDate":"2021-11-02"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-10"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-10"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"     * Returns task type symbol.","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"     * @return String with initials of the task type.","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-10-26"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"        return \"E\";","lastModifiedDate":"2021-10-26"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"     * Prints event date in \"MMM, dd, yyyy\" format.","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"ksw95"},"content":"     * Only works if event object has a LocalTime variable.","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"ksw95"},"content":"    public void printDate() {","lastModifiedDate":"2021-11-03"},{"lineNumber":119,"author":{"gitId":"ksw95"},"content":"        System.out.println(date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));","lastModifiedDate":"2021-11-03"},{"lineNumber":120,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":121,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-09"}],"authorContributionMap":{"ksw95":121}},{"path":"src/main/java/Duke/Models/PriorityLevel.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-11-11"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":" * Represents the priority levels of tasks.","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"public enum PriorityLevel {","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"    HIGH, MEDIUM, LOW, NIL","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"ksw95":8}},{"path":"src/main/java/Duke/Models/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.DukeException;","lastModifiedDate":"2021-11-11"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":" * Represents a Task with information regarding the","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":" * description of the task and whether it is completed.","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"public class Task {","lastModifiedDate":"2021-09-07"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"    protected String Description;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    protected boolean Completed;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    protected PriorityLevel Priority;","lastModifiedDate":"2021-11-09"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"     * Task constructor method that takes in a string as description","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"     * and sets task as uncompleted.","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"    public Task(String newTask) {","lastModifiedDate":"2021-09-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"        this.Description \u003d newTask;","lastModifiedDate":"2021-09-07"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"        this.Completed \u003d false;","lastModifiedDate":"2021-09-07"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        this.Priority \u003d PriorityLevel.NIL;","lastModifiedDate":"2021-11-09"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"     * Task constructor method that takes in two strings","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"     * one as the description of the task","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"     * and the other as an indication whether task is completed.","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"     * @param toComplete","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"    public Task(String newTask, String toComplete) throws DukeException {","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"        this.Description \u003d newTask;","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        if (toComplete.equals(\"1\")){","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"            this.Completed \u003d true;","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        } else if (toComplete.equals(\"0\")) {","lastModifiedDate":"2021-10-26"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"            this.Completed \u003d false;","lastModifiedDate":"2021-10-26"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-26"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"            throw new DukeException(\"Invalid input\");","lastModifiedDate":"2021-10-26"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-26"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"     * Returns description of the task as a string.","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"     * @return String with description of the task.","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"        return Description;","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"     * Returns a boolean variable based on whether the task is completed.","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"     * @return boolean","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"        return Completed;","lastModifiedDate":"2021-10-29"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"     * Gets additional info from task object if any.","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"     * @return String with additional info.","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"    public String getAdditionalInfo() {","lastModifiedDate":"2021-10-26"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"        return \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"     }","lastModifiedDate":"2021-10-26"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"     * Returns a \"[X]\" symbol as a string if task is completed.","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"     * If uncompleted, return \"[ ]\" as a string.","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"     * @return String indicating whether a task is completed.","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"    public String getCompletedSymbol() {","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"        if (Completed) {","lastModifiedDate":"2021-09-08"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"            return \"[X]\";","lastModifiedDate":"2021-09-08"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-09-07"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"            return \"[ ]\";","lastModifiedDate":"2021-09-08"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-09-07"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-09-07"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"     * Returns string with task information regarding completion and description.","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"     * @return String with information on Task.","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"        String TaskInfo \u003d this.getCompletedSymbol() + \" \" + Description;","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"        return TaskInfo;","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"     * Marks \"Completed\" variable as true.","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"    public void markCompleted() {","lastModifiedDate":"2021-09-08"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"        Completed \u003d true;","lastModifiedDate":"2021-09-08"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-26"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"     * Gets the task type of a task object.","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"     * @return String of initials of task type in any.","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-10-26"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"        return \"\";","lastModifiedDate":"2021-10-26"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-09"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-09"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"     * Sets the priority level of the task","lastModifiedDate":"2021-11-09"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"     * based on the parameter passed.","lastModifiedDate":"2021-11-09"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"     * @param level","lastModifiedDate":"2021-11-09"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-09"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"    public void setPriority(String level) {","lastModifiedDate":"2021-11-09"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-09"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"            this.Priority \u003d PriorityLevel.valueOf(level.trim());","lastModifiedDate":"2021-11-09"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2021-11-09"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"            switch (level.trim()) {","lastModifiedDate":"2021-11-09"},{"lineNumber":116,"author":{"gitId":"ksw95"},"content":"            case \"3\":","lastModifiedDate":"2021-11-09"},{"lineNumber":117,"author":{"gitId":"ksw95"},"content":"                this.Priority \u003d PriorityLevel.HIGH;","lastModifiedDate":"2021-11-09"},{"lineNumber":118,"author":{"gitId":"ksw95"},"content":"                break;","lastModifiedDate":"2021-11-09"},{"lineNumber":119,"author":{"gitId":"ksw95"},"content":"            case \"2\":","lastModifiedDate":"2021-11-09"},{"lineNumber":120,"author":{"gitId":"ksw95"},"content":"                this.Priority \u003d PriorityLevel.MEDIUM;","lastModifiedDate":"2021-11-09"},{"lineNumber":121,"author":{"gitId":"ksw95"},"content":"                break;","lastModifiedDate":"2021-11-09"},{"lineNumber":122,"author":{"gitId":"ksw95"},"content":"            case \"1\":","lastModifiedDate":"2021-11-09"},{"lineNumber":123,"author":{"gitId":"ksw95"},"content":"                this.Priority \u003d PriorityLevel.LOW;","lastModifiedDate":"2021-11-09"},{"lineNumber":124,"author":{"gitId":"ksw95"},"content":"                break;","lastModifiedDate":"2021-11-09"},{"lineNumber":125,"author":{"gitId":"ksw95"},"content":"            default:","lastModifiedDate":"2021-11-09"},{"lineNumber":126,"author":{"gitId":"ksw95"},"content":"                this.Priority \u003d PriorityLevel.NIL;","lastModifiedDate":"2021-11-09"},{"lineNumber":127,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-09"},{"lineNumber":128,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-09"},{"lineNumber":129,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-09"},{"lineNumber":130,"author":{"gitId":"ksw95"},"content":"    ","lastModifiedDate":"2021-11-09"},{"lineNumber":131,"author":{"gitId":"ksw95"},"content":"    public PriorityLevel getPriority() {","lastModifiedDate":"2021-11-09"},{"lineNumber":132,"author":{"gitId":"ksw95"},"content":"        return Priority;","lastModifiedDate":"2021-11-09"},{"lineNumber":133,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-09"},{"lineNumber":134,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-09"},{"lineNumber":135,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-09-07"}],"authorContributionMap":{"ksw95":135}},{"path":"src/main/java/Duke/Models/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":" * Represents a task that are to be done","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":" * with the description of the task.","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-28"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-09-28"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"     * Constructor method for To do object.","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    public Todo(String newTask) {","lastModifiedDate":"2021-10-09"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"        super(newTask);","lastModifiedDate":"2021-10-09"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"     * Gets a string with task type symbol","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * and a cross symbol to indicate whether a task is complete.","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     * @return String with task type and completed symbol.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"    public String getCompletedSymbol() {","lastModifiedDate":"2021-10-09"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        if (Completed) {","lastModifiedDate":"2021-10-09"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"            return \"[T][X]\";","lastModifiedDate":"2021-10-09"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-09"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"            return \"[T][ ]\";","lastModifiedDate":"2021-10-09"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-09"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-09"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-09"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"     * Returns task type symbol.","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"     * @return String with the initials of task type.","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"    @Override","lastModifiedDate":"2021-10-26"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"    public String getTaskType() {","lastModifiedDate":"2021-10-26"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        return \"T\";","lastModifiedDate":"2021-10-26"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-26"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-09"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"    @Override","lastModifiedDate":"2021-11-09"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2021-11-09"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"        String info \u003d super.getTaskInfo();","lastModifiedDate":"2021-11-09"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"        info \u003d info + \" - with \" + Priority + \" priority\";","lastModifiedDate":"2021-11-09"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"        return info;","lastModifiedDate":"2021-11-09"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-09"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-09-28"}],"authorContributionMap":{"ksw95":45}},{"path":"src/main/java/Duke/Parser/FileLineParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Parser;","lastModifiedDate":"2021-11-11"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.Checker.FileLineChecker;","lastModifiedDate":"2021-11-11"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.DukeException;","lastModifiedDate":"2021-11-11"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.TaskList;","lastModifiedDate":"2021-11-11"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Deadline;","lastModifiedDate":"2021-11-11"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Event;","lastModifiedDate":"2021-11-11"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Task;","lastModifiedDate":"2021-11-11"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Todo;","lastModifiedDate":"2021-11-11"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-11"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-11-11"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-11-11"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"public class FileLineParser {","lastModifiedDate":"2021-11-11"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-11"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"     * Takes and parse a line from the storage file,","lastModifiedDate":"2021-11-11"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"     * uses the information from the line to create","lastModifiedDate":"2021-11-11"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"     * and return the respective task object based on the line.","lastModifiedDate":"2021-11-11"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"     * @param FileLine","lastModifiedDate":"2021-11-11"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     * @return Task object created from file line.","lastModifiedDate":"2021-11-11"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"     * @throws DukeException","lastModifiedDate":"2021-11-11"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-11"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    public static Task parseLineFromFile(String FileLine) throws DukeException {","lastModifiedDate":"2021-11-11"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        String[] parts \u003d FileLine.split(\"\\\\|\");","lastModifiedDate":"2021-11-11"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"        if (parts[0].trim().equals(\"T\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"            if(FileLineChecker.isValidTodoLine(parts)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"                Todo newTodo \u003d getTodoFromLine(parts);","lastModifiedDate":"2021-11-11"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"                return newTodo;","lastModifiedDate":"2021-11-11"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"        } else if (parts[0].trim().equals(\"D\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"            if(FileLineChecker.isValidDeadlineLine(parts)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"                Deadline newDeadline \u003d getDeadlineFromLine(parts);","lastModifiedDate":"2021-11-11"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"                return newDeadline;","lastModifiedDate":"2021-11-11"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        } else if (parts[0].trim().equals(\"E\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"            if (FileLineChecker.isValidEventLine(parts)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"                Event newEvent \u003d getEventFromLine(parts);","lastModifiedDate":"2021-11-11"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"                return newEvent;","lastModifiedDate":"2021-11-11"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Line is invalid\");","lastModifiedDate":"2021-11-11"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"        throw new DukeException(\"A line from storage file is invalid and will not be added to Duke.\");","lastModifiedDate":"2021-11-11"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-11"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-11"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"     * Takes in the parsed parts of a line from the storage file","lastModifiedDate":"2021-11-11"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"     * and return a new \"To do\" object created from the parts.","lastModifiedDate":"2021-11-11"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"     * @param parts","lastModifiedDate":"2021-11-11"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"     * @return \"To do\" object created from information parsed from a file line.","lastModifiedDate":"2021-11-11"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-11"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    public static Todo getTodoFromLine(String[] parts) {","lastModifiedDate":"2021-11-11"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"        Todo newTodo \u003d new Todo(parts[2].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"        if (parts[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"            TaskList.markTask(newTodo);","lastModifiedDate":"2021-11-11"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"        newTodo.setPriority(parts[3]);","lastModifiedDate":"2021-11-11"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"        return newTodo;","lastModifiedDate":"2021-11-11"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-11"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-11"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"     * Takes in the parsed parts of a line from the storage file,","lastModifiedDate":"2021-11-11"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"     * checks whether it has a date and time and creates and returns","lastModifiedDate":"2021-11-11"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"     * a new \"Deadline\" object using the correct constructor based on the checks.","lastModifiedDate":"2021-11-11"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"     * @param parts","lastModifiedDate":"2021-11-11"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"     * @return Deadline object created from information parsed from a file line.","lastModifiedDate":"2021-11-11"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-11"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"    public static Deadline getDeadlineFromLine(String[] parts) {","lastModifiedDate":"2021-11-11"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"        String[] datetime \u003d parts[3].trim().split(\" \");","lastModifiedDate":"2021-11-11"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"        Deadline newDeadline;","lastModifiedDate":"2021-11-11"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"        if (datetime.length \u003e 2 ) {","lastModifiedDate":"2021-11-11"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"            newDeadline \u003d new Deadline(parts[2].trim(), parts[3].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"            LocalDate newDate \u003d null;","lastModifiedDate":"2021-11-11"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"            LocalTime newTime \u003d null;","lastModifiedDate":"2021-11-11"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"            try {","lastModifiedDate":"2021-11-11"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"                newDate \u003d LocalDate.parse(datetime[0]);","lastModifiedDate":"2021-11-11"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"                newTime \u003d LocalTime.parse(datetime[1]);","lastModifiedDate":"2021-11-11"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-11-11"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"                e.getMessage();","lastModifiedDate":"2021-11-11"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-11"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"                e.getMessage();","lastModifiedDate":"2021-11-11"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"            if (newDate !\u003d null \u0026\u0026 newTime !\u003d null) {","lastModifiedDate":"2021-11-11"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"                newDeadline \u003d new Deadline(parts[2].trim(), newDate, newTime);","lastModifiedDate":"2021-11-11"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"            } else if (newDate !\u003d null) {","lastModifiedDate":"2021-11-11"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"                newDeadline \u003d new Deadline(parts[2].trim(), newDate);","lastModifiedDate":"2021-11-11"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"                newDeadline \u003d new Deadline(parts[2].trim(), parts[3].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"        if (parts[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"            TaskList.markTask(newDeadline);","lastModifiedDate":"2021-11-11"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"        newDeadline.setPriority(parts[4]);","lastModifiedDate":"2021-11-11"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"        return newDeadline;","lastModifiedDate":"2021-11-11"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-11"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-11"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"     * Takes in the parsed parts of a line from the storage file,","lastModifiedDate":"2021-11-11"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"     * checks whether it has a date and time and creates and returns","lastModifiedDate":"2021-11-11"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"     * a new \"Event\" object using the correct constructor based on the checks.","lastModifiedDate":"2021-11-11"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"     * @param parts","lastModifiedDate":"2021-11-11"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"     * @return an Event object created from information parsed from a file line.","lastModifiedDate":"2021-11-11"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-11"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"    public static Event getEventFromLine(String[] parts) {","lastModifiedDate":"2021-11-11"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"        String[] datetime \u003d parts[3].trim().split(\" \");","lastModifiedDate":"2021-11-11"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"        Event newEvent;","lastModifiedDate":"2021-11-11"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"        if (datetime.length \u003e 2 ) {","lastModifiedDate":"2021-11-11"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"            newEvent \u003d new Event(parts[2].trim(), parts[3].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"            LocalDate newDate \u003d null;","lastModifiedDate":"2021-11-11"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"            LocalTime newTime \u003d null;","lastModifiedDate":"2021-11-11"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"            try {","lastModifiedDate":"2021-11-11"},{"lineNumber":116,"author":{"gitId":"ksw95"},"content":"                newDate \u003d LocalDate.parse(datetime[0]);","lastModifiedDate":"2021-11-11"},{"lineNumber":117,"author":{"gitId":"ksw95"},"content":"                newTime \u003d LocalTime.parse(datetime[1]);","lastModifiedDate":"2021-11-11"},{"lineNumber":118,"author":{"gitId":"ksw95"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2021-11-11"},{"lineNumber":119,"author":{"gitId":"ksw95"},"content":"                e.getMessage();","lastModifiedDate":"2021-11-11"},{"lineNumber":120,"author":{"gitId":"ksw95"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-11"},{"lineNumber":121,"author":{"gitId":"ksw95"},"content":"                e.getMessage();","lastModifiedDate":"2021-11-11"},{"lineNumber":122,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":123,"author":{"gitId":"ksw95"},"content":"            if (newDate !\u003d null \u0026\u0026 newTime !\u003d null) {","lastModifiedDate":"2021-11-11"},{"lineNumber":124,"author":{"gitId":"ksw95"},"content":"                newEvent \u003d new Event(parts[2].trim(), newDate, newTime);","lastModifiedDate":"2021-11-11"},{"lineNumber":125,"author":{"gitId":"ksw95"},"content":"            } else if (newDate !\u003d null) {","lastModifiedDate":"2021-11-11"},{"lineNumber":126,"author":{"gitId":"ksw95"},"content":"                newEvent \u003d new Event(parts[2].trim(), newDate);","lastModifiedDate":"2021-11-11"},{"lineNumber":127,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":128,"author":{"gitId":"ksw95"},"content":"                newEvent \u003d new Event(parts[2].trim(), parts[3].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":129,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":130,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":131,"author":{"gitId":"ksw95"},"content":"        if (parts[1].trim().equals(\"1\")) {","lastModifiedDate":"2021-11-11"},{"lineNumber":132,"author":{"gitId":"ksw95"},"content":"            TaskList.markTask(newEvent);","lastModifiedDate":"2021-11-11"},{"lineNumber":133,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":134,"author":{"gitId":"ksw95"},"content":"        newEvent.setPriority(parts[4]);","lastModifiedDate":"2021-11-11"},{"lineNumber":135,"author":{"gitId":"ksw95"},"content":"        return newEvent;","lastModifiedDate":"2021-11-11"},{"lineNumber":136,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-11"},{"lineNumber":137,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-11"}],"authorContributionMap":{"ksw95":137}},{"path":"src/main/java/Duke/Parser/InputParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Parser;","lastModifiedDate":"2021-10-29"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.Checker.InputChecker;","lastModifiedDate":"2021-10-29"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Deadline;","lastModifiedDate":"2021-11-11"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Event;","lastModifiedDate":"2021-11-11"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Task;","lastModifiedDate":"2021-11-11"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"import Duke.Models.Todo;","lastModifiedDate":"2021-11-11"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.DukeException;","lastModifiedDate":"2021-11-11"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.TaskList;","lastModifiedDate":"2021-11-11"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.Ui;","lastModifiedDate":"2021-11-11"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"import Duke.Duke;","lastModifiedDate":"2021-11-10"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-03"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":" * Represents a parser that make sense of inputs and retrieved lines.","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"public class InputParser {","lastModifiedDate":"2021-11-11"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"     * Reads the input","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"     * create a task object based on the input","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"     * and adds it into the task list of Duke.","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"    public static void parseInput(String input) {","lastModifiedDate":"2021-10-29"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        if (input.trim().equals(\"list\")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"            TaskList.printTaskList();","lastModifiedDate":"2021-10-29"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        } else if (input.startsWith(\"todo \")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"            parseTodoInput(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"        } else if (input.startsWith(\"deadline \")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"            parseDeadlineInput(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"        } else if (input.startsWith(\"event \")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"            parseEventInput(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"        } else if (input.startsWith(\"done \")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"            parseDoneInput(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        } else if (input.startsWith(\"delete \")) {","lastModifiedDate":"2021-10-29"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"            parseDeleteInput(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"        } else if (input.startsWith(\"find \")) {","lastModifiedDate":"2021-11-10"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"            parseFindInput(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-10-29"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-10-29"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-29"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-29"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-29"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"     * If input contains valid information for a \"To do\" object,","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"     * method creates the \"to do\" Object from the input","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"     * and adds it to duke task list","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"    public static void parseTodoInput(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-10-29"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"            if (InputChecker.isValidTodoInput(input)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"                String newTask \u003d input.substring(4).trim();","lastModifiedDate":"2021-10-29"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"                Todo newTodo \u003d new Todo(newTask);","lastModifiedDate":"2021-10-29"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"                TaskList.addTaskToList(newTodo);","lastModifiedDate":"2021-10-29"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"                addPriorityToTask(newTodo);","lastModifiedDate":"2021-11-09"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"                Ui.printTaskAdded(newTodo);","lastModifiedDate":"2021-11-11"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"                Ui.printTaskCount();","lastModifiedDate":"2021-11-11"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-29"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"            e.printErrMsg();","lastModifiedDate":"2021-10-29"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"     * If input contains valid information for a \"deadline\" object,","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"     * method creates the \"deadline\" Object from the input","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"     * and adds it to duke task list","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"    public static void parseDeadlineInput(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-10-29"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"            if (InputChecker.isValidDeadlineInput(input)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"                Deadline newDeadline \u003d buildDeadline(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"                TaskList.addTaskToList(newDeadline);","lastModifiedDate":"2021-10-29"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"                addPriorityToTask(newDeadline);","lastModifiedDate":"2021-11-09"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"                Ui.printTaskAdded(newDeadline);","lastModifiedDate":"2021-11-11"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"                Ui.printTaskCount();","lastModifiedDate":"2021-11-11"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"            e.printErrMsg();","lastModifiedDate":"2021-10-29"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-11"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"     * Takes in a valid input with information on a deadline,","lastModifiedDate":"2021-11-11"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"     * parse the parts of the input","lastModifiedDate":"2021-11-11"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"     * and returns a new Deadline object created using the relevant constructor.","lastModifiedDate":"2021-11-11"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-11"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"     * @return Deadline object created from a valid input with deadline information.","lastModifiedDate":"2021-11-11"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-11"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"    public static Deadline buildDeadline(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"        String[] parts \u003d input.substring(8).split(\"/by\");","lastModifiedDate":"2021-11-11"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"        String[] datetime \u003d parts[1].trim().split(\" \");","lastModifiedDate":"2021-11-11"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"        Deadline newDeadline;","lastModifiedDate":"2021-11-11"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"        if (datetime.length \u003e 2) {","lastModifiedDate":"2021-11-11"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"            newDeadline \u003d new Deadline(parts[0].trim(), parts[1].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"            String[] dateDetails \u003d datetime[0].split(\"/\");","lastModifiedDate":"2021-11-11"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"            if (checkDateInput(dateDetails)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"                LocalDate taskDate \u003d buildTaskDate(dateDetails);","lastModifiedDate":"2021-11-11"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"                if (datetime.length \u003d\u003d 2 \u0026\u0026 checkTimeInput(datetime[1])) {","lastModifiedDate":"2021-11-11"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"                    LocalTime taskTime \u003d buildTaskTime(datetime[1]);","lastModifiedDate":"2021-11-11"},{"lineNumber":106,"author":{"gitId":"ksw95"},"content":"                    newDeadline \u003d new Deadline(parts[0].trim(), taskDate, taskTime);","lastModifiedDate":"2021-11-11"},{"lineNumber":107,"author":{"gitId":"ksw95"},"content":"                } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":108,"author":{"gitId":"ksw95"},"content":"                    newDeadline \u003d new Deadline(parts[0].trim(), taskDate);","lastModifiedDate":"2021-11-11"},{"lineNumber":109,"author":{"gitId":"ksw95"},"content":"                }","lastModifiedDate":"2021-11-11"},{"lineNumber":110,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":111,"author":{"gitId":"ksw95"},"content":"                newDeadline \u003d new Deadline(parts[0].trim(), parts[1].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":112,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-11"},{"lineNumber":113,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-11"},{"lineNumber":114,"author":{"gitId":"ksw95"},"content":"        return newDeadline;","lastModifiedDate":"2021-11-11"},{"lineNumber":115,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-11"},{"lineNumber":116,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":117,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"ksw95"},"content":"     * If input contains valid information for an \"event\" object,","lastModifiedDate":"2021-11-07"},{"lineNumber":119,"author":{"gitId":"ksw95"},"content":"     * method creates the \"event\" Object from the input","lastModifiedDate":"2021-11-07"},{"lineNumber":120,"author":{"gitId":"ksw95"},"content":"     * and adds it to duke task list","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"ksw95"},"content":"    public static void parseEventInput(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":124,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-10-29"},{"lineNumber":125,"author":{"gitId":"ksw95"},"content":"            if (InputChecker.isValidEventInput(input)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":126,"author":{"gitId":"ksw95"},"content":"                Event newEvent \u003d buildEvent(input);","lastModifiedDate":"2021-11-03"},{"lineNumber":127,"author":{"gitId":"ksw95"},"content":"                TaskList.addTaskToList(newEvent);","lastModifiedDate":"2021-10-29"},{"lineNumber":128,"author":{"gitId":"ksw95"},"content":"                addPriorityToTask(newEvent);","lastModifiedDate":"2021-11-09"},{"lineNumber":129,"author":{"gitId":"ksw95"},"content":"                Ui.printTaskAdded(newEvent);","lastModifiedDate":"2021-11-11"},{"lineNumber":130,"author":{"gitId":"ksw95"},"content":"                Ui.printTaskCount();","lastModifiedDate":"2021-11-11"},{"lineNumber":131,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":132,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-29"},{"lineNumber":133,"author":{"gitId":"ksw95"},"content":"            e.printErrMsg();","lastModifiedDate":"2021-10-29"},{"lineNumber":134,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":136,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-09"},{"lineNumber":138,"author":{"gitId":"ksw95"},"content":"     * Takes in a valid input with information on an event,","lastModifiedDate":"2021-11-11"},{"lineNumber":139,"author":{"gitId":"ksw95"},"content":"     * parse the parts of the input","lastModifiedDate":"2021-11-11"},{"lineNumber":140,"author":{"gitId":"ksw95"},"content":"     * and returns a new Event object created using the relevant constructor.","lastModifiedDate":"2021-11-11"},{"lineNumber":141,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"ksw95"},"content":"     * @return a Event object created from a valid input with event information.","lastModifiedDate":"2021-11-11"},{"lineNumber":143,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":144,"author":{"gitId":"ksw95"},"content":"    public static Event buildEvent(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":145,"author":{"gitId":"ksw95"},"content":"        String[] parts \u003d input.substring(5).split(\"/at\");","lastModifiedDate":"2021-11-11"},{"lineNumber":146,"author":{"gitId":"ksw95"},"content":"        String[] datetime \u003d parts[1].trim().split(\" \");","lastModifiedDate":"2021-11-11"},{"lineNumber":147,"author":{"gitId":"ksw95"},"content":"        Event newEvent;","lastModifiedDate":"2021-11-11"},{"lineNumber":148,"author":{"gitId":"ksw95"},"content":"        if (datetime.length \u003e 2) {","lastModifiedDate":"2021-11-11"},{"lineNumber":149,"author":{"gitId":"ksw95"},"content":"            newEvent \u003d new Event(parts[0].trim(), parts[1].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":150,"author":{"gitId":"ksw95"},"content":"        } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":151,"author":{"gitId":"ksw95"},"content":"            String[] dateDetails \u003d datetime[0].split(\"/\");","lastModifiedDate":"2021-11-11"},{"lineNumber":152,"author":{"gitId":"ksw95"},"content":"            if (checkDateInput(dateDetails)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":153,"author":{"gitId":"ksw95"},"content":"                LocalDate taskDate \u003d buildTaskDate(dateDetails);","lastModifiedDate":"2021-11-11"},{"lineNumber":154,"author":{"gitId":"ksw95"},"content":"                if (datetime.length \u003d\u003d 2 \u0026\u0026 checkTimeInput(datetime[1])) {","lastModifiedDate":"2021-11-11"},{"lineNumber":155,"author":{"gitId":"ksw95"},"content":"                    LocalTime taskTime \u003d buildTaskTime(datetime[1]);","lastModifiedDate":"2021-11-11"},{"lineNumber":156,"author":{"gitId":"ksw95"},"content":"                    newEvent \u003d new Event(parts[0].trim(), taskDate, taskTime);","lastModifiedDate":"2021-11-11"},{"lineNumber":157,"author":{"gitId":"ksw95"},"content":"                } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":158,"author":{"gitId":"ksw95"},"content":"                    newEvent \u003d new Event(parts[0].trim(), taskDate);","lastModifiedDate":"2021-11-11"},{"lineNumber":159,"author":{"gitId":"ksw95"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":160,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-11-11"},{"lineNumber":161,"author":{"gitId":"ksw95"},"content":"                newEvent \u003d new Event(parts[0].trim(), parts[1].trim());","lastModifiedDate":"2021-11-11"},{"lineNumber":162,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":163,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":164,"author":{"gitId":"ksw95"},"content":"        return newEvent;","lastModifiedDate":"2021-11-11"},{"lineNumber":165,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":166,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":167,"author":{"gitId":"ksw95"},"content":"     * Takes in a string and checks whether it is in an input representing time.","lastModifiedDate":"2021-11-07"},{"lineNumber":168,"author":{"gitId":"ksw95"},"content":"     * If it is in valid format, return true.","lastModifiedDate":"2021-11-07"},{"lineNumber":169,"author":{"gitId":"ksw95"},"content":"     * @param timeInput","lastModifiedDate":"2021-11-07"},{"lineNumber":170,"author":{"gitId":"ksw95"},"content":"     * @return boolean on whether input is represented in a valid time format.","lastModifiedDate":"2021-11-07"},{"lineNumber":171,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":172,"author":{"gitId":"ksw95"},"content":"    public static boolean checkTimeInput(String timeInput) {","lastModifiedDate":"2021-11-03"},{"lineNumber":173,"author":{"gitId":"ksw95"},"content":"        if (timeInput.equals(\"\")) {","lastModifiedDate":"2021-11-03"},{"lineNumber":174,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":175,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":176,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":177,"author":{"gitId":"ksw95"},"content":"            int time \u003d Integer.parseInt(timeInput);","lastModifiedDate":"2021-11-03"},{"lineNumber":178,"author":{"gitId":"ksw95"},"content":"            int hour \u003d time/100;","lastModifiedDate":"2021-11-03"},{"lineNumber":179,"author":{"gitId":"ksw95"},"content":"            int mins \u003d time%100;","lastModifiedDate":"2021-11-03"},{"lineNumber":180,"author":{"gitId":"ksw95"},"content":"            if (hour \u003c 24 \u0026\u0026 hour \u003e -1 \u0026\u0026 mins \u003c 60 \u0026\u0026 mins \u003e -1) {","lastModifiedDate":"2021-11-03"},{"lineNumber":181,"author":{"gitId":"ksw95"},"content":"                return true;","lastModifiedDate":"2021-11-03"},{"lineNumber":182,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-11-03"},{"lineNumber":183,"author":{"gitId":"ksw95"},"content":"                return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":184,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":185,"author":{"gitId":"ksw95"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-03"},{"lineNumber":186,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":187,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":188,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":189,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":190,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":191,"author":{"gitId":"ksw95"},"content":"     * Takes and parse a string representing time","lastModifiedDate":"2021-11-07"},{"lineNumber":192,"author":{"gitId":"ksw95"},"content":"     * and return a new LocalTime object","lastModifiedDate":"2021-11-07"},{"lineNumber":193,"author":{"gitId":"ksw95"},"content":"     * created from the parsed parts of the string.","lastModifiedDate":"2021-11-07"},{"lineNumber":194,"author":{"gitId":"ksw95"},"content":"     * @param timeInput","lastModifiedDate":"2021-11-07"},{"lineNumber":195,"author":{"gitId":"ksw95"},"content":"     * @return LocalTime object created from a valid time format input.","lastModifiedDate":"2021-11-07"},{"lineNumber":196,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":197,"author":{"gitId":"ksw95"},"content":"    public static LocalTime buildTaskTime(String timeInput) {","lastModifiedDate":"2021-11-03"},{"lineNumber":198,"author":{"gitId":"ksw95"},"content":"        int time \u003d Integer.parseInt(timeInput);","lastModifiedDate":"2021-11-03"},{"lineNumber":199,"author":{"gitId":"ksw95"},"content":"        int hour \u003d time/100;","lastModifiedDate":"2021-11-03"},{"lineNumber":200,"author":{"gitId":"ksw95"},"content":"        int mins \u003d time%100;","lastModifiedDate":"2021-11-03"},{"lineNumber":201,"author":{"gitId":"ksw95"},"content":"        LocalTime taskTime \u003d LocalTime.of(hour, mins);","lastModifiedDate":"2021-11-03"},{"lineNumber":202,"author":{"gitId":"ksw95"},"content":"        return taskTime;","lastModifiedDate":"2021-11-03"},{"lineNumber":203,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":204,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":205,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":206,"author":{"gitId":"ksw95"},"content":"     * Takes in a string array and checks whether it contains valid strings","lastModifiedDate":"2021-11-07"},{"lineNumber":207,"author":{"gitId":"ksw95"},"content":"     * that represent date, month and year.","lastModifiedDate":"2021-11-07"},{"lineNumber":208,"author":{"gitId":"ksw95"},"content":"     * If valid, the method returns true.","lastModifiedDate":"2021-11-07"},{"lineNumber":209,"author":{"gitId":"ksw95"},"content":"     * @param details","lastModifiedDate":"2021-11-07"},{"lineNumber":210,"author":{"gitId":"ksw95"},"content":"     * @return boolean whether input contains the correct details to represent date.","lastModifiedDate":"2021-11-07"},{"lineNumber":211,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":212,"author":{"gitId":"ksw95"},"content":"    public static boolean checkDateInput(String[] details) {","lastModifiedDate":"2021-11-03"},{"lineNumber":213,"author":{"gitId":"ksw95"},"content":"        if (details.length !\u003d 3) {","lastModifiedDate":"2021-11-03"},{"lineNumber":214,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":215,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":216,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-03"},{"lineNumber":217,"author":{"gitId":"ksw95"},"content":"            int day \u003d Integer.parseInt(details[0].trim());","lastModifiedDate":"2021-11-03"},{"lineNumber":218,"author":{"gitId":"ksw95"},"content":"            int month \u003d Integer.parseInt(details[1].trim());","lastModifiedDate":"2021-11-03"},{"lineNumber":219,"author":{"gitId":"ksw95"},"content":"            int year \u003d Integer.parseInt(details[2].trim());","lastModifiedDate":"2021-11-03"},{"lineNumber":220,"author":{"gitId":"ksw95"},"content":"            if (day \u003e 31 || day \u003c 1) {","lastModifiedDate":"2021-11-03"},{"lineNumber":221,"author":{"gitId":"ksw95"},"content":"                return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":222,"author":{"gitId":"ksw95"},"content":"            } else if (month \u003e 12 || month \u003c 1) {","lastModifiedDate":"2021-11-03"},{"lineNumber":223,"author":{"gitId":"ksw95"},"content":"                return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":224,"author":{"gitId":"ksw95"},"content":"            } else if (year \u003c 0) {","lastModifiedDate":"2021-11-03"},{"lineNumber":225,"author":{"gitId":"ksw95"},"content":"                return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":226,"author":{"gitId":"ksw95"},"content":"            } else {","lastModifiedDate":"2021-11-03"},{"lineNumber":227,"author":{"gitId":"ksw95"},"content":"                return true;","lastModifiedDate":"2021-11-03"},{"lineNumber":228,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":229,"author":{"gitId":"ksw95"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-11-03"},{"lineNumber":230,"author":{"gitId":"ksw95"},"content":"            return false;","lastModifiedDate":"2021-11-03"},{"lineNumber":231,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":232,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":233,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":234,"author":{"gitId":"ksw95"},"content":"    /** Takes a string array with details on a specific date","lastModifiedDate":"2021-11-07"},{"lineNumber":235,"author":{"gitId":"ksw95"},"content":"     * and return a LocalDate object","lastModifiedDate":"2021-11-07"},{"lineNumber":236,"author":{"gitId":"ksw95"},"content":"     * created using the details.","lastModifiedDate":"2021-11-07"},{"lineNumber":237,"author":{"gitId":"ksw95"},"content":"     * @param details","lastModifiedDate":"2021-11-07"},{"lineNumber":238,"author":{"gitId":"ksw95"},"content":"     * @return LocalDate object created from the parts of a valid date format input.","lastModifiedDate":"2021-11-07"},{"lineNumber":239,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":240,"author":{"gitId":"ksw95"},"content":"    public static LocalDate buildTaskDate(String[] details) {","lastModifiedDate":"2021-11-03"},{"lineNumber":241,"author":{"gitId":"ksw95"},"content":"        String day \u003d details[0].trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":242,"author":{"gitId":"ksw95"},"content":"        if (day.length() \u003d\u003d 1) {","lastModifiedDate":"2021-11-03"},{"lineNumber":243,"author":{"gitId":"ksw95"},"content":"            day \u003d \"0\" + day;","lastModifiedDate":"2021-11-03"},{"lineNumber":244,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":245,"author":{"gitId":"ksw95"},"content":"        String month \u003d details[1].trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":246,"author":{"gitId":"ksw95"},"content":"        if (month.length() \u003d\u003d 1) {","lastModifiedDate":"2021-11-03"},{"lineNumber":247,"author":{"gitId":"ksw95"},"content":"            month \u003d \"0\" + month;","lastModifiedDate":"2021-11-03"},{"lineNumber":248,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":249,"author":{"gitId":"ksw95"},"content":"        String year \u003d details[2].trim();","lastModifiedDate":"2021-11-03"},{"lineNumber":250,"author":{"gitId":"ksw95"},"content":"        if (year.length() \u003c 4) {","lastModifiedDate":"2021-11-03"},{"lineNumber":251,"author":{"gitId":"ksw95"},"content":"            for (int i \u003d year.length(); i \u003c 4; i ++) {","lastModifiedDate":"2021-11-03"},{"lineNumber":252,"author":{"gitId":"ksw95"},"content":"                year \u003d \"0\" + year;","lastModifiedDate":"2021-11-03"},{"lineNumber":253,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":254,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":255,"author":{"gitId":"ksw95"},"content":"        String newDateFormat \u003d year + \"-\" + month + \"-\" + day;","lastModifiedDate":"2021-11-03"},{"lineNumber":256,"author":{"gitId":"ksw95"},"content":"        LocalDate taskDate \u003d LocalDate.parse(newDateFormat);","lastModifiedDate":"2021-11-03"},{"lineNumber":257,"author":{"gitId":"ksw95"},"content":"        return taskDate;","lastModifiedDate":"2021-11-03"},{"lineNumber":258,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":259,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":260,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":261,"author":{"gitId":"ksw95"},"content":"     * Takes in a task object and request priority level of task from user.","lastModifiedDate":"2021-11-11"},{"lineNumber":262,"author":{"gitId":"ksw95"},"content":"     * Set the priority level of the task object based on the input from user.","lastModifiedDate":"2021-11-11"},{"lineNumber":263,"author":{"gitId":"ksw95"},"content":"     * @param newTask","lastModifiedDate":"2021-11-11"},{"lineNumber":264,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":265,"author":{"gitId":"ksw95"},"content":"    public static void addPriorityToTask(Task newTask) {","lastModifiedDate":"2021-11-11"},{"lineNumber":266,"author":{"gitId":"ksw95"},"content":"        Ui.requestPriorityLevel();","lastModifiedDate":"2021-11-11"},{"lineNumber":267,"author":{"gitId":"ksw95"},"content":"        String level \u003d Duke.getInput();","lastModifiedDate":"2021-11-11"},{"lineNumber":268,"author":{"gitId":"ksw95"},"content":"        newTask.setPriority(level);","lastModifiedDate":"2021-11-11"},{"lineNumber":269,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":270,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-11"},{"lineNumber":271,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-11"},{"lineNumber":272,"author":{"gitId":"ksw95"},"content":"     * If input contain valid information to identify a task in the list,","lastModifiedDate":"2021-11-11"},{"lineNumber":273,"author":{"gitId":"ksw95"},"content":"     * mark said task object as completed.","lastModifiedDate":"2021-11-11"},{"lineNumber":274,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-11"},{"lineNumber":275,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-11"},{"lineNumber":276,"author":{"gitId":"ksw95"},"content":"    public static void parseDoneInput(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":277,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-11"},{"lineNumber":278,"author":{"gitId":"ksw95"},"content":"            if (InputChecker.isValidDoneInput(input)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":279,"author":{"gitId":"ksw95"},"content":"                TaskList.markTaskAtIndex(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":280,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":281,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-11"},{"lineNumber":282,"author":{"gitId":"ksw95"},"content":"            e.printErrMsg();","lastModifiedDate":"2021-11-11"},{"lineNumber":283,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":284,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":285,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":286,"author":{"gitId":"ksw95"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":287,"author":{"gitId":"ksw95"},"content":"     * If input contain valid information to identify a task in the list,","lastModifiedDate":"2021-11-11"},{"lineNumber":288,"author":{"gitId":"ksw95"},"content":"     * delete said task object.","lastModifiedDate":"2021-11-11"},{"lineNumber":289,"author":{"gitId":"ksw95"},"content":"     * @param input","lastModifiedDate":"2021-11-07"},{"lineNumber":290,"author":{"gitId":"ksw95"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":291,"author":{"gitId":"ksw95"},"content":"    public static void parseDeleteInput(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":292,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-11"},{"lineNumber":293,"author":{"gitId":"ksw95"},"content":"            if (InputChecker.isValidDeleteInput(input)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":294,"author":{"gitId":"ksw95"},"content":"                TaskList.deleteTaskAtIndex(input);","lastModifiedDate":"2021-11-11"},{"lineNumber":295,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-03"},{"lineNumber":296,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-11"},{"lineNumber":297,"author":{"gitId":"ksw95"},"content":"            e.printErrMsg();","lastModifiedDate":"2021-11-11"},{"lineNumber":298,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-03"},{"lineNumber":299,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-03"},{"lineNumber":300,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"},{"lineNumber":301,"author":{"gitId":"ksw95"},"content":"    public static void parseFindInput(String input) {","lastModifiedDate":"2021-11-11"},{"lineNumber":302,"author":{"gitId":"ksw95"},"content":"        String[] parts \u003d input.split(\" \");","lastModifiedDate":"2021-11-10"},{"lineNumber":303,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-10"},{"lineNumber":304,"author":{"gitId":"ksw95"},"content":"            if (InputChecker.isValidFindInput(parts)) {","lastModifiedDate":"2021-11-11"},{"lineNumber":305,"author":{"gitId":"ksw95"},"content":"                TaskList.printTaskWithDesc(parts[1]);","lastModifiedDate":"2021-11-10"},{"lineNumber":306,"author":{"gitId":"ksw95"},"content":"            }","lastModifiedDate":"2021-11-10"},{"lineNumber":307,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-10"},{"lineNumber":308,"author":{"gitId":"ksw95"},"content":"            e.printErrMsg();","lastModifiedDate":"2021-11-10"},{"lineNumber":309,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-10"},{"lineNumber":310,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":311,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":312,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":313,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-03"}],"authorContributionMap":{"ksw95":313}},{"path":"src/test/java/Duke/Checker/FileLineCheckerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Checker;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import static Duke.Checker.FileLineChecker.*;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"public class FileLineCheckerTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"    public void checkTodoLineTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, isValidTodoLine(new String[]{\"T\", \"1\", \"Homework\", \"MEDIUM\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, isValidTodoLine(new String[]{\"\", \"\", \"\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    public void checkDeadlineLineTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"        assertEquals(true,","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"                isValidDeadlineLine(new String[]{\"D\", \"0\", \"Submit Project\", \"Sunday\", \"HIGH\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"        assertEquals(false,","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"                isValidDeadlineLine(new String[]{\"D\", \"3\", \"Do task\", \"Today\", \"LOW\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    public void checkEventLineTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        assertEquals(true,","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"                isValidEventLine(new String[]{\"E\", \"1\", \"Party\", \"Friend\u0027s house\", \"LOW\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        assertEquals(false,","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"                isValidEventLine(new String[]{\"E\", \"0\", \"\", \"Nowhere\", \"NIL\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"ksw95":30}},{"path":"src/test/java/Duke/Checker/InputCheckerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Checker;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.DukeException;","lastModifiedDate":"2021-11-11"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import static Duke.Checker.InputChecker.*;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"public class InputCheckerTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    public void checkValidTodoTest() throws DukeException {","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, isValidTodoInput(\"todo task 1\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidTodoInput(\"tod\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidTodoInput(\"todo    \"));","lastModifiedDate":"2021-11-11"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"    public void checkValidDeadlineTest() throws DukeException {","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, isValidDeadlineInput(\"deadline homework /by today\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidDeadlineInput(\"deadli\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidDeadlineInput(\"deadline return book /by\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidDeadlineInput(\"deadline /by tomorrow\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"    public void checkValidEventTest() throws DukeException {","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, isValidEventInput(\"event assembly /at school\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidEventInput(\"eve\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidEventInput(\"event birthday /at\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidEventInput(\"event /at home\"));","lastModifiedDate":"2021-11-11"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-10"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"    public void checkValidFindTest() throws DukeException {","lastModifiedDate":"2021-11-10"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, isValidFindInput(new String[]{\"find\",\"task\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidFindInput(new String[]{\"find\"}));","lastModifiedDate":"2021-11-11"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"        assertThrows(DukeException.class, () -\u003e isValidFindInput(new String[]{}));","lastModifiedDate":"2021-11-11"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"ksw95":42}},{"path":"src/test/java/Duke/Models/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"    Deadline Test1 \u003d new Deadline(\"Task 1\", \"tomorrow\");","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    Deadline Test2 \u003d new Deadline(\"Task 2\", LocalDate.parse(\"2010-10-19\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    Deadline Test3 \u003d new Deadline(\"Task 3\",","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"            LocalDate.parse(\"2012-01-20\"), LocalTime.parse(\"18:00\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    public void getAdditionalInfoTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"tomorrow\", Test1.getAdditionalInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"2010-10-19\", Test2.getAdditionalInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"2012-01-20 18:00\", Test3.getAdditionalInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    public void isCompletedTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test1.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test2.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test3.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"        Test1.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        Test3.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, Test1.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, Test3.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"    public void getTaskTypeTest(){","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"D\", Test1.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"D\", Test2.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"D\", Test3.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"    public void getCompletedSymbolTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][ ]\", Test1.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][ ]\", Test2.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][ ]\", Test3.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"        Test1.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"        Test2.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][X]\", Test1.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][X]\", Test2.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-10"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    public void setPriorityTest() {","lastModifiedDate":"2021-11-10"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"        Test1.setPriority(\"MEDIUM\");","lastModifiedDate":"2021-11-10"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"        Test2.setPriority(\"1\");","lastModifiedDate":"2021-11-10"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"        Test3.setPriority(\"abc\");","lastModifiedDate":"2021-11-10"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"MEDIUM\", Test1.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"LOW\", Test2.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"NIL\", Test3.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"    public void getTaskInfoTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][ ] Task 1 (by: tomorrow) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"                \"- with NIL priority\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"        Test1.setPriority(\"LOW\");","lastModifiedDate":"2021-11-10"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"        Test2.setPriority(\"3\");","lastModifiedDate":"2021-11-10"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"        Test3.setPriority(\"NIL\");","lastModifiedDate":"2021-11-10"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][ ] Task 1 (by: tomorrow) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"                \"- with LOW priority\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][ ] Task 2 (by: Oct 19 2010) \"","lastModifiedDate":"2021-11-10"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"                + \"- with HIGH priority\", Test2.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][ ] Task 3 (by: Jan 20 2012 18:00) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"                \"- with NIL priority\", Test3.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"        Test2.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[D][X] Task 2 (by: Oct 19 2010) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"                \"- with HIGH priority\", Test2.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"ksw95":79}},{"path":"src/test/java/Duke/Models/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"public class EventTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"    Event Test1 \u003d new Event(\"Task 1\", \"School\");","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    Event Test2 \u003d new Event(\"Task 2\", LocalDate.parse(\"2020-06-15\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    Event Test3 \u003d new Event(\"Task 3\",","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"            LocalDate.parse(\"2021-11-14\"), LocalTime.parse(\"23:59\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    public void getAdditionalInfoTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"School\", Test1.getAdditionalInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"2020-06-15\", Test2.getAdditionalInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"2021-11-14 23:59\", Test3.getAdditionalInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    public void isCompletedTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test1.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test2.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test3.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"        Test2.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        Test3.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, Test2.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, Test3.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"    public void getTaskTypeTest(){","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"E\", Test1.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"E\", Test2.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"E\", Test3.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"    public void getCompletedSymbolTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][ ]\", Test1.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][ ]\", Test2.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][ ]\", Test3.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"        Test1.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"        Test3.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][X]\", Test1.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][X]\", Test3.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-10"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"    public void setPriorityTest() {","lastModifiedDate":"2021-11-10"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"        Test1.setPriority(\"3\");","lastModifiedDate":"2021-11-10"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"        Test2.setPriority(\"1\");","lastModifiedDate":"2021-11-10"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"        Test3.setPriority(\"MEDIUM\");","lastModifiedDate":"2021-11-10"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"HIGH\", Test1.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"LOW\", Test2.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"MEDIUM\", Test3.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"    public void getTaskInfoTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][ ] Task 1 (at: School) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"                \"- with NIL priority\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"        Test1.setPriority(\"2\");","lastModifiedDate":"2021-11-10"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"        Test2.setPriority(\"testing\");","lastModifiedDate":"2021-11-10"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"        Test3.setPriority(\"HIGH\");","lastModifiedDate":"2021-11-10"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][ ] Task 1 (at: School) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"                \"- with MEDIUM priority\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][ ] Task 2 (at: Jun 15 2020) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"                \"- with NIL priority\", Test2.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][ ] Task 3 (at: Nov 14 2021 23:59) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"                \"- with HIGH priority\", Test3.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"        Test1.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[E][X] Task 1 (at: School) \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"                \"- with MEDIUM priority\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"ksw95":80}},{"path":"src/test/java/Duke/Models/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import Duke.DukeLogic.DukeException;","lastModifiedDate":"2021-11-11"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"public class TaskTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"    Task Test1 \u003d new Task(\"Task 1\");","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"    Task Test2 \u003d new Task(\"Task 2\");","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    public void getDescriptionTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"Task 1\", Test1.getDescription());","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"Task 2\", Test2.getDescription());","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"            Task Test3 \u003d new Task(\"Task 3\", \"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"            assertEquals(\"Task 3\", Test3.getDescription());","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Task creation failed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"    public void completedTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test1.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        assertEquals(false, Test2.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"        Test2.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"        assertEquals(true, Test2.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"            Task Test3 \u003d new Task(\"Task 3\", \"1\");","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"            assertEquals(true, Test3.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Task creation failed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"            Task Test4 \u003d new Task(\"Task 4\", \"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"            assertEquals(false, Test4.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"            Test4.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"            assertEquals(true, Test4.isCompleted());","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Task creation failed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"    public void getCompleteSymbolTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[ ]\", Test1.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[ ]\", Test2.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"        Test1.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[X]\", Test1.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"            Task Test3 \u003d new Task(\"Task 3\", \"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"            assertEquals(\"[ ]\", Test3.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"ksw95"},"content":"            Test3.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"ksw95"},"content":"            assertEquals(\"[X]\", Test3.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Task creation failed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"ksw95"},"content":"            Task Test4 \u003d new Task(\"Task 4\", \"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"ksw95"},"content":"            assertEquals(\"[ ]\", Test4.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Task creation failed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-10"},{"lineNumber":75,"author":{"gitId":"ksw95"},"content":"    public void setPriorityTest() {","lastModifiedDate":"2021-11-10"},{"lineNumber":76,"author":{"gitId":"ksw95"},"content":"        Test1.setPriority(\"1\");","lastModifiedDate":"2021-11-10"},{"lineNumber":77,"author":{"gitId":"ksw95"},"content":"        Test2.setPriority(\"123\");","lastModifiedDate":"2021-11-10"},{"lineNumber":78,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"LOW\", Test1.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":79,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"NIL\", Test2.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":80,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":81,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":82,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"ksw95"},"content":"    public void getTaskInfoTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[ ] Task 1\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[ ] Task 2\", Test2.getTaskInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"ksw95"},"content":"        Test2.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[X] Task 2\", Test2.getTaskInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"ksw95"},"content":"            Task Test3 \u003d new Task(\"Task 3\", \"0\");","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"ksw95"},"content":"            assertEquals(\"[ ] Task 3\", Test3.getTaskInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"ksw95"},"content":"            Test3.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"ksw95"},"content":"            assertEquals(\"[X] Task 3\", Test3.getTaskInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Task creation failed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"ksw95"},"content":"        try {","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"ksw95"},"content":"            Task Test4 \u003d new Task(\"Task 4\", \"1\");","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"ksw95"},"content":"            assertEquals(\"[X] Task 4\", Test4.getTaskInfo());","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"ksw95"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"ksw95"},"content":"            System.out.println(\"Task creation failed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"ksw95"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"ksw95":105}},{"path":"src/test/java/Duke/Models/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ksw95"},"content":"package Duke.Models;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"ksw95"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"ksw95"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"ksw95"},"content":"public class TodoTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"ksw95"},"content":"    Todo Test1 \u003d new Todo(\"Task 1\");","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"ksw95"},"content":"    Todo Test2 \u003d new Todo(\"Task 2\");","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"ksw95"},"content":"    Todo Test3 \u003d new Todo(\"Task 3\");","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"ksw95"},"content":"    public void getTaskTypeTest(){","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"T\", Test1.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"T\", Test2.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"T\", Test3.getTaskType());","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"ksw95"},"content":"    public void getCompletedSymbolTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][ ]\", Test1.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][ ]\", Test2.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][ ]\", Test3.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"ksw95"},"content":"        Test2.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"ksw95"},"content":"        Test3.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":26,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][X]\", Test2.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][X]\", Test3.getCompletedSymbol());","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-10"},{"lineNumber":31,"author":{"gitId":"ksw95"},"content":"    public void setPriorityTest() {","lastModifiedDate":"2021-11-10"},{"lineNumber":32,"author":{"gitId":"ksw95"},"content":"        Test1.setPriority(\"2\");","lastModifiedDate":"2021-11-10"},{"lineNumber":33,"author":{"gitId":"ksw95"},"content":"        Test2.setPriority(\"random\");","lastModifiedDate":"2021-11-10"},{"lineNumber":34,"author":{"gitId":"ksw95"},"content":"        Test3.setPriority(\"HIGH\");","lastModifiedDate":"2021-11-10"},{"lineNumber":35,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"MEDIUM\", Test1.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":36,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"NIL\", Test2.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":37,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"HIGH\", Test3.getPriority().toString());","lastModifiedDate":"2021-11-10"},{"lineNumber":38,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-10"},{"lineNumber":39,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":40,"author":{"gitId":"ksw95"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"ksw95"},"content":"    public void getTaskInfoTest() {","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][ ] Task 1 \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":43,"author":{"gitId":"ksw95"},"content":"                \"- with NIL priority\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":44,"author":{"gitId":"ksw95"},"content":"        Test1.setPriority(\"HIGH\");","lastModifiedDate":"2021-11-10"},{"lineNumber":45,"author":{"gitId":"ksw95"},"content":"        Test2.setPriority(\"0\");","lastModifiedDate":"2021-11-10"},{"lineNumber":46,"author":{"gitId":"ksw95"},"content":"        Test3.setPriority(\"LOW\");","lastModifiedDate":"2021-11-10"},{"lineNumber":47,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][ ] Task 1 \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":48,"author":{"gitId":"ksw95"},"content":"                \"- with HIGH priority\", Test1.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":49,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][ ] Task 2 \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":50,"author":{"gitId":"ksw95"},"content":"                \"- with NIL priority\", Test2.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":51,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][ ] Task 3 \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":52,"author":{"gitId":"ksw95"},"content":"                \"- with LOW priority\", Test3.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":53,"author":{"gitId":"ksw95"},"content":"","lastModifiedDate":"2021-11-10"},{"lineNumber":54,"author":{"gitId":"ksw95"},"content":"        Test3.markCompleted();","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"ksw95"},"content":"        Test3.setPriority(\"\");","lastModifiedDate":"2021-11-10"},{"lineNumber":56,"author":{"gitId":"ksw95"},"content":"        assertEquals(\"[T][X] Task 3 \" +","lastModifiedDate":"2021-11-10"},{"lineNumber":57,"author":{"gitId":"ksw95"},"content":"                \"- with NIL priority\", Test3.getTaskInfo());","lastModifiedDate":"2021-11-10"},{"lineNumber":58,"author":{"gitId":"ksw95"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"ksw95"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"ksw95":59}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ksw95"},"content":"java -classpath ..\\bin Duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-10-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ksw95":1,"-":20}}]
