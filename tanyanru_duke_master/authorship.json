[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"[[D][âœ˜] return book (by: 2nd of Dec, 18:00)]","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"tanyanru":1}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"import command.Command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import parser.Parser;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.TaskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    private Storage storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    private Ui ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"            ui.showLoadingError();","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"    public void run() {","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"        while (!isExit) {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"            try {","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"                ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"        ui.showGoodbye();","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-29"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-08-29"}],"authorContributionMap":{"tanyanru":41,"-":5}},{"path":"src/main/java/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.*;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":" * Adds a new Task to Task list.","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    String specifics;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"     * Constructor for AddCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"     * @param taskType type of command/task (e.g. deadline, event, find etc).","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"     * @param specifics includes the command/task name as well as the date and time specially for DEADLINE and EVENT.","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"    public AddCommand(FullCommand taskType, String specifics){","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"        super.type \u003d taskType;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"        this.specifics \u003d specifics;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"     * Checks if command is an ExitCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"     * @return false as command will be AddCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"    public boolean isExit(){","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"        return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"     * Adds task corresponding to command type and specifics to TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"     * @param tasks TaskList to add the task to.","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"     * @param ui Instance of user interface to print feedback to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"     * @param storage Updates data record of TaskList stored in storage.filepath.","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Creates new Deadline and Event, throws exception if not written in correct format.","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"        Task newTask;","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"        switch(type){","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"        case TODO:","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"            newTask \u003d new Todo(specifics);","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"            break;","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"        case DEADLINE:","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"            newTask \u003d new Deadline(specifics);","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"            break;","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"        default:","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"            newTask \u003d new Event(specifics);","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"            break;","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"        tasks.addTask(newTask);","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"tanyanru"},"content":"        ui.readTask(newTask, tasks.taskNum);","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"tanyanru"},"content":"        if (tasks.isFirst){","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"tanyanru"},"content":"            tasks.isFirst \u003d !tasks.isFirst;","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"tanyanru"},"content":"        } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"tanyanru"},"content":"            storage.writeToFile(System.lineSeparator());","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"tanyanru"},"content":"        storage.writeToFile(newTask.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"tanyanru"},"content":"    };","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":61}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.*;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":" * Abstract class for all other command classes to extend to (e.g. DeleteCommand, EditCommand, etc.), except FulLCommand enum.","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"public abstract class Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    FullCommand type;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"     * Checks to see if type equals FullCommand.BYE.","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"     * @return boolean value to check if this is an Exit command.","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"        return type.getActivityName().equals(\"bye\");","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"     * Carries out the command.","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"     * @param tasks Current TaskList object used in this instance of Duke.","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"     * @param ui Instance of user interface to print feedback to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"     * @param storage Updates data record of TaskList in storage.filepath if needed.","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Various subclass of Command may throw DukeException when executed with invalid specification.","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":30}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.Task;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import task.TaskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":" * Removes Task from Task List.","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"    int index;","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"     * Constructor for DeleteCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"     * @param index of the task to delete in the Task List.","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"    public DeleteCommand(int index){","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"        super.type \u003d FullCommand.DELETE;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"     * Checks if command is an ExitCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"     * @return false as command is a DeleteCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"        return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"     * Removes the current (index)th task from the task list.","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"     * @param tasks Current TaskList object used in this instance of Duke. Removes specified task from tasks.schedule.","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"     * @param ui Instance of user interface to print feedback to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"     * @param storage Updates data record of TaskList in storage.filepath.","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws when index equals to 0, or when index is larger than number of Task(s) in TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"            Task removeTask \u003d tasks.remove(index);","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"            ui.readDelete(removeTask, tasks.taskNum);","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"            storage.editFile(tasks);","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Index out of bounds.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Please enter the task number that you would like to delete.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":50}},{"path":"src/main/java/command/EditCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.Task;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import task.TaskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    int index;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"     * Checks if command is an ExitCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"     * @return false as command is an EditCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"        return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"     * Constructor for EditCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"     * @param index of Task in TaskList to mark as done.","lastModifiedDate":"2021-10-30"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"    public EditCommand(int index) {","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"        this.index \u003d index;","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"        super.type \u003d FullCommand.DONE;","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"     * Marks the (index)th task in TaskList as done.","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"     * @param tasks Current TaskList object used in this instance of Duke.","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"     * @param ui Instance of user interface to print feedback to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"     * @param storage Updates data record of TaskList in storage.filepath if needed.","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws when index equals to, or when index is larger than number of Task(s) in TaskList,","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"     *                       or when index of Task to markAsComplete is not properly presented.","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"            if (index \u003d\u003d -1){","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"                throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"            Task completedTask \u003d tasks.complete(index);","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"            ui.readDone(completedTask);","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"            storage.editFile(tasks);","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Index out of bounds.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Please enter the task number that you would like to delete.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":51}},{"path":"src/main/java/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.TaskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"     * Ends program.","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"        this.type \u003d FullCommand.BYE;","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"    /** Uses by Duke class method run to check for exit command and terminate program if exit command is found.","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"     * @return true as command is ExitCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"        return true;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"     * Closes FileWriter used by storage.","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"     * @param tasks current TaskList object used in this instance of Duke. Not needed here.","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     * @param ui Instance of user interface to print feedback to user. Not needed here.","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"     * @param storage closes FileWriter of storage. Changes to Task List are recorded in storage.filepath.","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException if invalid filepath (Directory tampered with when program is running).","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"        storage.closeWriter();","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"    };","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":34}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.Task;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import task.TaskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":" * Lists all tasks containing keyword.","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    String keyword;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"     * Constructor for FindCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"     * @param keyword Searches for all tasks with keyword.","lastModifiedDate":"2021-10-30"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"        super.type \u003d FullCommand.FIND;","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     * FindCommand is not a ExitCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"     * @return false.","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"        return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"     * Generates a TaskList shortlist containing only tasks with the keyword.","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"     * Passes TaskList as an argument for ui.showMatches to display to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"     * @param tasks TaskList containing all Tasks.","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"     * @param ui Instance of user interface to print feedback to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"     * @param storage Updates data record of TaskList in storage.filepath if needed.","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException","lastModifiedDate":"2021-10-30"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"        ArrayList\u003cTask\u003e shortlist \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"        for (Task task: tasks.getList()){","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"            if (task.findWord(keyword)){","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"                shortlist.add(task);","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"        ui.showMatches(new TaskList(shortlist));","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":51}},{"path":"src/main/java/command/FullCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":" * Enum detailing all the valid commands Duke understands.","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":" * Uses by Parser to generate Command Object.","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":" * Checks if user types invalid command.","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"public enum FullCommand {","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"    LIST(\"list\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    TODO (\"todo\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"    EVENT (\"event\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    DEADLINE (\"deadline\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    DONE (\"done\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    DELETE (\"delete\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"    BYE(\"bye\"),","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    FIND(\"find\");","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    private String activityName;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    FullCommand (String activityName) {","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"        this.activityName \u003d activityName;","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"    public String getActivityName() {","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"        return activityName;","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"     * Generates FullCommand based on String user input.","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"     * @param keyword Specifies the type of FullCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"     * @return Returns FullCommand to be parsed by parser.","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws when user enters invalid command.","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"    public static FullCommand getByAction (String keyword) throws DukeException","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"    {","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"        for (FullCommand activity : values()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"            if (activity.getActivityName().equals(keyword)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"                return activity;","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"        throw new DukeException(\"\\nCommand does not exist.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":45}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package command;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.TaskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":" * Displays the full list of recorded tasks to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    int index;","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"     * Constructor of ListCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"    public ListCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        super.type \u003d FullCommand.LIST;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"     * Checks if command is an ExitCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"     * @return ConstructorCommand is not ExitCommand.","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"        return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"     * Passes TaskList as an argument for ui.readList to display to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"     * @param tasks Current TaskList object used in this instance of Duke.","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"     * @param ui Instance of user interface to print feedback to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"     * @param storage Updates data record of TaskList in storage.filepath if needed.","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"            if (index \u003d\u003d -1) {","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"                throw new IndexOutOfBoundsException();","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"            ui.readList(tasks);","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Index out of bounds.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Please enter the task number that you would like to delete.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"    };","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":48}},{"path":"src/main/java/datetime/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package datetime;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-25"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import java.time.LocalTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":" * Wrapper of LocalDateTime.","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":" * Stores date and time for Task.","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"public class DateTime {","lastModifiedDate":"2021-10-25"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    private LocalTime endDateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    private String displayDateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"    private static DateTimeFormatter getTime \u003d DateTimeFormatter.ofPattern(\"HHmm\");","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    private static DateTimeFormatter getStartDateTime \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"     * Calls during construction of Deadline object.","lastModifiedDate":"2021-10-30"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"     * Reads substring from user input and gets date and time of task.","lastModifiedDate":"2021-10-30"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"     * @param dateTime Must be in the form (d/MM/yyyy HHmm)","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"     * @return DateTime object as dateTime parameter of Deadline object.","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws if dateTime is not presented in the correct form.","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"    public static DateTime setDeadline(String dateTime) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"            DateTime deadlineDateTime \u003d new DateTime();","lastModifiedDate":"2021-10-25"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"            deadlineDateTime.startDateTime \u003d LocalDateTime.parse(dateTime, getStartDateTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"            deadlineDateTime.displayDateTime \u003d deadlineDateTime.startDateTime.format(getStartDateTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"            return deadlineDateTime;","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Incorrect deadline datetime format. \\nPlease key in deadline (task) /by d/MM/yyyy HHmm\");","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"     * Calls during construction of Deadline object.","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"     * Reads substring from text file and gets date and time of the task.","lastModifiedDate":"2021-10-30"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"     * @param dateTime Must be in the form (d/MM/yyyy HHmm).","lastModifiedDate":"2021-10-30"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"     * @return DateTime object as dateTime parameter of Deadline object.","lastModifiedDate":"2021-10-30"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"    public static DateTime readDeadLine(String dateTime){","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"        DateTime deadlineDateTime \u003d new DateTime();","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"        deadlineDateTime.startDateTime \u003d LocalDateTime.parse(dateTime, getStartDateTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"        deadlineDateTime.displayDateTime \u003d deadlineDateTime.startDateTime.format(getStartDateTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"        return deadlineDateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"     * Calls during construction of Event object.","lastModifiedDate":"2021-10-30"},{"lineNumber":53,"author":{"gitId":"tanyanru"},"content":"     * Reads substring from user input and gets date, start time and end time of task.","lastModifiedDate":"2021-10-30"},{"lineNumber":54,"author":{"gitId":"tanyanru"},"content":"     * @param dateTime Must be in the form (d/MM/yyyy HHmm-HHmm).","lastModifiedDate":"2021-10-30"},{"lineNumber":55,"author":{"gitId":"tanyanru"},"content":"     * @return DateTime object as dateTime parameter of Event object.","lastModifiedDate":"2021-10-30"},{"lineNumber":56,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws if missing end time or if dateTime is not presented in the correct form.","lastModifiedDate":"2021-10-30"},{"lineNumber":57,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":58,"author":{"gitId":"tanyanru"},"content":"    public static DateTime setEventTime (String dateTime) throws DukeException {","lastModifiedDate":"2021-10-25"},{"lineNumber":59,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"tanyanru"},"content":"            DateTime eventDateTime \u003d new DateTime();","lastModifiedDate":"2021-10-25"},{"lineNumber":61,"author":{"gitId":"tanyanru"},"content":"            int divider \u003d dateTime.indexOf(\"-\");","lastModifiedDate":"2021-10-25"},{"lineNumber":62,"author":{"gitId":"tanyanru"},"content":"            if (divider \u003d\u003d -1 || (divider \u003d\u003d dateTime.length() - 1)) {","lastModifiedDate":"2021-10-25"},{"lineNumber":63,"author":{"gitId":"tanyanru"},"content":"                throw new DukeException(\"Please key in the end time.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"tanyanru"},"content":"            String end \u003d dateTime.substring(divider + 1, dateTime.length());","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"tanyanru"},"content":"            eventDateTime.startDateTime \u003d LocalDateTime.parse(dateTime.substring(0, divider), getStartDateTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"tanyanru"},"content":"            eventDateTime.endDateTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"tanyanru"},"content":"            eventDateTime.displayDateTime \u003d eventDateTime.startDateTime.format(getStartDateTime) + \"-\" + eventDateTime.endDateTime.format(getTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"tanyanru"},"content":"            return eventDateTime;","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"tanyanru"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Incorrect event format. \\n Please key in event (details) /at d/mm/yyyy (start time)HHmm-(end time)HHmm\");","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":74,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":75,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"tanyanru"},"content":"     * Calls during construction of Event object.","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"tanyanru"},"content":"     * Reads substring from text file and gets date, start time and end time of task.","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"tanyanru"},"content":"     * @param dateTime Must be in the form (d/M/yyyy HHmm-HHmm)","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"tanyanru"},"content":"     * @return DateTime object as dateTime parameter of Event object.","lastModifiedDate":"2021-10-30"},{"lineNumber":80,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws if missing end time. This should not happen unless text file was tampered with.","lastModifiedDate":"2021-10-30"},{"lineNumber":81,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":82,"author":{"gitId":"tanyanru"},"content":"    public static DateTime readEventTime (String dateTime) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"tanyanru"},"content":"        DateTime eventDateTime \u003d new DateTime();","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"tanyanru"},"content":"        int divider \u003d dateTime.indexOf(\"-\");","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"tanyanru"},"content":"        if (divider \u003d\u003d -1 || (divider \u003d\u003d dateTime.length() - 1) || dateTime.substring(divider + 1).replace(\" \", \"\").equals(\"\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Please key in the end time.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"tanyanru"},"content":"        String end \u003d dateTime.substring(divider + 1, dateTime.length());","lastModifiedDate":"2021-10-25"},{"lineNumber":89,"author":{"gitId":"tanyanru"},"content":"        eventDateTime.startDateTime \u003d LocalDateTime.parse(dateTime.substring(0,divider), getStartDateTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"tanyanru"},"content":"        eventDateTime.endDateTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));","lastModifiedDate":"2021-10-25"},{"lineNumber":91,"author":{"gitId":"tanyanru"},"content":"        eventDateTime.displayDateTime \u003d eventDateTime.startDateTime.format(getStartDateTime) + \"-\" + eventDateTime.endDateTime.format(getTime);","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"tanyanru"},"content":"        return eventDateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":93,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-25"},{"lineNumber":94,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":95,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":96,"author":{"gitId":"tanyanru"},"content":"     * Adds suffix to date of month","lastModifiedDate":"2021-10-30"},{"lineNumber":97,"author":{"gitId":"tanyanru"},"content":"     * @param dd day of month as a 2 digits number.","lastModifiedDate":"2021-10-30"},{"lineNumber":98,"author":{"gitId":"tanyanru"},"content":"     * @return 1 or 2 digits number with appropriate suffix.","lastModifiedDate":"2021-10-30"},{"lineNumber":99,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":100,"author":{"gitId":"tanyanru"},"content":"     private static String getDayOfMonth(String dd) {","lastModifiedDate":"2021-10-25"},{"lineNumber":101,"author":{"gitId":"tanyanru"},"content":"         if (dd.substring(0,1).equals(\"0\")) {","lastModifiedDate":"2021-10-25"},{"lineNumber":102,"author":{"gitId":"tanyanru"},"content":"             dd \u003d dd.substring(1,dd.length());","lastModifiedDate":"2021-10-25"},{"lineNumber":103,"author":{"gitId":"tanyanru"},"content":"         }","lastModifiedDate":"2021-10-25"},{"lineNumber":104,"author":{"gitId":"tanyanru"},"content":"         int day \u003d Integer.parseInt(dd);","lastModifiedDate":"2021-10-25"},{"lineNumber":105,"author":{"gitId":"tanyanru"},"content":"         if (day \u003e\u003d 11 \u0026\u0026 day \u003c\u003d 31) {","lastModifiedDate":"2021-10-25"},{"lineNumber":106,"author":{"gitId":"tanyanru"},"content":"             return day + \"th\";","lastModifiedDate":"2021-10-25"},{"lineNumber":107,"author":{"gitId":"tanyanru"},"content":"         }","lastModifiedDate":"2021-10-25"},{"lineNumber":108,"author":{"gitId":"tanyanru"},"content":"         switch (day \u0026 10) {","lastModifiedDate":"2021-10-25"},{"lineNumber":109,"author":{"gitId":"tanyanru"},"content":"         case 1:","lastModifiedDate":"2021-10-30"},{"lineNumber":110,"author":{"gitId":"tanyanru"},"content":"             return day + \"st\";","lastModifiedDate":"2021-10-30"},{"lineNumber":111,"author":{"gitId":"tanyanru"},"content":"         case 2:","lastModifiedDate":"2021-10-30"},{"lineNumber":112,"author":{"gitId":"tanyanru"},"content":"             return day + \"nd\";","lastModifiedDate":"2021-10-30"},{"lineNumber":113,"author":{"gitId":"tanyanru"},"content":"         case 3:","lastModifiedDate":"2021-10-30"},{"lineNumber":114,"author":{"gitId":"tanyanru"},"content":"             return day + \"rd\";","lastModifiedDate":"2021-10-30"},{"lineNumber":115,"author":{"gitId":"tanyanru"},"content":"         default:","lastModifiedDate":"2021-10-30"},{"lineNumber":116,"author":{"gitId":"tanyanru"},"content":"             return day + \"th\";","lastModifiedDate":"2021-10-30"},{"lineNumber":117,"author":{"gitId":"tanyanru"},"content":"         }","lastModifiedDate":"2021-10-25"},{"lineNumber":118,"author":{"gitId":"tanyanru"},"content":"     }","lastModifiedDate":"2021-10-25"},{"lineNumber":119,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-25"},{"lineNumber":120,"author":{"gitId":"tanyanru"},"content":"     public String toString() {","lastModifiedDate":"2021-10-25"},{"lineNumber":121,"author":{"gitId":"tanyanru"},"content":"         return displayDateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":122,"author":{"gitId":"tanyanru"},"content":"     }","lastModifiedDate":"2021-10-25"},{"lineNumber":123,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-25"}],"authorContributionMap":{"tanyanru":123}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package exception;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":" * Wraps exception. Helps to check if exception has been accounted for.","lastModifiedDate":"2021-10-30"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":" * Catches exception and throws DukeException.","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"public class DukeException extends Exception","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"{","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"    public DukeException(String message) {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"        super(message);","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    public DukeException(String message, Throwable cause) {","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"        super(message,cause);","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"tanyanru":15}},{"path":"src/main/java/filewriter/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package filewriter;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import datetime.DateTime;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.*;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"import java.io.File;","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":" * Class of storage.","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":" * Stores and reads from text file.","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"public class Storage {","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    String filePath;","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"    FileWriter fw;","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"    boolean isAppend \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"     * Constructor of Storage object.","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"     * @param filepath filepath to text file to be read from and edited.","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException When CreateWriter throws DukeException.","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"    public Storage(String filepath) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"        this.filePath \u003d filepath;","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"        this.createWriter();","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"     * Creates FileWriter member fw.","lastModifiedDate":"2021-10-30"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException when invalid filepath.","lastModifiedDate":"2021-10-30"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"    private void createWriter() throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"        try{","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"            fw \u003d new FileWriter(filePath, isAppend);","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"\\n Invalid filepath. Please check.  \\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"     * Wrapper to close FileWriter fw.","lastModifiedDate":"2021-10-30"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"     * Uses in Execute method of ExitCommand object.","lastModifiedDate":"2021-10-30"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException when invalid filepath.","lastModifiedDate":"2021-10-30"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"    public void closeWriter() throws DukeException{","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"            fw.close();","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"tanyanru"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"\\n Invalid filepath. Please check.  \\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":59,"author":{"gitId":"tanyanru"},"content":"     * Adds Task to TaskList data stored in txt file.","lastModifiedDate":"2021-10-30"},{"lineNumber":60,"author":{"gitId":"tanyanru"},"content":"     * Calls during execute method of addCommand object.","lastModifiedDate":"2021-10-30"},{"lineNumber":61,"author":{"gitId":"tanyanru"},"content":"     * @param textToAdd (Command Object).to String();","lastModifiedDate":"2021-10-30"},{"lineNumber":62,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws when IOException is caught.","lastModifiedDate":"2021-10-30"},{"lineNumber":63,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"tanyanru"},"content":"    public void writeToFile(String textToAdd) throws DukeException{","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":66,"author":{"gitId":"tanyanru"},"content":"            fw.write(textToAdd + \"\\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"tanyanru"},"content":"            //System.out.println(textToAdd);","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"tanyanru"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"\\n Please check. Error message: \" + e.getMessage() + \"\\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"tanyanru"},"content":"     * Rewrites data in txt file with editions made.","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"tanyanru"},"content":"     * Calls when Execute command of DeleteCommand or EditCommand object modifies TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"tanyanru"},"content":"     * @param schedule Modifies contents of TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws when IOException is caught.","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"tanyanru"},"content":"    public void editFile(TaskList schedule) throws DukeException{","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"tanyanru"},"content":"            checkAppend(false);","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"tanyanru"},"content":"            for (Task task: schedule.getList()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"tanyanru"},"content":"                fw.write(task.toString() + \"\\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"tanyanru"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"failed to write to file\");","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":91,"author":{"gitId":"tanyanru"},"content":"     * Toggles willAppend boolean, which determines if FileWriter fw will append to txt file or overwrite it.","lastModifiedDate":"2021-10-30"},{"lineNumber":92,"author":{"gitId":"tanyanru"},"content":"     * @param toAppend New boolean value of toAppend.","lastModifiedDate":"2021-10-30"},{"lineNumber":93,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws when createWriter throws DukeException.","lastModifiedDate":"2021-10-30"},{"lineNumber":94,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":95,"author":{"gitId":"tanyanru"},"content":"    private void checkAppend(boolean toAppend) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"tanyanru"},"content":"        closeWriter();","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"tanyanru"},"content":"        isAppend \u003d toAppend;","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"tanyanru"},"content":"        createWriter();","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":102,"author":{"gitId":"tanyanru"},"content":"     * Interprets each line in txt file and add corresponding Task to TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":103,"author":{"gitId":"tanyanru"},"content":"     * @param line every line in the txt file represents a task.","lastModifiedDate":"2021-10-30"},{"lineNumber":104,"author":{"gitId":"tanyanru"},"content":"     * @return Task object with type, task name, date and timing as described in String.","lastModifiedDate":"2021-10-30"},{"lineNumber":105,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException Throws when Task is not stored in the correct format in txt file.","lastModifiedDate":"2021-10-30"},{"lineNumber":106,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":107,"author":{"gitId":"tanyanru"},"content":"    private Task read(String line) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"tanyanru"},"content":"        Task output;","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"tanyanru"},"content":"        switch (line.charAt(line.indexOf(\"[\") + 1)) {","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"tanyanru"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"tanyanru"},"content":"            output \u003d new Todo(line.substring(7, line.length()));","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"tanyanru"},"content":"            return output;","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"tanyanru"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"tanyanru"},"content":"            try {","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"tanyanru"},"content":"                int divider \u003d line.indexOf(\"(by:\");","lastModifiedDate":"2021-10-28"},{"lineNumber":116,"author":{"gitId":"tanyanru"},"content":"                String input \u003d line.substring(7, divider);","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"tanyanru"},"content":"                input +\u003d \"/by \" + DateTime.readDeadLine(line.substring(divider + 5, line.length() - 1)).toString();","lastModifiedDate":"2021-10-28"},{"lineNumber":118,"author":{"gitId":"tanyanru"},"content":"                output \u003d new Deadline(input);","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"tanyanru"},"content":"                return output;","lastModifiedDate":"2021-10-28"},{"lineNumber":120,"author":{"gitId":"tanyanru"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"tanyanru"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"tanyanru"},"content":"                throw new DukeException(\"\\n Deadline task not stored properly. \\n \");","lastModifiedDate":"2021-10-28"},{"lineNumber":123,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":124,"author":{"gitId":"tanyanru"},"content":"        default:","lastModifiedDate":"2021-10-28"},{"lineNumber":125,"author":{"gitId":"tanyanru"},"content":"            try {","lastModifiedDate":"2021-10-28"},{"lineNumber":126,"author":{"gitId":"tanyanru"},"content":"                int divider \u003d line.indexOf(\"(at:\");","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"tanyanru"},"content":"                String input \u003d line.substring(7, divider);","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"tanyanru"},"content":"                input +\u003d \"/at \" + DateTime.readEventTime(line.substring(divider + 5, line.length() - 1)).toString();","lastModifiedDate":"2021-10-28"},{"lineNumber":129,"author":{"gitId":"tanyanru"},"content":"                output \u003d new Event(input);","lastModifiedDate":"2021-10-28"},{"lineNumber":130,"author":{"gitId":"tanyanru"},"content":"                return output;","lastModifiedDate":"2021-10-28"},{"lineNumber":131,"author":{"gitId":"tanyanru"},"content":"            } catch (Exception e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":132,"author":{"gitId":"tanyanru"},"content":"                throw new DukeException(\"\\n Event task not stored properly. \\n \");","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":136,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":138,"author":{"gitId":"tanyanru"},"content":"     * Reads txt file and updates TaskList accordingly.","lastModifiedDate":"2021-10-30"},{"lineNumber":139,"author":{"gitId":"tanyanru"},"content":"     * Calls read method line by line, and gets corresponding Task.","lastModifiedDate":"2021-10-30"},{"lineNumber":140,"author":{"gitId":"tanyanru"},"content":"     * Checks each line to check if Task should markAsDone.","lastModifiedDate":"2021-10-30"},{"lineNumber":141,"author":{"gitId":"tanyanru"},"content":"     * @return Storage object with updated ArrayList\u003cTask\u003e taskList used in construction of TaskList object.","lastModifiedDate":"2021-10-30"},{"lineNumber":142,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException when read throws DukeException.","lastModifiedDate":"2021-10-30"},{"lineNumber":143,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":144,"author":{"gitId":"tanyanru"},"content":"    public Storage load() throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":145,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":146,"author":{"gitId":"tanyanru"},"content":"            taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":147,"author":{"gitId":"tanyanru"},"content":"            File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2021-10-28"},{"lineNumber":148,"author":{"gitId":"tanyanru"},"content":"            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2021-10-28"},{"lineNumber":149,"author":{"gitId":"tanyanru"},"content":"            while (s.hasNextLine()) {","lastModifiedDate":"2021-10-28"},{"lineNumber":150,"author":{"gitId":"tanyanru"},"content":"                String line \u003d s.nextLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":151,"author":{"gitId":"tanyanru"},"content":"                if (! line.equals(\"\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":152,"author":{"gitId":"tanyanru"},"content":"                    Task newTask \u003d read(line.replace(\"\\n\", \"\"));","lastModifiedDate":"2021-10-28"},{"lineNumber":153,"author":{"gitId":"tanyanru"},"content":"                    if (line.substring(4,5).equals(\"\\u2713\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":154,"author":{"gitId":"tanyanru"},"content":"                        newTask.markAsDone();","lastModifiedDate":"2021-10-28"},{"lineNumber":155,"author":{"gitId":"tanyanru"},"content":"                    }","lastModifiedDate":"2021-10-28"},{"lineNumber":156,"author":{"gitId":"tanyanru"},"content":"                    taskList.add(newTask);","lastModifiedDate":"2021-10-28"},{"lineNumber":157,"author":{"gitId":"tanyanru"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":158,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":159,"author":{"gitId":"tanyanru"},"content":"            return this;","lastModifiedDate":"2021-10-28"},{"lineNumber":160,"author":{"gitId":"tanyanru"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":161,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"\\n File not found! \\n \");","lastModifiedDate":"2021-10-28"},{"lineNumber":162,"author":{"gitId":"tanyanru"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":163,"author":{"gitId":"tanyanru"},"content":"            throw new DukeException(\"Unforeseen load errors: \" + e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":164,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":165,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":166,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":167,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":168,"author":{"gitId":"tanyanru"},"content":"     * Calls during construction method of TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":169,"author":{"gitId":"tanyanru"},"content":"     * @return ArrayList of Task","lastModifiedDate":"2021-10-30"},{"lineNumber":170,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":171,"author":{"gitId":"tanyanru"},"content":"    public ArrayList\u003cTask\u003e getSchedule() {","lastModifiedDate":"2021-10-28"},{"lineNumber":172,"author":{"gitId":"tanyanru"},"content":"        return taskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":173,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":174,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":174}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package parser;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import command.*;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":" * Parses String user input/ text file to get corresponding Command object to execute.","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"public class Parser {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"     * Processes user input/ line from txt file and gets appropriate command.","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"     * @param instruction String from user input/ text file","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"     * @return Corresponding Task to be executed in run method of Duke class.","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException When there are no matching command. i.e. user input or line from txt file is invalid.","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    public static Command parse(String instruction) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"        String[] arr \u003d instruction.split(\" \", 2);","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        FullCommand command \u003d FullCommand.getByAction(arr[0]);","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"            switch (command) {","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"            case LIST:","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"                return new ListCommand();","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"            case BYE:","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"                return new ExitCommand();","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"            case DONE:","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"                return new EditCommand(Integer.parseInt(arr[1]) - 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"            case DELETE:","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"                return new DeleteCommand(Integer.parseInt(arr[1]) - 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"            case FIND:","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"                return new FindCommand(arr[1]);","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"            default:","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"                if (arr[1].equals(\"\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"                    throw new DukeException(\"\");","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"                }","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"                return new AddCommand(command, arr[1]);","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"    } catch (IndexOutOfBoundsException | DukeException e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"        throw new DukeException(\"Please provide commands in the format: (command type) (task details)\");","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":41}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import datetime.DateTime;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":" * Deadline task object. Has a task name, date and time.","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    DateTime dateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"        /**","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"         * Constructor for Deadline object. Calls when generating TaskList based on user input.","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"         * @param description Includes task name, date and time.","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"         * @throws DukeException Throws when description format is incorrect. or when setDeadline throws DukeException.","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"         */","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"        public Deadline(String description) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"            super(description);","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"            int divider \u003d description.indexOf(\"/by\");","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"            if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() -3)||description.substring(divider + 4).replace(\" \", \"\").equals(\"\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"                throw new DukeException(\"Incorrect deadline format. \\nPlease key in deadline (task) /by d/mm/yyyy HHmm\");","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"            dateTime \u003d DateTime.setDeadline(description.substring(divider + 4, description.length()));","lastModifiedDate":"2021-10-25"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"            super.taskDesc \u003d super.taskDesc.substring(0,divider);","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     * toString method of DeadLine","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"     * @return String denoting task name, status date and time of Deadline task.","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"    public String toString() {","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"        String output \u003d \"[D][\" + super.getStatus() + \"]\" + \" \" + super.taskDesc + \"(by: \" + dateTime.toString() + \")\";","lastModifiedDate":"2021-10-25"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"        return output;","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"tanyanru":35}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import datetime.DateTime;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":" * toString method of DeadLine.","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":" * @return String denoting task name, status date and time of Deadline task.","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"public class Event extends Task","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"{","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"        DateTime dateTime;","lastModifiedDate":"2021-10-25"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"        /**","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"         * Constructor for Event object. Calls when generating TaskList based on user input.","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"         * @param description Contains task name, date, starting time and ending time.","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"         * @throws DukeException Throws when description format is incorrect. or when setEventTime throws DukeException.","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"         */","lastModifiedDate":"2021-10-30"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        public Event(String description) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"                super(description);","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"                int divider \u003d description.indexOf(\"/at\");","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"                if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() - 3)||description.substring(divider + 4).replace(\" \", \"\").equals(\"\")) {","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"                        throw new DukeException(\"Incorrect event format. \\nPlease key in event (details) /at d/mm/yyyy (start time)HHmm-(end time)HHmm\");","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"                }","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"                dateTime \u003d DateTime.setEventTime(description.substring(divider + 4, description.length()));","lastModifiedDate":"2021-10-25"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"                super.taskDesc \u003d super.taskDesc.substring(0,divider);","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"        /**","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"         * toString method of Event.","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"         * @return String denoting task name, status, date, and starting and ending time of task.","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"         */","lastModifiedDate":"2021-10-30"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"        @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"        public String toString() {","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"                String output \u003d \"[E][\" + super.getStatus() + \"]\" + \" \" + super.taskDesc + \"(at: \" + dateTime.toString() + \")\";","lastModifiedDate":"2021-10-25"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"                return output;","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"tanyanru":37}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":" * Abstract class which all other Task classes extend (Event, deadline etc.).","lastModifiedDate":"2021-10-30"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"public abstract class Task","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"{","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"    protected String taskDesc;","lastModifiedDate":"2021-09-05"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-09-05"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    protected boolean deleted;","lastModifiedDate":"2021-10-07"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"     *Constructor method of Task.","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"     * @param taskDesc contains information of Task, includes task name and may include date and time.","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    public Task(String taskDesc) {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"        this.taskDesc \u003d taskDesc;","lastModifiedDate":"2021-09-05"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-05"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"        this.deleted \u003d false;","lastModifiedDate":"2021-10-07"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute method of findCommand is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"     * Checks to see if description of task contains keyword.","lastModifiedDate":"2021-10-30"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"     * @param keyword word/phrase to find in description.","lastModifiedDate":"2021-10-30"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"     * @return boolean value indicating if word/phrase can be found in description.","lastModifiedDate":"2021-10-30"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"    public boolean findWord(String keyword) {","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"        if (taskDesc.indexOf(keyword) \u003d\u003d -1){","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"            return false;","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"        } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"            return true;","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"     * Calls in toString method. Indicates status of completion of task.","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"     * @return tick if done, else cross.","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"    public String getStatus() {","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");","lastModifiedDate":"2021-09-05"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"     * sets isDone value to true.","lastModifiedDate":"2021-10-30"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-09-05"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-05"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-05"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"    public abstract String toString();","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-09-05"}],"authorContributionMap":{"tanyanru":52}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import filewriter.Storage;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.Task;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-10-07"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":" * Object containing data structure to store Tasks.","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"public class TaskList","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"{","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    ArrayList \u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e ();","lastModifiedDate":"2021-10-07"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    public int taskNum;","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    public boolean isFirst;","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-07"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"     * Constructor for Task List.","lastModifiedDate":"2021-10-30"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"     * Calls when generating Task List from txt file.","lastModifiedDate":"2021-10-30"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"     * @param storage Contains ArrayList of Task specified from txt file.","lastModifiedDate":"2021-10-30"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"            this.taskList \u003d storage.getSchedule();","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"            taskNum \u003d taskList.size();","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"            if (taskNum \u003d\u003d 0){","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"                isFirst \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"            } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"                isFirst \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"            }","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"     * Constructor for Task List.","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"    public TaskList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"        taskNum \u003d taskList.size();","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"        if (taskNum \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"            isFirst \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"        } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"            isFirst \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"     * Constructor for Task List.","lastModifiedDate":"2021-10-30"},{"lineNumber":53,"author":{"gitId":"tanyanru"},"content":"     * @param schedule ArrayList of tasks.","lastModifiedDate":"2021-10-30"},{"lineNumber":54,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":55,"author":{"gitId":"tanyanru"},"content":"    public TaskList(ArrayList\u003cTask\u003e schedule) {","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"tanyanru"},"content":"        this.taskList \u003d schedule;","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"tanyanru"},"content":"        taskNum \u003d taskList.size();","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"tanyanru"},"content":"        if (taskNum \u003d\u003d 0) {","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"tanyanru"},"content":"            isFirst \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"tanyanru"},"content":"        } else {","lastModifiedDate":"2021-10-28"},{"lineNumber":61,"author":{"gitId":"tanyanru"},"content":"            isFirst \u003d false;","lastModifiedDate":"2021-10-28"},{"lineNumber":62,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":63,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":64,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":65,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":66,"author":{"gitId":"tanyanru"},"content":"     * Gets Task corresponding to specified index.","lastModifiedDate":"2021-10-30"},{"lineNumber":67,"author":{"gitId":"tanyanru"},"content":"     * @param index Indicates which task in the task list to return.","lastModifiedDate":"2021-10-30"},{"lineNumber":68,"author":{"gitId":"tanyanru"},"content":"     * @return Task as specified by index.","lastModifiedDate":"2021-10-30"},{"lineNumber":69,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":70,"author":{"gitId":"tanyanru"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"tanyanru"},"content":"        return taskList.get(index);","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"tanyanru"},"content":"     * Marks a Task in task list as done.","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"tanyanru"},"content":"     * @param index Specifies which task to mark as done.","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"tanyanru"},"content":"     * @return completed Task.","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"tanyanru"},"content":"     * @throws NullPointerException","lastModifiedDate":"2021-10-30"},{"lineNumber":79,"author":{"gitId":"tanyanru"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2021-10-30"},{"lineNumber":80,"author":{"gitId":"tanyanru"},"content":"     * @throws NumberFormatException","lastModifiedDate":"2021-10-30"},{"lineNumber":81,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException","lastModifiedDate":"2021-10-30"},{"lineNumber":82,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":83,"author":{"gitId":"tanyanru"},"content":"    public Task complete(int index) throws NullPointerException, IndexOutOfBoundsException, NumberFormatException, DukeException {","lastModifiedDate":"2021-10-30"},{"lineNumber":84,"author":{"gitId":"tanyanru"},"content":"        Task completedTask \u003d taskList.get(index);","lastModifiedDate":"2021-10-28"},{"lineNumber":85,"author":{"gitId":"tanyanru"},"content":"        completedTask.markAsDone();","lastModifiedDate":"2021-10-28"},{"lineNumber":86,"author":{"gitId":"tanyanru"},"content":"        return completedTask;","lastModifiedDate":"2021-10-28"},{"lineNumber":87,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":88,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":89,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":90,"author":{"gitId":"tanyanru"},"content":"     * Adds new Task to TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":91,"author":{"gitId":"tanyanru"},"content":"     * @param task","lastModifiedDate":"2021-10-30"},{"lineNumber":92,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException","lastModifiedDate":"2021-10-30"},{"lineNumber":93,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":94,"author":{"gitId":"tanyanru"},"content":"    public void addTask(Task task) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"tanyanru"},"content":"        taskList.add(task);","lastModifiedDate":"2021-10-28"},{"lineNumber":96,"author":{"gitId":"tanyanru"},"content":"        taskNum++;","lastModifiedDate":"2021-10-28"},{"lineNumber":97,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":98,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":99,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":100,"author":{"gitId":"tanyanru"},"content":"     * Deletes Task from TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":101,"author":{"gitId":"tanyanru"},"content":"     * @param index","lastModifiedDate":"2021-10-30"},{"lineNumber":102,"author":{"gitId":"tanyanru"},"content":"     * @return deleted Task.","lastModifiedDate":"2021-10-30"},{"lineNumber":103,"author":{"gitId":"tanyanru"},"content":"     * @throws NullPointerException","lastModifiedDate":"2021-10-30"},{"lineNumber":104,"author":{"gitId":"tanyanru"},"content":"     * @throws IndexOutOfBoundsException","lastModifiedDate":"2021-10-30"},{"lineNumber":105,"author":{"gitId":"tanyanru"},"content":"     * @throws NumberFormatException","lastModifiedDate":"2021-10-30"},{"lineNumber":106,"author":{"gitId":"tanyanru"},"content":"     * @throws DukeException","lastModifiedDate":"2021-10-30"},{"lineNumber":107,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":108,"author":{"gitId":"tanyanru"},"content":"    public Task remove(int index) throws NullPointerException, IndexOutOfBoundsException, NumberFormatException, DukeException {","lastModifiedDate":"2021-10-30"},{"lineNumber":109,"author":{"gitId":"tanyanru"},"content":"        Task removeTask \u003d taskList.get(index);","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"tanyanru"},"content":"        taskList.remove(index);","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"tanyanru"},"content":"        taskNum--;","lastModifiedDate":"2021-10-28"},{"lineNumber":112,"author":{"gitId":"tanyanru"},"content":"        return removeTask;","lastModifiedDate":"2021-10-28"},{"lineNumber":113,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":114,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":115,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":116,"author":{"gitId":"tanyanru"},"content":"     * Retrieves ArrayList\u003cTask\u003e schedule from TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":117,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute method of FindCommand is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":118,"author":{"gitId":"tanyanru"},"content":"     * @return ArrayList\u003cTask\u003e","lastModifiedDate":"2021-10-30"},{"lineNumber":119,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":120,"author":{"gitId":"tanyanru"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"tanyanru"},"content":"        return taskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":122,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":123,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":124,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":125,"author":{"gitId":"tanyanru"},"content":"     * toString method of TaskList.","lastModifiedDate":"2021-10-30"},{"lineNumber":126,"author":{"gitId":"tanyanru"},"content":"     * @return contents of TaskList. i.e. tasks.","lastModifiedDate":"2021-10-30"},{"lineNumber":127,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":128,"author":{"gitId":"tanyanru"},"content":"    public String toString() {","lastModifiedDate":"2021-10-28"},{"lineNumber":129,"author":{"gitId":"tanyanru"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":130,"author":{"gitId":"tanyanru"},"content":"        for (int idx \u003d 0; idx \u003c taskNum; idx ++) {","lastModifiedDate":"2021-10-30"},{"lineNumber":131,"author":{"gitId":"tanyanru"},"content":"            Task task \u003d taskList.get(idx);","lastModifiedDate":"2021-10-28"},{"lineNumber":132,"author":{"gitId":"tanyanru"},"content":"            output +\u003d ((idx + 1) + \".\" + task.toString() + \"\\n\");","lastModifiedDate":"2021-10-28"},{"lineNumber":133,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":134,"author":{"gitId":"tanyanru"},"content":"        return output.substring(0, output.length() - 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":135,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":136,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"},{"lineNumber":137,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":138,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"tanyanru":138}},{"path":"src/main/java/task/TaskStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":" * Used for testing purposes.","lastModifiedDate":"2021-10-30"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"public class TaskStub extends Task{","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"    public TaskStub(String description) {","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"        super(description);","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"        super.isDone \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //tick if done, else cross","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"    public String toString() {","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"        return taskDesc;","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":23}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import task.Task;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":" * Extends Task. Has a task name.","lastModifiedDate":"2021-10-30"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"public class Todo extends Task","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"{","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"    public Todo(String description) throws DukeException {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"        super(description);","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"    public String toString() {","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"        String output \u003d \"[T][\" + super.getStatus()+ \"]\" + \" \" + super.taskDesc;","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        return output;","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"tanyanru":20}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import task.Task;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import task.TaskList;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"/**","lastModifiedDate":"2021-10-30"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":" * Determines what is displayed to user.","lastModifiedDate":"2021-10-30"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":" */","lastModifiedDate":"2021-10-30"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"public class Ui {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"    Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"     * Calls at the start of program.","lastModifiedDate":"2021-10-30"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"    public  void showWelcome() {","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        String logo \u003d \"____        _        \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Hello! I\u0027m \\n\" + logo + \"What can I do for you?\");","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute method of ExitCommand is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"    public void showGoodbye() {","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"     * Prints border.","lastModifiedDate":"2021-10-30"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"    public void showLine() {","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"        for (int n \u003d 0; n \u003c 80; n++) {","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"            output +\u003d \"_\";","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"        System.out.println(output);","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"     * Calls when a task is entered by user.","lastModifiedDate":"2021-10-30"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute of AddTask is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"     * @param newTask task entered.","lastModifiedDate":"2021-10-30"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"     * @param taskNum number of tasks in Task List.","lastModifiedDate":"2021-10-30"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":53,"author":{"gitId":"tanyanru"},"content":"    public void readTask(Task newTask, int taskNum) {","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"tanyanru"},"content":"        System.out.println(newTask.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Now you have \" + taskNum + \" tasks in the list.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":60,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":61,"author":{"gitId":"tanyanru"},"content":"     * Displays delete message.","lastModifiedDate":"2021-10-30"},{"lineNumber":62,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute of DeleteCommand is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":63,"author":{"gitId":"tanyanru"},"content":"     * @param removeTask","lastModifiedDate":"2021-10-30"},{"lineNumber":64,"author":{"gitId":"tanyanru"},"content":"     * @param taskNum","lastModifiedDate":"2021-10-30"},{"lineNumber":65,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":66,"author":{"gitId":"tanyanru"},"content":"    public void readDelete(Task removeTask, int taskNum) {","lastModifiedDate":"2021-10-28"},{"lineNumber":67,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2021-10-28"},{"lineNumber":68,"author":{"gitId":"tanyanru"},"content":"        System.out.println(removeTask.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":69,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Now you have \" + taskNum + \" tasks in the list.\");","lastModifiedDate":"2021-10-28"},{"lineNumber":70,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":71,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":72,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":73,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":74,"author":{"gitId":"tanyanru"},"content":"     * Displays message when a user finishes a task.","lastModifiedDate":"2021-10-30"},{"lineNumber":75,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute of EditCommand is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":76,"author":{"gitId":"tanyanru"},"content":"     * @param completed_Task Task which has been marked as done.","lastModifiedDate":"2021-10-30"},{"lineNumber":77,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":78,"author":{"gitId":"tanyanru"},"content":"    public void readDone(Task completed_Task){","lastModifiedDate":"2021-10-28"},{"lineNumber":79,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-10-28"},{"lineNumber":80,"author":{"gitId":"tanyanru"},"content":"        System.out.println(completed_Task.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":81,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":82,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":83,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":84,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":85,"author":{"gitId":"tanyanru"},"content":"     * Displays contents of Task List.","lastModifiedDate":"2021-10-30"},{"lineNumber":86,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute of ListCommand is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":87,"author":{"gitId":"tanyanru"},"content":"     * @param tasks TaskList","lastModifiedDate":"2021-10-30"},{"lineNumber":88,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":89,"author":{"gitId":"tanyanru"},"content":"    public void readList(TaskList tasks){","lastModifiedDate":"2021-10-28"},{"lineNumber":90,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Here are the tasks in your list: \");","lastModifiedDate":"2021-10-28"},{"lineNumber":91,"author":{"gitId":"tanyanru"},"content":"        System.out.println(tasks);","lastModifiedDate":"2021-10-28"},{"lineNumber":92,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":93,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":94,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":95,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":96,"author":{"gitId":"tanyanru"},"content":"     * Reads user input.","lastModifiedDate":"2021-10-30"},{"lineNumber":97,"author":{"gitId":"tanyanru"},"content":"     * @return String to be parsed by parser.","lastModifiedDate":"2021-10-30"},{"lineNumber":98,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":99,"author":{"gitId":"tanyanru"},"content":"    public String readCommand() {","lastModifiedDate":"2021-10-28"},{"lineNumber":100,"author":{"gitId":"tanyanru"},"content":"        return sc.nextLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":101,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":102,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":103,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":104,"author":{"gitId":"tanyanru"},"content":"     * Displays message when DukeException is caught.","lastModifiedDate":"2021-10-30"},{"lineNumber":105,"author":{"gitId":"tanyanru"},"content":"     * @param error_msg DukeException e.getMessage()","lastModifiedDate":"2021-10-30"},{"lineNumber":106,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":107,"author":{"gitId":"tanyanru"},"content":"    public void showError(String error_msg) {","lastModifiedDate":"2021-10-28"},{"lineNumber":108,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Your error message: \" + error_msg);","lastModifiedDate":"2021-10-28"},{"lineNumber":109,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":110,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":111,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-30"},{"lineNumber":112,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":113,"author":{"gitId":"tanyanru"},"content":"     * Calls when Duke Exception is thrown when instantiating Task List and/ or Storage Objects.","lastModifiedDate":"2021-10-30"},{"lineNumber":114,"author":{"gitId":"tanyanru"},"content":"     * Calls by run method in Duke class.","lastModifiedDate":"2021-10-30"},{"lineNumber":115,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":116,"author":{"gitId":"tanyanru"},"content":"    public void showLoadingError() {","lastModifiedDate":"2021-10-28"},{"lineNumber":117,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Loading Error!\");","lastModifiedDate":"2021-10-28"},{"lineNumber":118,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":119,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":120,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":121,"author":{"gitId":"tanyanru"},"content":"    /**","lastModifiedDate":"2021-10-30"},{"lineNumber":122,"author":{"gitId":"tanyanru"},"content":"     * Displays matching Tasks.","lastModifiedDate":"2021-10-30"},{"lineNumber":123,"author":{"gitId":"tanyanru"},"content":"     * Calls when execute method of FindCommand is called.","lastModifiedDate":"2021-10-30"},{"lineNumber":124,"author":{"gitId":"tanyanru"},"content":"     * @param tasks TaskList of tasks with keyword.","lastModifiedDate":"2021-10-30"},{"lineNumber":125,"author":{"gitId":"tanyanru"},"content":"     */","lastModifiedDate":"2021-10-30"},{"lineNumber":126,"author":{"gitId":"tanyanru"},"content":"    public void showMatches(TaskList tasks) {","lastModifiedDate":"2021-10-28"},{"lineNumber":127,"author":{"gitId":"tanyanru"},"content":"        System.out.println(\"Here are the matching task(s) in your list: \");","lastModifiedDate":"2021-10-28"},{"lineNumber":128,"author":{"gitId":"tanyanru"},"content":"        System.out.println(tasks);","lastModifiedDate":"2021-10-28"},{"lineNumber":129,"author":{"gitId":"tanyanru"},"content":"        showLine();","lastModifiedDate":"2021-10-28"},{"lineNumber":130,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":131,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":131}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"public class DukeTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"    public void dummyTest() {","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":9}},{"path":"src/test/java/datetime/DateTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package datetime;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"public class DateTimeTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    public void setDeadLine_incorrectFormat_exceptionThrown(){","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"            DateTime.setDeadline(\"10.02.2021 15:00\");","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"            fail();","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"        } catch (DukeException e){","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"            assertEquals(\"Incorrect deadline datetime format. \\nPlease key in deadline (task) /by d/mm/yyyy HHmm\", e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"    public void readDeadLineTest(){","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"        DateTime deadline \u003d DateTime.readDeadLine(\"30/11/2019 0500\");","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"        assertEquals(\"30/11/2019 0500\", deadline.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"    public void setEventTime_noEndTime_exceptionThrown(){","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"            DateTime.setEventTime(\"05/11/2021 0500-\");","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"            fail();","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"        } catch (DukeException e){","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"            assertEquals(\"Please key in the end time.\", e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"    public void setEventTime_incorrectFormat_exceptionThrown(){","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"            DateTime.setEventTime(\"15.11.2021 05:00-05:30\");","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"            fail();","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"        } catch (DukeException e){","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"            assertEquals(\"Incorrect event format. \\n Please key in event (details) /at d/mm/yyyy (start time)HHmm-(end time)HHmm\", e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"    public void readEventTimeTest(){","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"            DateTime eventTime \u003d DateTime.readEventTime(\"17/11/2019 0500-0600\");","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"            assertEquals(\"17/11/2019 0500-0600\", eventTime.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"        } catch (DukeException e){","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"            fail();","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"    public void readEventTime_noEndTime_exceptionThrown(){","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"        try {","lastModifiedDate":"2021-10-28"},{"lineNumber":53,"author":{"gitId":"tanyanru"},"content":"            DateTime eventTime \u003d DateTime.readEventTime(\"30/11/2021 0500-\");","lastModifiedDate":"2021-10-28"},{"lineNumber":54,"author":{"gitId":"tanyanru"},"content":"            fail();","lastModifiedDate":"2021-10-28"},{"lineNumber":55,"author":{"gitId":"tanyanru"},"content":"        } catch (DukeException e){","lastModifiedDate":"2021-10-28"},{"lineNumber":56,"author":{"gitId":"tanyanru"},"content":"            assertEquals(\"Please key in the end time.\", e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":57,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":58,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":59,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":59}},{"path":"src/test/java/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"public class DeadlineTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    void constructor_noDate_exceptionThrown(){","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"        try{","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"            Deadline deadline \u003d new Deadline(\"Generate Exception /by\");","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"            fail();","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        }catch (DukeException e){","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"            String expectedOutput \u003d \"Incorrect deadline format. \\nPlease key in deadline (task) /by d/mm/yyyy HHmm\";","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"            assertEquals(expectedOutput, e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":23}},{"path":"src/test/java/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package task;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import exception.DukeException;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"public class EventTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"    void constructor_noDate_exceptionThrown(){","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"        try{","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"            Event event \u003d new Event(\"Generate Exception /at\");","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"            fail();","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"        }catch (DukeException e){","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"            String expectedOutput \u003d \"Incorrect event format. \\nPlease key in event (details) /at d/mm/yyyy (start time)HHmm-(end time)HHmm\";","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"            assertEquals(expectedOutput, e.getMessage());","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"        }","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":19}},{"path":"src/test/java/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"package ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-10-28"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"import task.Task;","lastModifiedDate":"2021-10-28"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"import task.TaskStub;","lastModifiedDate":"2021-10-28"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"import ui.Ui;","lastModifiedDate":"2021-10-28"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2021-10-28"},{"lineNumber":9,"author":{"gitId":"tanyanru"},"content":"import java.io.PrintStream;","lastModifiedDate":"2021-10-28"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":11,"author":{"gitId":"tanyanru"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-10-28"},{"lineNumber":12,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-28"},{"lineNumber":13,"author":{"gitId":"tanyanru"},"content":"public class UiTest {","lastModifiedDate":"2021-10-28"},{"lineNumber":14,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":15,"author":{"gitId":"tanyanru"},"content":"    public void readTaskTest(){","lastModifiedDate":"2021-10-28"},{"lineNumber":16,"author":{"gitId":"tanyanru"},"content":"        Task test \u003d new TaskStub(\"Task Message\");","lastModifiedDate":"2021-10-28"},{"lineNumber":17,"author":{"gitId":"tanyanru"},"content":"        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-10-28"},{"lineNumber":18,"author":{"gitId":"tanyanru"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2021-10-28"},{"lineNumber":19,"author":{"gitId":"tanyanru"},"content":"        new Ui().readTask(test, 1);","lastModifiedDate":"2021-10-28"},{"lineNumber":20,"author":{"gitId":"tanyanru"},"content":"        String expectedMessage \u003d \"Got it. I\u0027ve added this task:\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":21,"author":{"gitId":"tanyanru"},"content":"                + \"Task Message\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"                + \"Now you have 1 tasks in the list.\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"                + \"________________________________________________________________________________\"","lastModifiedDate":"2021-10-28"},{"lineNumber":24,"author":{"gitId":"tanyanru"},"content":"                + System.lineSeparator();","lastModifiedDate":"2021-10-28"},{"lineNumber":25,"author":{"gitId":"tanyanru"},"content":"        assertEquals(expectedMessage, outContent.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":26,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":27,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":28,"author":{"gitId":"tanyanru"},"content":"    public void readDeleteTest(){","lastModifiedDate":"2021-10-28"},{"lineNumber":29,"author":{"gitId":"tanyanru"},"content":"        Task test \u003d new TaskStub(\"Task Message\");","lastModifiedDate":"2021-10-28"},{"lineNumber":30,"author":{"gitId":"tanyanru"},"content":"        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-10-28"},{"lineNumber":31,"author":{"gitId":"tanyanru"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2021-10-28"},{"lineNumber":32,"author":{"gitId":"tanyanru"},"content":"        new Ui().readDelete(test, 0);","lastModifiedDate":"2021-10-28"},{"lineNumber":33,"author":{"gitId":"tanyanru"},"content":"        String expectedMessage \u003d \"Noted. I\u0027ve removed this task:\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":34,"author":{"gitId":"tanyanru"},"content":"                + \"Task Message\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":35,"author":{"gitId":"tanyanru"},"content":"                + \"Now you have 0 tasks in the list.\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":36,"author":{"gitId":"tanyanru"},"content":"                + \"________________________________________________________________________________\"","lastModifiedDate":"2021-10-28"},{"lineNumber":37,"author":{"gitId":"tanyanru"},"content":"                + System.lineSeparator();","lastModifiedDate":"2021-10-28"},{"lineNumber":38,"author":{"gitId":"tanyanru"},"content":"        assertEquals(expectedMessage, outContent.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":39,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":40,"author":{"gitId":"tanyanru"},"content":"    @Test","lastModifiedDate":"2021-10-28"},{"lineNumber":41,"author":{"gitId":"tanyanru"},"content":"    public void readDone(){","lastModifiedDate":"2021-10-28"},{"lineNumber":42,"author":{"gitId":"tanyanru"},"content":"        Task test \u003d new TaskStub(\"Completed Task Message\");","lastModifiedDate":"2021-10-28"},{"lineNumber":43,"author":{"gitId":"tanyanru"},"content":"        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2021-10-28"},{"lineNumber":44,"author":{"gitId":"tanyanru"},"content":"        System.setOut(new PrintStream(outContent));","lastModifiedDate":"2021-10-28"},{"lineNumber":45,"author":{"gitId":"tanyanru"},"content":"        new Ui().readDone(test);","lastModifiedDate":"2021-10-28"},{"lineNumber":46,"author":{"gitId":"tanyanru"},"content":"        String expectedMessage \u003d \"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":47,"author":{"gitId":"tanyanru"},"content":"                + \"Completed Task Message\" + System.lineSeparator()","lastModifiedDate":"2021-10-28"},{"lineNumber":48,"author":{"gitId":"tanyanru"},"content":"                + \"________________________________________________________________________________\"","lastModifiedDate":"2021-10-28"},{"lineNumber":49,"author":{"gitId":"tanyanru"},"content":"                + System.lineSeparator();","lastModifiedDate":"2021-10-28"},{"lineNumber":50,"author":{"gitId":"tanyanru"},"content":"        assertEquals(expectedMessage, outContent.toString());","lastModifiedDate":"2021-10-28"},{"lineNumber":51,"author":{"gitId":"tanyanru"},"content":"    }","lastModifiedDate":"2021-10-28"},{"lineNumber":52,"author":{"gitId":"tanyanru"},"content":"}","lastModifiedDate":"2021-10-28"}],"authorContributionMap":{"tanyanru":52}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanyanru"},"content":"todo borrow book","lastModifiedDate":"2021-10-12"},{"lineNumber":2,"author":{"gitId":"tanyanru"},"content":"list","lastModifiedDate":"2021-10-12"},{"lineNumber":3,"author":{"gitId":"tanyanru"},"content":"deadline return book /by Sunday","lastModifiedDate":"2021-10-12"},{"lineNumber":4,"author":{"gitId":"tanyanru"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2021-10-12"},{"lineNumber":5,"author":{"gitId":"tanyanru"},"content":"done 2","lastModifiedDate":"2021-10-12"},{"lineNumber":6,"author":{"gitId":"tanyanru"},"content":"todo return book","lastModifiedDate":"2021-10-12"},{"lineNumber":7,"author":{"gitId":"tanyanru"},"content":"list","lastModifiedDate":"2021-10-12"},{"lineNumber":8,"author":{"gitId":"tanyanru"},"content":"bye","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"tanyanru":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"tanyanru"},"content":"javac  -cp ..\\src\\main\\java -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2021-10-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"tanyanru"},"content":"","lastModifiedDate":"2021-10-12"},{"lineNumber":23,"author":{"gitId":"tanyanru"},"content":"PAUSE","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"tanyanru":3,"-":20}}]
