[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"Kcube33"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2021-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"4. Duke is released under an MIT license.","lastModifiedDate":"2021-10-12"},{"lineNumber":27,"author":{"gitId":"Kcube33"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"4. Duke is part of https://se-education.org","lastModifiedDate":"2021-10-12"},{"lineNumber":29,"author":{"gitId":"Kcube33"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e origin/add-details-to-readme","lastModifiedDate":"2021-10-12"}],"authorContributionMap":{"Kcube33":3,"-":26}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"Kcube33"},"content":"    mainClassName \u003d \".Duke\"","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"Kcube33"},"content":"    //Modify this","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Kcube33":2,"-":45}},{"path":"src/Test/Java/duke/ParserTestDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"import duke.Parser;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"class ParserTestDateTime {","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"    void parseDateTime() {","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"        LocalDateTime date3 \u003d LocalDateTime.parse(\"2021-11-14 23:59\",formatter);","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"        String a \u003d \"2021-11-14 23:59\";","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"        assertEquals(date3, Parser.parseDateTime(a));","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Kcube33":20}},{"path":"src/Test/Java/duke/tasks/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke.tasks;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"class DeadlineTest {","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"    @Test","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"    void getBy() {","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"        LocalDateTime date1 \u003d LocalDateTime.parse(\"2021-11-14 23:59\",formatter);","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"        Deadline t \u003d new Deadline(\"To do testing\", date1);","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"        assertEquals(\"SUNDAY 2021-11-14 11:59 PM\", t.getBy());","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Kcube33":19}},{"path":"src/main/java/duke/ChatBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"public class ChatBot {","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"    private static ArrayList\u003cTaskList\u003e all_tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"    /** Prints out all tasks stored in the arraylist row by row","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"     * Utilises the method printtask from each individual task in the arraylist","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"     * @see TaskList#printtask()  Method to generate output for each different task","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"     * */","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"    public static void printem(){","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"        if(all_tasks.isEmpty()){","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Nothing to do\");","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Kcube33"},"content":"        } else {","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Kcube33"},"content":"            for (int i \u003d 0; i \u003c all_tasks.size(); i++) {","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Kcube33"},"content":"                System.out.println(i+1 + \". \" + all_tasks.get(i).printtask());","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Kcube33"},"content":"            }","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"Kcube33"},"content":"     * Main method of Duke","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"Kcube33"},"content":"     * This method intakes the input from the user and determines if it is valid command for Duke. It","lastModifiedDate":"2021-11-08"},{"lineNumber":31,"author":{"gitId":"Kcube33"},"content":"     * only parses the first word of the input to avoid confusion.","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"Kcube33"},"content":"     * When a valid input is detected, Duke will proceed to perform the function accordingly","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"Kcube33"},"content":"     * At the end of every command, outstanding tasks will be saved to the hard disk","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"Kcube33"},"content":"     * @param storage The list of tasks retrieved from the saved text file of outstanding tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"Kcube33"},"content":"     * @see Parser This class performs the various intake of user inputs","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"Kcube33"},"content":"     * @see CreateTasks Class responsible to execute the creation and deletion of tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"Kcube33"},"content":"     * @see WriteToFile#startWriting(ArrayList) Takes the existing ArrayList and writes to file","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"Kcube33"},"content":"    public ChatBot(ArrayList\u003cTaskList\u003e storage){","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Kcube33"},"content":"        all_tasks \u003d storage;","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Kcube33"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Kcube33"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"Kcube33"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"Kcube33"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"Kcube33"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"Kcube33"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"Kcube33"},"content":"        String userIn;","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Kcube33"},"content":"        String first;","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"Kcube33"},"content":"        // create enum for list of accepted words","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"Kcube33"},"content":"        do {","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"Kcube33"},"content":"            userIn \u003d Parser.UIinput();","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Kcube33"},"content":"            first \u003d Parser.FirstWord(userIn);","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Kcube33"},"content":"            switch (first) {","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Kcube33"},"content":"                case \"list\":","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"Kcube33"},"content":"                    printem();","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"Kcube33"},"content":"                case \"\":","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"Kcube33"},"content":"                    System.out.println(\"Please enter something\");","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"Kcube33"},"content":"                case \"done\":","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"Kcube33"},"content":"                    System.out.println(\"Which task number have u completed?\");","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"Kcube33"},"content":"                    printem();","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"Kcube33"},"content":"                    //add in exception","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"Kcube33"},"content":"                    Integer taskno \u003d Integer.parseInt(Parser.UIinput()) -1;","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"Kcube33"},"content":"                    all_tasks.get(taskno).done();","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"Kcube33"},"content":"                case \"delete\":","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"Kcube33"},"content":"                    System.out.println(\"Which task number do you want to delete?\");","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"Kcube33"},"content":"                    printem();","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"Kcube33"},"content":"                    // add in exception","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"Kcube33"},"content":"                    Integer task \u003d Integer.parseInt(Parser.UIinput());","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Kcube33"},"content":"                    CreateTasks.delete(all_tasks, task);","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"Kcube33"},"content":"                case \"todo\":","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"Kcube33"},"content":"                    CreateTasks.Todo(all_tasks, userIn);","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"Kcube33"},"content":"                case \"deadline\":","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"Kcube33"},"content":"                    System.out.println(\"Please enter deadline of task in \\\"yyyy-MM-dd HH:mm\\\"\");","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"Kcube33"},"content":"                    String by \u003d Parser.UIinput();","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"Kcube33"},"content":"                    CreateTasks.Deadline(all_tasks,userIn, by);","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"Kcube33"},"content":"                case \"event\":","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"Kcube33"},"content":"                    System.out.println(\"Please enter event date and time in \\\"yyyy-MM-dd HH:mm\\\"\");","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"Kcube33"},"content":"                    String at \u003d Parser.UIinput();","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"Kcube33"},"content":"                    System.out.println(\"Please enter estimated end time and date in \\\"yyyy-MM-dd HH:mm\\\"\");","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"Kcube33"},"content":"                    String end \u003d Parser.UIinput();","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"Kcube33"},"content":"                    CreateTasks.Event(all_tasks,userIn, at, end);","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"Kcube33"},"content":"                case \"bye\":","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"Kcube33"},"content":"                default:","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"Kcube33"},"content":"                    System.out.println(","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"Kcube33"},"content":"                            \"____________________________________________________________\\n\" +","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"Kcube33"},"content":"                            \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\" +","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"Kcube33"},"content":"                            \"____________________________________________________________\");","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"Kcube33"},"content":"                    break;","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"Kcube33"},"content":"            }","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"Kcube33"},"content":"            WriteToFile.startWriting(all_tasks);","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"Kcube33"},"content":"        } while (!\"bye\".equals(first));","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"Kcube33"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":102}},{"path":"src/main/java/duke/CreateTasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"import duke.exception.timelineException;","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":" * Handles the creation of different tasks and adding to the ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":" * Also handles the deletion of tasks from the ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"public class CreateTasks {","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"    private static String task;","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"    private static String by;","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"     * Creates a todo task and adds it the ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"Kcube33"},"content":"     * @param text User input of the task description","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Kcube33"},"content":"     * @see Parser","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"Kcube33"},"content":"    public static void Todo(ArrayList\u003cTaskList\u003e all_tasks, String text){","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Kcube33"},"content":"        try{","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Kcube33"},"content":"            all_tasks.add(new Todo(Parser.parseTodo(text)));","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Kcube33"},"content":"            System.out.println(all_tasks.get(all_tasks.size()-1).printtask());","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Now you have \" + all_tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"Kcube33"},"content":"        } catch (IndexOutOfBoundsException e){","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":41,"author":{"gitId":"Kcube33"},"content":"     * Creates a deadline task and adds it to ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":42,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"Kcube33"},"content":"     * @param text User input of the task description","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"Kcube33"},"content":"     * @param by User input for which the task is to be completed by","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"Kcube33"},"content":"    public static void Deadline(ArrayList\u003cTaskList\u003e all_tasks, String text, String by){","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"Kcube33"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Kcube33"},"content":"            all_tasks.add(new Deadline(Parser.parseDeadline(text),","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"Kcube33"},"content":"                    Parser.parseDateTime(by)));","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"Kcube33"},"content":"//            all_tasks.add(new Deadline(text.substring(9, text.indexOf(\u0027/\u0027)),","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"Kcube33"},"content":"//                    text.substring(text.indexOf(\u0027/\u0027) + 4)));","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Kcube33"},"content":"            System.out.println(all_tasks.get(all_tasks.size()-1).printtask());","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Now you have \" + all_tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"Kcube33"},"content":"        } catch (IndexOutOfBoundsException e){","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"☹ OOPS!!! The description of a deadline is incomplete.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"Kcube33"},"content":"        } catch (DateTimeParseException pe){","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Please try again in format: yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"Kcube33"},"content":"     * Creates an Event task and adds it to ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"Kcube33"},"content":"     * @param text User input of the task description","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"Kcube33"},"content":"     * @param at User input of when the task is supposed to take place","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"Kcube33"},"content":"     * @param end User input of when the task is supposed to end","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"Kcube33"},"content":"    public static void Event(ArrayList\u003cTaskList\u003e all_tasks, String text, String at, String end){","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"Kcube33"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"Kcube33"},"content":"            all_tasks.add(new Events(Parser.parseEvent(text),","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"Kcube33"},"content":"                    Parser.parseDateTime(at),Parser.parseDateTime(end)));","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"Kcube33"},"content":"            System.out.println(all_tasks.get(all_tasks.size()-1).printtask());","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Now you have \" + all_tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"Kcube33"},"content":"        } catch (IndexOutOfBoundsException e){","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"☹ OOPS!!! The description of a event is incomplete.\");","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"----------------------------------------------------\");","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"Kcube33"},"content":"        } catch (DateTimeParseException pe){","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Please try again in format: yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"Kcube33"},"content":"     * Removes a task from ArrayList according to user","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"Kcube33"},"content":"     * @param taskno User input of which task to remove","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"Kcube33"},"content":"    public static void delete(ArrayList\u003cTaskList\u003e all_tasks, Integer taskno){","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"Kcube33"},"content":"        int temp \u003d taskno-1;","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"Kcube33"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"Kcube33"},"content":"            System.out.println(","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"Kcube33"},"content":"                    \"Noted. I\u0027ve removed this task: \\n\" +","lastModifiedDate":"2021-11-07"},{"lineNumber":101,"author":{"gitId":"Kcube33"},"content":"                            all_tasks.get(temp).printtask() +","lastModifiedDate":"2021-11-07"},{"lineNumber":102,"author":{"gitId":"Kcube33"},"content":"                            \"\\nNow you have \" + (all_tasks.size()-1)  + \" tasks in the list.\");","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"Kcube33"},"content":"            all_tasks.remove(temp);","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"Kcube33"},"content":"        } catch (IndexOutOfBoundsException e){","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Task Number Does not exist. Please try again\");","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":108,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":110}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"public class Duke {","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"    private static ArrayList\u003cTaskList\u003e storage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"     * Initialises duke","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"     * Initialises","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"        readFile.initialise(storage);","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"        ChatBot a \u003d new ChatBot(storage);","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":20}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"import duke.exception.timelineException;","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":" * This class is parses the user input into acceptable commands to be accepted by Duke","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"public class Parser {","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"    private static String task;","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"    private static String by;","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"Kcube33"},"content":"     * Extracts the first word of from {@code text} to be run as a command for Duke","lastModifiedDate":"2021-11-08"},{"lineNumber":22,"author":{"gitId":"Kcube33"},"content":"     * @param text Raw User input","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Kcube33"},"content":"     * @return a command for Duke","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"Kcube33"},"content":"    public static String FirstWord(String text){","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Kcube33"},"content":"        if(text.contains(\" \")){","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Kcube33"},"content":"            text\u003d text.substring(0, text.indexOf(\" \"));","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Kcube33"},"content":"        return text;","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"Kcube33"},"content":"     * Intake the user\u0027s raw input","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"Kcube33"},"content":"     * @return","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"Kcube33"},"content":"    public static String UIinput(){","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Kcube33"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Kcube33"},"content":"        String line \u003d in.nextLine();","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Kcube33"},"content":"        return line;","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"Kcube33"},"content":"     * Parses the todo task description from {@code text}","lastModifiedDate":"2021-11-08"},{"lineNumber":44,"author":{"gitId":"Kcube33"},"content":"     * @param text Raw user input","lastModifiedDate":"2021-11-08"},{"lineNumber":45,"author":{"gitId":"Kcube33"},"content":"     * @return Task description for todo","lastModifiedDate":"2021-11-08"},{"lineNumber":46,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":47,"author":{"gitId":"Kcube33"},"content":"    public static String parseTodo(String text){","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Kcube33"},"content":"        task \u003d text.substring(5);","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"Kcube33"},"content":"        return task;","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"Kcube33"},"content":"     * Parses the deadline task description from {@code text}","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Kcube33"},"content":"     * @param text Raw user input","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"Kcube33"},"content":"     * @return Task description for deadline","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"Kcube33"},"content":"    public static String parseDeadline(String text){","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"Kcube33"},"content":"        task \u003d text.substring(9);","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"Kcube33"},"content":"        return task;","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"Kcube33"},"content":"     * Parses the Event task description from {@code text}","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"Kcube33"},"content":"     * @param text Raw user input","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"Kcube33"},"content":"     * @return Task description for event","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"Kcube33"},"content":"    public static String parseEvent(String text){","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"Kcube33"},"content":"        task \u003d text.substring(6);","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"Kcube33"},"content":"        return task;","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"Kcube33"},"content":"     * Returns a date and time in a 24-hour format","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"Kcube33"},"content":"     * The date and time must be indicated in string form in {@code text} the text","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"Kcube33"},"content":"     * parameter is supposed to be entered in the below stated format","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"Kcube33"},"content":"     * @param text the date and time in String format","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"Kcube33"},"content":"     * @return date and time in proper date/time format","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":79,"author":{"gitId":"Kcube33"},"content":"    public static LocalDateTime parseDateTime(String text){","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"Kcube33"},"content":"        LocalDateTime date1 \u003d null;","lastModifiedDate":"2021-11-08"},{"lineNumber":81,"author":{"gitId":"Kcube33"},"content":"        try{","lastModifiedDate":"2021-11-08"},{"lineNumber":82,"author":{"gitId":"Kcube33"},"content":"            text \u003d text.trim();","lastModifiedDate":"2021-11-08"},{"lineNumber":83,"author":{"gitId":"Kcube33"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":84,"author":{"gitId":"Kcube33"},"content":"            date1 \u003d LocalDateTime.parse(text,formatter);","lastModifiedDate":"2021-11-08"},{"lineNumber":85,"author":{"gitId":"Kcube33"},"content":"        } catch (DateTimeParseException pe){","lastModifiedDate":"2021-11-08"},{"lineNumber":86,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Please try again in format: yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"Kcube33"},"content":"        return date1;","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"Kcube33"},"content":"     * Similar to method #parseDateTime. This method is exclusively used to parse the date and","lastModifiedDate":"2021-11-08"},{"lineNumber":93,"author":{"gitId":"Kcube33"},"content":"     * time and the saved text file when loading up Duke.","lastModifiedDate":"2021-11-08"},{"lineNumber":94,"author":{"gitId":"Kcube33"},"content":"     * @param text The date and time in String format parsed from text file","lastModifiedDate":"2021-11-08"},{"lineNumber":95,"author":{"gitId":"Kcube33"},"content":"     * @return date1 date and time in proper date/time format","lastModifiedDate":"2021-11-08"},{"lineNumber":96,"author":{"gitId":"Kcube33"},"content":"     * @throws timelineException Exception where the identifier/separator cannot be found","lastModifiedDate":"2021-11-08"},{"lineNumber":97,"author":{"gitId":"Kcube33"},"content":"     * in the text file","lastModifiedDate":"2021-11-08"},{"lineNumber":98,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":99,"author":{"gitId":"Kcube33"},"content":"    public static LocalDateTime parseFromFile(String text) throws timelineException{","lastModifiedDate":"2021-11-08"},{"lineNumber":100,"author":{"gitId":"Kcube33"},"content":"        String type;","lastModifiedDate":"2021-11-08"},{"lineNumber":101,"author":{"gitId":"Kcube33"},"content":"        if (text.contains(\"by\")){","lastModifiedDate":"2021-11-08"},{"lineNumber":102,"author":{"gitId":"Kcube33"},"content":"            type \u003d \"by\";","lastModifiedDate":"2021-11-08"},{"lineNumber":103,"author":{"gitId":"Kcube33"},"content":"        } else if (text.contains(\"at\")){","lastModifiedDate":"2021-11-08"},{"lineNumber":104,"author":{"gitId":"Kcube33"},"content":"            type \u003d \"at\";","lastModifiedDate":"2021-11-08"},{"lineNumber":105,"author":{"gitId":"Kcube33"},"content":"        } else if (text.contains(\"end\")){","lastModifiedDate":"2021-11-08"},{"lineNumber":106,"author":{"gitId":"Kcube33"},"content":"            type \u003d \"end\";","lastModifiedDate":"2021-11-08"},{"lineNumber":107,"author":{"gitId":"Kcube33"},"content":"        } else {","lastModifiedDate":"2021-11-08"},{"lineNumber":108,"author":{"gitId":"Kcube33"},"content":"            throw new timelineException(\"Unidentified dateline\");","lastModifiedDate":"2021-11-08"},{"lineNumber":109,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":110,"author":{"gitId":"Kcube33"},"content":"        LocalDateTime date1 \u003d null;","lastModifiedDate":"2021-11-08"},{"lineNumber":111,"author":{"gitId":"Kcube33"},"content":"        try{","lastModifiedDate":"2021-11-08"},{"lineNumber":112,"author":{"gitId":"Kcube33"},"content":"            by \u003d text.substring(text.indexOf(type) + 4);","lastModifiedDate":"2021-11-08"},{"lineNumber":113,"author":{"gitId":"Kcube33"},"content":"            by \u003d by.trim();","lastModifiedDate":"2021-11-08"},{"lineNumber":114,"author":{"gitId":"Kcube33"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":115,"author":{"gitId":"Kcube33"},"content":"            date1 \u003d LocalDateTime.parse(by,formatter);","lastModifiedDate":"2021-11-08"},{"lineNumber":116,"author":{"gitId":"Kcube33"},"content":"        } catch (DateTimeParseException pe){","lastModifiedDate":"2021-11-08"},{"lineNumber":117,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Please try again in format: yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-08"},{"lineNumber":118,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-08"},{"lineNumber":119,"author":{"gitId":"Kcube33"},"content":"        return date1;","lastModifiedDate":"2021-11-08"},{"lineNumber":120,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":121,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":122}},{"path":"src/main/java/duke/UserCmd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"public enum UserCmd {","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"    bye, list, done, delete, todo, event, deadline","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":6}},{"path":"src/main/java/duke/WriteToFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"import java.io.FileWriter;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"import java.io.File;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"/** Writes outstanding tasks to text file on hard disk */","lastModifiedDate":"2021-11-08"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"public class WriteToFile {","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"     * This method locates if there is an existing text file on the hard disk. If there","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"     * is no such file, this method will create one.","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"     * Each outstanding task is written through {@link #addToFile(File, TaskList)}","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"     *","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"    public static void startWriting(ArrayList\u003cTaskList\u003e all_tasks){","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Kcube33"},"content":"        String home \u003d System.getProperty(\"user.home\") + \"\\\\Documents\\\\duke.txt\";","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Kcube33"},"content":"        File f \u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Kcube33"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Kcube33"},"content":"            f \u003d new File(home);","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Kcube33"},"content":"            clearContents(f);","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Kcube33"},"content":"            for(TaskList task:all_tasks){","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Kcube33"},"content":"                addToFile(f,task);","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Kcube33"},"content":"            }","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Kcube33"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Kcube33"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"No Existing File. New file will be created at \" + home);","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"Kcube33"},"content":"    private static void clearContents(File f) throws IOException {","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Kcube33"},"content":"        FileWriter fw \u003d new FileWriter(f.getAbsolutePath());","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Kcube33"},"content":"        fw.write(\"\");","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Kcube33"},"content":"        fw.close();","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Kcube33"},"content":"    /** append each new task to the text file */","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"Kcube33"},"content":"    private static void addToFile(File f, TaskList oneTask) throws IOException {","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"Kcube33"},"content":"        FileWriter fw \u003d new FileWriter(f.getAbsolutePath(),true);","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"Kcube33"},"content":"        Integer D \u003d oneTask.isDone ? 1:0;","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"Kcube33"},"content":"        String temp \u003d \" | \" + D+ \" | \";","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"Kcube33"},"content":"        if (oneTask.getType().equals(\"T\")){","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Kcube33"},"content":"            fw.write(oneTask.getType() + temp + oneTask.getTask() +  System.lineSeparator());","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"Kcube33"},"content":"        } else if (oneTask.getType().equals(\"D\")){","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"Kcube33"},"content":"            fw.write(oneTask.getType() + temp + oneTask.getTask() + \" | by: \" + oneTask.getbyRAW() +","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"Kcube33"},"content":"                    System.lineSeparator());","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Kcube33"},"content":"        } else if (oneTask.getType().equals(\"E\")){","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"Kcube33"},"content":"            fw.write(oneTask.getType() + temp + oneTask.getTask() + \" | at: \" + oneTask.getbyRAW() +","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Kcube33"},"content":"                     \" | end: \" + oneTask.getEndRAW() + System.lineSeparator());","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"Kcube33"},"content":"        fw.close();","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":58}},{"path":"src/main/java/duke/exception/timelineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke.exception;","lastModifiedDate":"2021-11-08"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"public class timelineException extends Exception {","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"    public timelineException(String str){","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"        super(str);","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-08"}],"authorContributionMap":{"Kcube33":10}},{"path":"src/main/java/duke/readFile.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import duke.tasks.*;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"import java.io.File;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"import duke.exception.timelineException;","lastModifiedDate":"2021-11-08"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":" * Reads the contents from the text file and populates the ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"public class readFile {","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"     * Searches the following path for the text tile.","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"     * @return selected file from hard disk","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"    private static File getFile(){","lastModifiedDate":"2021-11-08"},{"lineNumber":21,"author":{"gitId":"Kcube33"},"content":"        String home \u003d System.getProperty(\"user.home\") + \"\\\\Documents\\\\duke.txt\";","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Kcube33"},"content":"        File f \u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Kcube33"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Kcube33"},"content":"            f \u003d new File(home);","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Kcube33"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"File not found\");","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Kcube33"},"content":"        return f;","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":32,"author":{"gitId":"Kcube33"},"content":"     * Takes the created file in {@code pFile} and reads the content inside. This method will","lastModifiedDate":"2021-11-08"},{"lineNumber":33,"author":{"gitId":"Kcube33"},"content":"     * take each line and pass it #fileTasks to determine the type of task.","lastModifiedDate":"2021-11-08"},{"lineNumber":34,"author":{"gitId":"Kcube33"},"content":"     * @param pFile the existing file that was created from the text file on hard disk","lastModifiedDate":"2021-11-08"},{"lineNumber":35,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks ArrayList of tasks for Duke","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"Kcube33"},"content":"     * @see readFile#fileTasks(ArrayList, String)","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"Kcube33"},"content":"    private static void PrintFile(File pFile, ArrayList\u003cTaskList\u003e all_tasks) {","lastModifiedDate":"2021-11-08"},{"lineNumber":39,"author":{"gitId":"Kcube33"},"content":"        Scanner s;","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Kcube33"},"content":"        try {","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Kcube33"},"content":"            s \u003d new Scanner(pFile);","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Kcube33"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"Kcube33"},"content":"                String oneTask \u003d s.nextLine();","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"Kcube33"},"content":"                fileTasks(all_tasks,oneTask);","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"Kcube33"},"content":"            }","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"Kcube33"},"content":"            s.close();","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"Kcube33"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"File not found. New file will be created in Documents Folder \" +","lastModifiedDate":"2021-11-08"},{"lineNumber":49,"author":{"gitId":"Kcube33"},"content":"                    \"under duke.txt\");","lastModifiedDate":"2021-11-08"},{"lineNumber":50,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Kcube33"},"content":"     * Determines the type of task from {@code ot} and its details and adds it into ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"Kcube33"},"content":"     * @param ot String of text obtained from #PrintFile","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"Kcube33"},"content":"    private static void fileTasks(ArrayList\u003cTaskList\u003e all_tasks, String ot) {","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"Kcube33"},"content":"        String[] expected \u003d ot.split(\"\\\\|\");","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"Kcube33"},"content":"        for (int i \u003d 0; i \u003c 2; i++){","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"Kcube33"},"content":"            expected[i] \u003d expected[i].replaceAll(\"\\\\s\",\"\");","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"Kcube33"},"content":"        for (int i \u003d 2; i \u003c expected.length; i++){","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"Kcube33"},"content":"            expected[i] \u003d expected[i].trim();","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"Kcube33"},"content":"        try{","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"Kcube33"},"content":"            if (expected[0].equals(\"T\")){","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"Kcube33"},"content":"                all_tasks.add(new Todo(expected[2]));","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"Kcube33"},"content":"            } else if (expected[0].equals(\"E\")){","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"Kcube33"},"content":"                all_tasks.add(new Events(expected[2],Parser.parseFromFile(expected[3]),","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"Kcube33"},"content":"                        Parser.parseFromFile(expected[4])));","lastModifiedDate":"2021-11-08"},{"lineNumber":72,"author":{"gitId":"Kcube33"},"content":"            } else if (expected[0].equals(\"D\")){","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"Kcube33"},"content":"                all_tasks.add(new Deadline(expected[2],Parser.parseFromFile(expected[3])));","lastModifiedDate":"2021-11-08"},{"lineNumber":74,"author":{"gitId":"Kcube33"},"content":"            }","lastModifiedDate":"2021-11-08"},{"lineNumber":75,"author":{"gitId":"Kcube33"},"content":"        } catch (timelineException pe){","lastModifiedDate":"2021-11-08"},{"lineNumber":76,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Please check file entry \" + ot);","lastModifiedDate":"2021-11-08"},{"lineNumber":77,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Format must be in: \\\"by/at/end yyyy-MM-dd HH:mm\\\"\");","lastModifiedDate":"2021-11-08"},{"lineNumber":78,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":80,"author":{"gitId":"Kcube33"},"content":"        boolean D;","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"Kcube33"},"content":"        if (expected[1].equals(\"1\")){","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"Kcube33"},"content":"            all_tasks.get(all_tasks.size()-1).isDone \u003d true;","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":87,"author":{"gitId":"Kcube33"},"content":"     * This method checks for an existing file in the hardtask. When the file is found, ArrayList","lastModifiedDate":"2021-11-08"},{"lineNumber":88,"author":{"gitId":"Kcube33"},"content":"     * will be populated with the tasks from the text file. If not, it will prompt the user to","lastModifiedDate":"2021-11-08"},{"lineNumber":89,"author":{"gitId":"Kcube33"},"content":"     * create a new lists of tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":90,"author":{"gitId":"Kcube33"},"content":"     * @param all_tasks ArrayList of tasks to be populated and used for Duke","lastModifiedDate":"2021-11-08"},{"lineNumber":91,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":92,"author":{"gitId":"Kcube33"},"content":"    public static void initialise(ArrayList\u003cTaskList\u003e all_tasks) {","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"Kcube33"},"content":"        File newFile \u003d getFile();","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"Kcube33"},"content":"        if (newFile \u003d\u003d null){","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"Please proceed to create new list\");","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"Kcube33"},"content":"            return;","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"Kcube33"},"content":"        PrintFile(newFile, all_tasks);","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":100}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke.tasks;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"public class Deadline extends TaskList{","lastModifiedDate":"2021-10-04"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"        super(description);","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"        this.type \u003d \"D\";","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"    public String printtask(){","lastModifiedDate":"2021-10-04"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"        return \"[D]\" + super.printtask() + \" (by: \" + getBy() + \")\";","lastModifiedDate":"2021-11-08"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"Kcube33":18}},{"path":"src/main/java/duke/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke.tasks;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"public class Events extends TaskList{","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"    public Events(String description, LocalDateTime by, LocalDateTime end) {","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"        super(description);","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"        this.by \u003d by;","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"        this.type\u003d \"E\";","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"        this.end \u003d end;","lastModifiedDate":"2021-11-08"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"    @Override","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"    public String printtask(){","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"        return \"[E]\" + super.printtask() + \" (at: \" + getBy() + \"\" +","lastModifiedDate":"2021-11-08"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"                \" End: \" + getEnd() +\")\";","lastModifiedDate":"2021-11-08"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Kcube33":21}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke.tasks;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-08"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-08"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"/**","lastModifiedDate":"2021-11-08"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":" * Superclass for all types of tasks","lastModifiedDate":"2021-11-08"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":" */","lastModifiedDate":"2021-11-08"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"public class TaskList {","lastModifiedDate":"2021-10-03"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"    protected String task;","lastModifiedDate":"2021-10-03"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"    public Boolean isDone;","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"    protected String type \u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"    protected LocalDateTime by \u003d null;","lastModifiedDate":"2021-11-08"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"    protected LocalDateTime end \u003d null;","lastModifiedDate":"2021-11-08"},{"lineNumber":16,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":17,"author":{"gitId":"Kcube33"},"content":"    TaskList(String task){","lastModifiedDate":"2021-10-03"},{"lineNumber":18,"author":{"gitId":"Kcube33"},"content":"        this.task \u003d task;","lastModifiedDate":"2021-10-03"},{"lineNumber":19,"author":{"gitId":"Kcube33"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-10-03"},{"lineNumber":20,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":21,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":22,"author":{"gitId":"Kcube33"},"content":"    /**","lastModifiedDate":"2021-11-08"},{"lineNumber":23,"author":{"gitId":"Kcube33"},"content":"     * Sets the completion status to done","lastModifiedDate":"2021-11-08"},{"lineNumber":24,"author":{"gitId":"Kcube33"},"content":"     */","lastModifiedDate":"2021-11-08"},{"lineNumber":25,"author":{"gitId":"Kcube33"},"content":"    public void done(){","lastModifiedDate":"2021-10-03"},{"lineNumber":26,"author":{"gitId":"Kcube33"},"content":"        if (this.isDone \u003d\u003d true){","lastModifiedDate":"2021-11-08"},{"lineNumber":27,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"_______________________\\n This task has already been completed\");","lastModifiedDate":"2021-11-08"},{"lineNumber":28,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"[X] \" + this.task + \"\\n_______________________\");","lastModifiedDate":"2021-11-08"},{"lineNumber":29,"author":{"gitId":"Kcube33"},"content":"        } else{","lastModifiedDate":"2021-11-08"},{"lineNumber":30,"author":{"gitId":"Kcube33"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2021-10-03"},{"lineNumber":31,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"_______________________\\n Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2021-10-03"},{"lineNumber":32,"author":{"gitId":"Kcube33"},"content":"            System.out.println(\"[X] \" + this.task + \"\\n_______________________\");","lastModifiedDate":"2021-10-03"},{"lineNumber":33,"author":{"gitId":"Kcube33"},"content":"        }","lastModifiedDate":"2021-10-03"},{"lineNumber":34,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":35,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":36,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":37,"author":{"gitId":"Kcube33"},"content":"    /** returns the completion status */","lastModifiedDate":"2021-11-08"},{"lineNumber":38,"author":{"gitId":"Kcube33"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-10-03"},{"lineNumber":39,"author":{"gitId":"Kcube33"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2021-10-03"},{"lineNumber":40,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":41,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":42,"author":{"gitId":"Kcube33"},"content":"    /** returns the task description */","lastModifiedDate":"2021-11-08"},{"lineNumber":43,"author":{"gitId":"Kcube33"},"content":"    public String getTask(){","lastModifiedDate":"2021-10-03"},{"lineNumber":44,"author":{"gitId":"Kcube33"},"content":"        return this.task;","lastModifiedDate":"2021-10-03"},{"lineNumber":45,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-03"},{"lineNumber":46,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-03"},{"lineNumber":47,"author":{"gitId":"Kcube33"},"content":"    /** returns the type of task in short form */","lastModifiedDate":"2021-11-08"},{"lineNumber":48,"author":{"gitId":"Kcube33"},"content":"    public String getType(){ return this.type;}","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"Kcube33"},"content":"    /** returns the completion/happening date and time in 12-hour format */","lastModifiedDate":"2021-11-08"},{"lineNumber":51,"author":{"gitId":"Kcube33"},"content":"    public String getBy(){","lastModifiedDate":"2021-11-08"},{"lineNumber":52,"author":{"gitId":"Kcube33"},"content":"        return this.by.getDayOfWeek() + \" \" +","lastModifiedDate":"2021-11-08"},{"lineNumber":53,"author":{"gitId":"Kcube33"},"content":"                this.by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":54,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":55,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":56,"author":{"gitId":"Kcube33"},"content":"    /** returns the supposed end date of task in 12-hour format*/","lastModifiedDate":"2021-11-08"},{"lineNumber":57,"author":{"gitId":"Kcube33"},"content":"    public String getEnd(){","lastModifiedDate":"2021-11-08"},{"lineNumber":58,"author":{"gitId":"Kcube33"},"content":"        return this.end.getDayOfWeek() + \" \" +","lastModifiedDate":"2021-11-08"},{"lineNumber":59,"author":{"gitId":"Kcube33"},"content":"                this.end.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":60,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":61,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":62,"author":{"gitId":"Kcube33"},"content":"    /** returns the completion/happening date and time in 24-hour format */","lastModifiedDate":"2021-11-08"},{"lineNumber":63,"author":{"gitId":"Kcube33"},"content":"    public String getbyRAW(){","lastModifiedDate":"2021-11-08"},{"lineNumber":64,"author":{"gitId":"Kcube33"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":65,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":66,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-08"},{"lineNumber":67,"author":{"gitId":"Kcube33"},"content":"    /** returns the supposed end date of task in 24-hour format*/","lastModifiedDate":"2021-11-08"},{"lineNumber":68,"author":{"gitId":"Kcube33"},"content":"    public String getEndRAW(){","lastModifiedDate":"2021-11-08"},{"lineNumber":69,"author":{"gitId":"Kcube33"},"content":"        return this.end.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2021-11-08"},{"lineNumber":70,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-11-08"},{"lineNumber":71,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Kcube33"},"content":"    /** returns the task description and completion status in String form */","lastModifiedDate":"2021-11-08"},{"lineNumber":73,"author":{"gitId":"Kcube33"},"content":"    public String printtask(){","lastModifiedDate":"2021-10-04"},{"lineNumber":74,"author":{"gitId":"Kcube33"},"content":"        return (\"[\" + getStatusIcon() + \"] \" + getTask());","lastModifiedDate":"2021-10-04"},{"lineNumber":75,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":76,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":77,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-10-03"}],"authorContributionMap":{"Kcube33":77}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Kcube33"},"content":"package duke.tasks;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":3,"author":{"gitId":"Kcube33"},"content":"public class Todo extends TaskList{","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Kcube33"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Kcube33"},"content":"        super(description);","lastModifiedDate":"2021-10-04"},{"lineNumber":7,"author":{"gitId":"Kcube33"},"content":"        this.type \u003d \"T\";","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":9,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":10,"author":{"gitId":"Kcube33"},"content":"    @Override","lastModifiedDate":"2021-10-04"},{"lineNumber":11,"author":{"gitId":"Kcube33"},"content":"    public String printtask(){","lastModifiedDate":"2021-10-04"},{"lineNumber":12,"author":{"gitId":"Kcube33"},"content":"        return \"[T]\" + super.printtask();","lastModifiedDate":"2021-10-04"},{"lineNumber":13,"author":{"gitId":"Kcube33"},"content":"    }","lastModifiedDate":"2021-10-04"},{"lineNumber":14,"author":{"gitId":"Kcube33"},"content":"","lastModifiedDate":"2021-10-04"},{"lineNumber":15,"author":{"gitId":"Kcube33"},"content":"}","lastModifiedDate":"2021-10-04"}],"authorContributionMap":{"Kcube33":15}}]
