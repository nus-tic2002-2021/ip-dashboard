[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"# duke.Duke project template","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"DINGMAN17":2,"-":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Parser;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import duke.command.AbstractCommand;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.FileProcessError;","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.InvalidUserInputException;","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"import java.io.IOException;","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"    private Storage storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"    private final Ui ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"    private final Parser parser;","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"            tasks \u003d new TaskList(storage.loadFile());","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"        } catch (FileProcessError e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"    public void run() throws IOException {","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"        ui.printGreeting();","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"        while (!isExit) {","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"            String inputCommand \u003d ui.readCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"            ui.showLine();","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"            parser.setUserInput(inputCommand);","lastModifiedDate":"2021-11-15"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"            try {","lastModifiedDate":"2021-11-15"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"                tasks.setParsedUserInputs(parser.parseAndCheckInput());","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"                AbstractCommand command \u003d parser.parseCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"                command.execute(tasks, storage, ui);","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"                isExit \u003d command.isExit();","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"            } catch (InvalidUserInputException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"                ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"            Duke app \u003d new Duke(\"data/tasks.txt\");","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"            app.run();","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-11-15"},{"lineNumber":55,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"DINGMAN17":56,"-":2}},{"path":"src/main/java/duke/app/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.app;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.command.*;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.InvalidUserInputException;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.TaskFactory;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-11-14"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Map;","lastModifiedDate":"2021-11-14"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":" * Check and parse the user input and throw exceptions if the input is invalid.","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"public class Parser {","lastModifiedDate":"2021-11-14"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"    public enum validActions {","lastModifiedDate":"2021-11-14"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"        ADD, LIST, DONE, DELETE, BYE, DATE","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"    private String userInput;","lastModifiedDate":"2021-11-14"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"    private Map\u003cString, String\u003e parsedInput;","lastModifiedDate":"2021-11-14"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"    public void setUserInput(String userInput) {","lastModifiedDate":"2021-11-14"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2021-11-14"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"        parsedInput \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-11-14"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"    /**parse user command to be passed to commandFactory","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"     * @return a command object created by \u003ccode\u003eCommandFactory\u003c/code\u003e","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"     * @throws InvalidUserInputException if command is not valid.","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"     */","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"    public AbstractCommand parseCommand() throws InvalidUserInputException {","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"        validActions validAction \u003d getAction();","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"        return CommandFactory.create(validAction);","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"    /**","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"     * Parse and check user input","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"     * - classify into different commands, i.e. list, add, date, delete, bye, done","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"     * - for add task, the first word must be event/todo/deadline.","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"     * - for all the task, description cannot be empty","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"     *  - for event/deadline, time of format \"yyyy-mm-dd hh:mm\" must be provided","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"     * @return parsed user input","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"     * @throws InvalidUserInputException if the command is invalid","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"     */","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"    public Map\u003cString, String\u003e parseAndCheckInput() throws InvalidUserInputException {","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"            parseValidAction();","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"            parseUserInput();","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"            return parsedInput;","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"            throw new InvalidUserInputException(\"Oops the task description/time is empty\");","lastModifiedDate":"2021-11-15"},{"lineNumber":55,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-14"},{"lineNumber":56,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":57,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":58,"author":{"gitId":"DINGMAN17"},"content":"    public validActions getAction() {","lastModifiedDate":"2021-11-15"},{"lineNumber":59,"author":{"gitId":"DINGMAN17"},"content":"        return validActions.valueOf(parsedInput.get(\"Action\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":60,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":61,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":62,"author":{"gitId":"DINGMAN17"},"content":"    public static LocalDateTime parseDateTime(String time) {","lastModifiedDate":"2021-11-15"},{"lineNumber":63,"author":{"gitId":"DINGMAN17"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-15"},{"lineNumber":64,"author":{"gitId":"DINGMAN17"},"content":"        return LocalDateTime.parse(time, formatter);","lastModifiedDate":"2021-11-15"},{"lineNumber":65,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":66,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":67,"author":{"gitId":"DINGMAN17"},"content":"    /**","lastModifiedDate":"2021-11-15"},{"lineNumber":68,"author":{"gitId":"DINGMAN17"},"content":"     * format LocalDateTime object using a user-friendly format for printing","lastModifiedDate":"2021-11-15"},{"lineNumber":69,"author":{"gitId":"DINGMAN17"},"content":"     * @param time, a LocalDateTime object","lastModifiedDate":"2021-11-15"},{"lineNumber":70,"author":{"gitId":"DINGMAN17"},"content":"     * @return formatted time, String","lastModifiedDate":"2021-11-15"},{"lineNumber":71,"author":{"gitId":"DINGMAN17"},"content":"     */","lastModifiedDate":"2021-11-15"},{"lineNumber":72,"author":{"gitId":"DINGMAN17"},"content":"    public static String formatDatetimeToString(LocalDateTime time) {","lastModifiedDate":"2021-11-15"},{"lineNumber":73,"author":{"gitId":"DINGMAN17"},"content":"        return DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).format(time);","lastModifiedDate":"2021-11-15"},{"lineNumber":74,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":75,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":76,"author":{"gitId":"DINGMAN17"},"content":"    private void parseValidAction() throws InvalidUserInputException {","lastModifiedDate":"2021-11-15"},{"lineNumber":77,"author":{"gitId":"DINGMAN17"},"content":"        String action \u003d userInput.split(\" \")[0].trim().toUpperCase();","lastModifiedDate":"2021-11-14"},{"lineNumber":78,"author":{"gitId":"DINGMAN17"},"content":"        for (validActions a : validActions.values()) {","lastModifiedDate":"2021-11-14"},{"lineNumber":79,"author":{"gitId":"DINGMAN17"},"content":"            if (a.name().equals(action)) {","lastModifiedDate":"2021-11-14"},{"lineNumber":80,"author":{"gitId":"DINGMAN17"},"content":"                parsedInput.put(\"Action\", action);","lastModifiedDate":"2021-11-14"},{"lineNumber":81,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-14"},{"lineNumber":82,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-14"},{"lineNumber":83,"author":{"gitId":"DINGMAN17"},"content":"        for (TaskFactory.validTaskTypes type : TaskFactory.validTaskTypes.values()) {","lastModifiedDate":"2021-11-14"},{"lineNumber":84,"author":{"gitId":"DINGMAN17"},"content":"            if (type.name().equals(action)) {","lastModifiedDate":"2021-11-14"},{"lineNumber":85,"author":{"gitId":"DINGMAN17"},"content":"                parsedInput.put(\"Action\", validActions.ADD.name());","lastModifiedDate":"2021-11-14"},{"lineNumber":86,"author":{"gitId":"DINGMAN17"},"content":"                parsedInput.put(\"TaskType\", action);","lastModifiedDate":"2021-11-14"},{"lineNumber":87,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-14"},{"lineNumber":88,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-14"},{"lineNumber":89,"author":{"gitId":"DINGMAN17"},"content":"        if (!parsedInput.containsKey(\"Action\")) {","lastModifiedDate":"2021-11-14"},{"lineNumber":90,"author":{"gitId":"DINGMAN17"},"content":"            throw new InvalidUserInputException(\"Command invalid, please enter a valid command\");","lastModifiedDate":"2021-11-15"},{"lineNumber":91,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-14"},{"lineNumber":92,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":93,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":94,"author":{"gitId":"DINGMAN17"},"content":"    private void parseUserInput() throws InvalidUserInputException {","lastModifiedDate":"2021-11-15"},{"lineNumber":95,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":96,"author":{"gitId":"DINGMAN17"},"content":"        if (validActions.DATE.name().equals(parsedInput.get(\"Action\"))) {","lastModifiedDate":"2021-11-15"},{"lineNumber":97,"author":{"gitId":"DINGMAN17"},"content":"            String time \u003d userInput.split(\"/\")[0].split(\" \", 2)[1];","lastModifiedDate":"2021-11-15"},{"lineNumber":98,"author":{"gitId":"DINGMAN17"},"content":"            parseTime(time);","lastModifiedDate":"2021-11-15"},{"lineNumber":99,"author":{"gitId":"DINGMAN17"},"content":"            return;","lastModifiedDate":"2021-11-15"},{"lineNumber":100,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":101,"author":{"gitId":"DINGMAN17"},"content":"        if (!validActions.LIST.name().equals(parsedInput.get(\"Action\")) \u0026\u0026","lastModifiedDate":"2021-11-15"},{"lineNumber":102,"author":{"gitId":"DINGMAN17"},"content":"                !validActions.BYE.name().equals(parsedInput.get(\"Action\"))) {","lastModifiedDate":"2021-11-15"},{"lineNumber":103,"author":{"gitId":"DINGMAN17"},"content":"            parseNameOrIndex();","lastModifiedDate":"2021-11-15"},{"lineNumber":104,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":105,"author":{"gitId":"DINGMAN17"},"content":"        if (parsedInput.containsKey(\"TaskType\") \u0026\u0026 !parsedInput.get(\"TaskType\").equals(\"TODO\")) {","lastModifiedDate":"2021-11-15"},{"lineNumber":106,"author":{"gitId":"DINGMAN17"},"content":"            String time \u003d userInput.split(\"/\")[1].substring(2).trim();","lastModifiedDate":"2021-11-15"},{"lineNumber":107,"author":{"gitId":"DINGMAN17"},"content":"            parseTime(time);","lastModifiedDate":"2021-11-15"},{"lineNumber":108,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":109,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":110,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":111,"author":{"gitId":"DINGMAN17"},"content":"    private void parseNameOrIndex() {","lastModifiedDate":"2021-11-14"},{"lineNumber":112,"author":{"gitId":"DINGMAN17"},"content":"        String name \u003d userInput.split(\"/\")[0].split(\" \", 2)[1];","lastModifiedDate":"2021-11-14"},{"lineNumber":113,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":114,"author":{"gitId":"DINGMAN17"},"content":"        parsedInput.put(\"NameOrIndex\", name);","lastModifiedDate":"2021-11-14"},{"lineNumber":115,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":116,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":117,"author":{"gitId":"DINGMAN17"},"content":"    private void parseTime(String time) throws InvalidUserInputException {","lastModifiedDate":"2021-11-15"},{"lineNumber":118,"author":{"gitId":"DINGMAN17"},"content":"        //allow empty time?","lastModifiedDate":"2021-11-14"},{"lineNumber":119,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":120,"author":{"gitId":"DINGMAN17"},"content":"            Parser.parseDateTime(time);","lastModifiedDate":"2021-11-15"},{"lineNumber":121,"author":{"gitId":"DINGMAN17"},"content":"            parsedInput.put(\"Time\", time);","lastModifiedDate":"2021-11-14"},{"lineNumber":122,"author":{"gitId":"DINGMAN17"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":123,"author":{"gitId":"DINGMAN17"},"content":"            throw new InvalidUserInputException(\"DateTime format should be yyyy-MM-dd HH:mm\");","lastModifiedDate":"2021-11-15"},{"lineNumber":124,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-14"},{"lineNumber":125,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":126,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-14"}],"authorContributionMap":{"DINGMAN17":126}},{"path":"src/main/java/duke/app/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.app;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Task;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.TaskFactory;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"import java.util.List;","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Map;","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":" * Represent a list of tasks including todo, event and deadline.","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"public class TaskList {","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"    private Map\u003cString, String\u003e parsedUserInputs;","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"    public TaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"        if (taskList !\u003d null) {","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"            this.taskList \u003d taskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"        } else  {","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"            this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"        parsedUserInputs \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    public TaskList() {","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"        this(new ArrayList\u003c\u003e());","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"    public List\u003cTask\u003e getTaskList() {","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"        return taskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"    public void setParsedUserInputs(Map\u003cString, String\u003e parsedUserInputs) {","lastModifiedDate":"2021-11-15"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"        this.parsedUserInputs.clear();","lastModifiedDate":"2021-11-15"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"        this.parsedUserInputs \u003d parsedUserInputs;","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"    public String deleteTask() {","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"        int idx \u003d Integer.parseInt(parsedUserInputs.get(\"NameOrIndex\")) - 1;","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"        Task removedTask \u003d taskList.remove(idx);","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"        return removedTask.toString();","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"    /**","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"     * mark the task as done.","lastModifiedDate":"2021-11-15"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"     * @return string representation of the task marked as done","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"     */","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"    public String changeTaskStatus() {","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"        int idx \u003d Integer.parseInt(parsedUserInputs.get(\"NameOrIndex\")) - 1;","lastModifiedDate":"2021-11-15"},{"lineNumber":55,"author":{"gitId":"DINGMAN17"},"content":"        Task taskDone \u003d taskList.get(idx);","lastModifiedDate":"2021-11-15"},{"lineNumber":56,"author":{"gitId":"DINGMAN17"},"content":"        taskDone.setDone(true);","lastModifiedDate":"2021-11-15"},{"lineNumber":57,"author":{"gitId":"DINGMAN17"},"content":"        return taskDone.toString();","lastModifiedDate":"2021-11-15"},{"lineNumber":58,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":59,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":60,"author":{"gitId":"DINGMAN17"},"content":"    /**","lastModifiedDate":"2021-11-15"},{"lineNumber":61,"author":{"gitId":"DINGMAN17"},"content":"     * find out a list of tasks due before a specified date.","lastModifiedDate":"2021-11-15"},{"lineNumber":62,"author":{"gitId":"DINGMAN17"},"content":"     * @return list of tasks","lastModifiedDate":"2021-11-15"},{"lineNumber":63,"author":{"gitId":"DINGMAN17"},"content":"     */","lastModifiedDate":"2021-11-15"},{"lineNumber":64,"author":{"gitId":"DINGMAN17"},"content":"    public List\u003cTask\u003e getTasksBeforeDate() {","lastModifiedDate":"2021-11-15"},{"lineNumber":65,"author":{"gitId":"DINGMAN17"},"content":"        List\u003cTask\u003e criticalTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":66,"author":{"gitId":"DINGMAN17"},"content":"        LocalDateTime comparedDate \u003d Parser.parseDateTime(parsedUserInputs.get(\"Time\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":67,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":68,"author":{"gitId":"DINGMAN17"},"content":"        for (Task task: taskList) {","lastModifiedDate":"2021-11-15"},{"lineNumber":69,"author":{"gitId":"DINGMAN17"},"content":"            if (task.getTime() !\u003d null) {","lastModifiedDate":"2021-11-15"},{"lineNumber":70,"author":{"gitId":"DINGMAN17"},"content":"                LocalDateTime taskDate \u003d Parser.parseDateTime(task.getTime());","lastModifiedDate":"2021-11-15"},{"lineNumber":71,"author":{"gitId":"DINGMAN17"},"content":"                if (taskDate.isBefore(comparedDate)) {","lastModifiedDate":"2021-11-15"},{"lineNumber":72,"author":{"gitId":"DINGMAN17"},"content":"                    criticalTasks.add(task);","lastModifiedDate":"2021-11-15"},{"lineNumber":73,"author":{"gitId":"DINGMAN17"},"content":"                }","lastModifiedDate":"2021-11-15"},{"lineNumber":74,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":75,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":76,"author":{"gitId":"DINGMAN17"},"content":"        return criticalTasks;","lastModifiedDate":"2021-11-15"},{"lineNumber":77,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":78,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":79,"author":{"gitId":"DINGMAN17"},"content":"    /** Add a new task to the list of tasks, only unique task will be added","lastModifiedDate":"2021-11-15"},{"lineNumber":80,"author":{"gitId":"DINGMAN17"},"content":"     * @return task, Task","lastModifiedDate":"2021-11-15"},{"lineNumber":81,"author":{"gitId":"DINGMAN17"},"content":"     */","lastModifiedDate":"2021-11-15"},{"lineNumber":82,"author":{"gitId":"DINGMAN17"},"content":"    public boolean addTask() {","lastModifiedDate":"2021-11-15"},{"lineNumber":83,"author":{"gitId":"DINGMAN17"},"content":"        Task newTask \u003d TaskFactory.creatTask(parsedUserInputs);","lastModifiedDate":"2021-11-15"},{"lineNumber":84,"author":{"gitId":"DINGMAN17"},"content":"        return addUniqueTask(newTask);","lastModifiedDate":"2021-11-15"},{"lineNumber":85,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":86,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":87,"author":{"gitId":"DINGMAN17"},"content":"    private boolean addUniqueTask(Task newTask) {","lastModifiedDate":"2021-11-15"},{"lineNumber":88,"author":{"gitId":"DINGMAN17"},"content":"        if (!taskList.contains(newTask)) {","lastModifiedDate":"2021-11-15"},{"lineNumber":89,"author":{"gitId":"DINGMAN17"},"content":"            taskList.add(newTask);","lastModifiedDate":"2021-11-15"},{"lineNumber":90,"author":{"gitId":"DINGMAN17"},"content":"            return true;","lastModifiedDate":"2021-11-15"},{"lineNumber":91,"author":{"gitId":"DINGMAN17"},"content":"        } else {","lastModifiedDate":"2021-11-15"},{"lineNumber":92,"author":{"gitId":"DINGMAN17"},"content":"            return false;","lastModifiedDate":"2021-11-15"},{"lineNumber":93,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":94,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":95,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":95}},{"path":"src/main/java/duke/app/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.app;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"public class Ui {","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"    private final Scanner scanner;","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"    public Ui() {","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"    public String readCommand() {","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"        return scanner.nextLine();","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"    public void printAddTask(boolean success, String newTask) {","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        if (!success) {","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"            System.out.println(\"The same task has been added previously, please enter another task\");","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \" + \" \" + newTask);","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"    public void printTotalNumber(int size) {","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"    public void printDeleteTask(String removedTask) {","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \\n\" + removedTask);","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"    public void printIndexWrongMessage() {","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Oops the index is wrong, please enter a valid index\");","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"    public void printGreeting() {","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"        String greeting \u003d \"Hey this is Blanc, welcome to your universe\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"                + \"I will provide everything you need:))\\n\";","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"        String instruction \u003d \"Please follow the instructions below\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"                + \"1. \\\"list\\\": print a list of tasks\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"                + \"2. \\\"done +number\\\" (e.g. done 2): set the task status to done\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"                + \"3. add task using \\\"todo\\\" \\\"deadline\\\" \\\"event\\\" keyword\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"                + \"4. \\\"bye\\\": end the program\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"                +\"Please type any command to start: \\n\";","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(greeting);","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(instruction);","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":55,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":56,"author":{"gitId":"DINGMAN17"},"content":"    public void printTask() {","lastModifiedDate":"2021-11-15"},{"lineNumber":57,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-11-15"},{"lineNumber":58,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":59,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":60,"author":{"gitId":"DINGMAN17"},"content":"    public void printDoneMessage(String taskDone) {","lastModifiedDate":"2021-11-15"},{"lineNumber":61,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\" + taskDone);","lastModifiedDate":"2021-11-15"},{"lineNumber":62,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":63,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":64,"author":{"gitId":"DINGMAN17"},"content":"    public void showLine() {","lastModifiedDate":"2021-11-15"},{"lineNumber":65,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"__________________________________\");","lastModifiedDate":"2021-11-15"},{"lineNumber":66,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":67,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":68,"author":{"gitId":"DINGMAN17"},"content":"    public void printExitMessage() {","lastModifiedDate":"2021-11-15"},{"lineNumber":69,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Bye. Have a nice day!\");","lastModifiedDate":"2021-11-15"},{"lineNumber":70,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":71,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":72,"author":{"gitId":"DINGMAN17"},"content":"    public void showErrorMessage(String message) {","lastModifiedDate":"2021-11-15"},{"lineNumber":73,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(message);","lastModifiedDate":"2021-11-15"},{"lineNumber":74,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":75,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":76,"author":{"gitId":"DINGMAN17"},"content":"    public void showDateCommandMessage() {","lastModifiedDate":"2021-11-15"},{"lineNumber":77,"author":{"gitId":"DINGMAN17"},"content":"        System.out.println(\"Here is the list of the tasks before the date specified: \");","lastModifiedDate":"2021-11-15"},{"lineNumber":78,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":79,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":79}},{"path":"src/main/java/duke/command/AbstractCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"public abstract class AbstractCommand {","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"    public abstract void execute(TaskList taskList, Storage storage, Ui ui);","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"    public boolean isExit() {return false;}","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":12}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.FileProcessError;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":" * Add a new Task to TaskList object and save the records in the text file.","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"public class AddCommand extends AbstractCommand{","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"        boolean success \u003d taskList.addTask();","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"        int taskSize \u003d taskList.getTaskList().size();","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        String newTaskStr \u003d taskList.getTaskList().get(taskSize - 1).toString();","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"        ui.printAddTask(success, newTaskStr);","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"        ui.printTotalNumber(taskSize);","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"        if (success) {","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"            try {","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"                storage.saveToFile(taskList.getTaskList());","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"            } catch (FileProcessError e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"                ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":29}},{"path":"src/main/java/duke/command/CommandFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Parser;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":" * Initialise a command object based on specified user action, which includes list, done, delete, add, bye, date.","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"public class CommandFactory {","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"    public static AbstractCommand create(Parser.validActions validAction) {","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"        switch (validAction) {","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"            case LIST:","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"                return new ListCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"            case DONE:","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"                return new DoneCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"            case DELETE:","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"                return new DeleteCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"            case ADD:","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"                return new AddCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"            case BYE:","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"                return new ExitCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"            case DATE:","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"                return new DateCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"            default:","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"                return null;","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":28}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Task;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"import java.util.List;","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":" * print all the tasks before a user-specified date","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"public class DateCommand extends AbstractCommand{","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"        List\u003cTask\u003e criticalTasks \u003d taskList.getTasksBeforeDate();","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        ui.showDateCommandMessage();","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"        for (Task task: criticalTasks) {","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"            System.out.println(task);","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":24}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.FileProcessError;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"public class DeleteCommand extends AbstractCommand {","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"            String removedTask \u003d taskList.deleteTask();","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"            ui.printDeleteTask(removedTask);","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"            ui.printTotalNumber(taskList.getTaskList().size());","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"            storage.saveToFile(taskList.getTaskList());","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"            ui.printIndexWrongMessage();","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        } catch (FileProcessError e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":22}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.FileProcessError;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":" * Change the specific task status to done.","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"public class DoneCommand extends AbstractCommand{","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"            String taskDone \u003d taskList.changeTaskStatus();","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"            ui.printDoneMessage(taskDone);","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"            storage.saveToFile(taskList.getTaskList());","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        } catch (NullPointerException | IndexOutOfBoundsException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"            ui.printIndexWrongMessage();","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"        } catch (FileProcessError e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":24}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"public class ExitCommand extends AbstractCommand{","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"        ui.printExitMessage();","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"        return true;","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":17}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":" * Print all the tasks in the list","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"public class ListCommand extends AbstractCommand{","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"    public void execute(TaskList taskList, Storage storage, Ui ui) {","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"        ui.printTask();","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"        for (int i\u003d0; i\u003c taskList.getTaskList().size(); i++){","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"            System.out.println(i + 1 + \".\" + taskList.getTaskList().get(i));","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":18}},{"path":"src/main/java/duke/exceptions/FileProcessError.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.exceptions;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":" * Represent exceptions occur when writing/reading from the storage file.","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"public class FileProcessError extends Exception{","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"    public FileProcessError(String message) {","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"        super(message);","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":10}},{"path":"src/main/java/duke/exceptions/InvalidStorageInput.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.exceptions;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":" * represent exceptions related to data in the txt file.","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"public class InvalidStorageInput extends Exception {","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"    public InvalidStorageInput(String message) {","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"        super(message);","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":10}},{"path":"src/main/java/duke/exceptions/InvalidUserInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.exceptions;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":" * Represent the exceptions related to user input","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"public class InvalidUserInputException extends Exception {","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"    public InvalidUserInputException(String message) {","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"        super(message);","lastModifiedDate":"2021-09-12"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"DINGMAN17":11}},{"path":"src/main/java/duke/storage/FileDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Parser;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.InvalidStorageInput;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Task;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.TaskFactory;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"import java.util.List;","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Map;","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":" * Decode the text from file into a list of existing before running the app.","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"public class FileDecoder {","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"    /**decode the list of task from String to task object","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"     * @param originalTasks, list of Strings read from the txt file","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"     * @return list of tasks, list of task objects","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"     */","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"    public static List\u003cTask\u003e decodeTasks(List\u003cString\u003e originalTasks) {","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"        for (String task: originalTasks) {","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"            try {","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"                Map\u003cString, String\u003e parsedInput \u003d decodeIndividualTask(task);","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"                if (!parsedInput.isEmpty()) {","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"                    Task newTask \u003d TaskFactory.creatTask(parsedInput);","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"                    setTaskStatus(parsedInput.get(\"TaskStatus\"), newTask);","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"                }","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"            } catch (InvalidStorageInput e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"                System.out.println(\"Error occurred when decoding task\\n\"","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"                        + \"reason:\" + e.getMessage());","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"        return tasks;","lastModifiedDate":"2021-11-15"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"    private static void setTaskStatus(String status, Task newTask) {","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"        boolean taskStatus \u003d !\"0\".equals(status);","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"        newTask.setDone(taskStatus);","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"    private static Map\u003cString, String\u003e decodeIndividualTask(String task) throws InvalidStorageInput {","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"        Map\u003cString, String\u003e parsedInputs \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"        String[] taskComponents \u003d task.replace(\"|\", \",\").split(\",\");","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"        checkValidTaskComponents(taskComponents);","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"        parsedInputs.put(\"TaskType\", taskComponents[0].trim());","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"        parsedInputs.put(\"TaskStatus\", taskComponents[1].trim());","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"        parsedInputs.put(\"NameOrIndex\", taskComponents[2].trim());","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":55,"author":{"gitId":"DINGMAN17"},"content":"        if (\"EVENT\".equals(parsedInputs.get(\"TaskType\")) || \"DEADLINE\".equals(parsedInputs.get(\"TaskType\"))) {","lastModifiedDate":"2021-11-15"},{"lineNumber":56,"author":{"gitId":"DINGMAN17"},"content":"            String time \u003d taskComponents[3].trim();","lastModifiedDate":"2021-11-15"},{"lineNumber":57,"author":{"gitId":"DINGMAN17"},"content":"            checkValidTime(time);","lastModifiedDate":"2021-11-15"},{"lineNumber":58,"author":{"gitId":"DINGMAN17"},"content":"            parsedInputs.put(\"Time\", time);","lastModifiedDate":"2021-11-15"},{"lineNumber":59,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":60,"author":{"gitId":"DINGMAN17"},"content":"        return parsedInputs;","lastModifiedDate":"2021-11-15"},{"lineNumber":61,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":62,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":63,"author":{"gitId":"DINGMAN17"},"content":"    private static void checkValidTime(String time) throws InvalidStorageInput {","lastModifiedDate":"2021-11-15"},{"lineNumber":64,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":65,"author":{"gitId":"DINGMAN17"},"content":"            Parser.parseDateTime(time);","lastModifiedDate":"2021-11-15"},{"lineNumber":66,"author":{"gitId":"DINGMAN17"},"content":"        } catch (Exception e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":67,"author":{"gitId":"DINGMAN17"},"content":"            throw new InvalidStorageInput(\"DateTime format incorrect\");","lastModifiedDate":"2021-11-15"},{"lineNumber":68,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":69,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":70,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":71,"author":{"gitId":"DINGMAN17"},"content":"    private static void checkValidTaskComponents(String[] taskComponents) throws InvalidStorageInput {","lastModifiedDate":"2021-11-15"},{"lineNumber":72,"author":{"gitId":"DINGMAN17"},"content":"        checkValidLength(taskComponents);","lastModifiedDate":"2021-11-15"},{"lineNumber":73,"author":{"gitId":"DINGMAN17"},"content":"        checkAndAddValidTaskType(taskComponents[0].trim());","lastModifiedDate":"2021-11-15"},{"lineNumber":74,"author":{"gitId":"DINGMAN17"},"content":"        checkValidTaskStatus(taskComponents[1].trim());","lastModifiedDate":"2021-11-15"},{"lineNumber":75,"author":{"gitId":"DINGMAN17"},"content":"        checkValidTaskName(taskComponents[2].trim());","lastModifiedDate":"2021-11-15"},{"lineNumber":76,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":77,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":78,"author":{"gitId":"DINGMAN17"},"content":"    private static void checkValidLength(String[] taskComponents) throws InvalidStorageInput {","lastModifiedDate":"2021-11-15"},{"lineNumber":79,"author":{"gitId":"DINGMAN17"},"content":"        int compulsoryComponents \u003d 3;","lastModifiedDate":"2021-11-15"},{"lineNumber":80,"author":{"gitId":"DINGMAN17"},"content":"        if (taskComponents.length \u003c compulsoryComponents) {","lastModifiedDate":"2021-11-15"},{"lineNumber":81,"author":{"gitId":"DINGMAN17"},"content":"            throw new InvalidStorageInput(\"Incomplete task components, must have type, description and status\");","lastModifiedDate":"2021-11-15"},{"lineNumber":82,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":83,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":84,"author":{"gitId":"DINGMAN17"},"content":"        if (\"EVENT\".equals(taskComponents[0].trim()) || \"DEADLINE\".equals(taskComponents[0].trim())){","lastModifiedDate":"2021-11-15"},{"lineNumber":85,"author":{"gitId":"DINGMAN17"},"content":"            if (taskComponents.length \u003c compulsoryComponents + 1) {","lastModifiedDate":"2021-11-15"},{"lineNumber":86,"author":{"gitId":"DINGMAN17"},"content":"                throw new InvalidStorageInput(\"Incomplete task components, must have time for event and deadline\");","lastModifiedDate":"2021-11-15"},{"lineNumber":87,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":88,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":89,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":90,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":91,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":92,"author":{"gitId":"DINGMAN17"},"content":"    private static void checkAndAddValidTaskType(String taskType) throws InvalidStorageInput {","lastModifiedDate":"2021-11-15"},{"lineNumber":93,"author":{"gitId":"DINGMAN17"},"content":"        for (TaskFactory.validTaskTypes type : TaskFactory.validTaskTypes.values()) {","lastModifiedDate":"2021-11-15"},{"lineNumber":94,"author":{"gitId":"DINGMAN17"},"content":"            if (type.name().equals(taskType)) {","lastModifiedDate":"2021-11-15"},{"lineNumber":95,"author":{"gitId":"DINGMAN17"},"content":"                return;","lastModifiedDate":"2021-11-15"},{"lineNumber":96,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":97,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":98,"author":{"gitId":"DINGMAN17"},"content":"        throw new InvalidStorageInput(\"Wrong type of task in the file\");","lastModifiedDate":"2021-11-15"},{"lineNumber":99,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":100,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":101,"author":{"gitId":"DINGMAN17"},"content":"    private static void checkValidTaskName(String taskName) throws InvalidStorageInput {","lastModifiedDate":"2021-11-15"},{"lineNumber":102,"author":{"gitId":"DINGMAN17"},"content":"        if (taskName \u003d\u003d null || \"\".equals(taskName)) {","lastModifiedDate":"2021-11-15"},{"lineNumber":103,"author":{"gitId":"DINGMAN17"},"content":"            throw new InvalidStorageInput(\"Missing task description\");","lastModifiedDate":"2021-11-15"},{"lineNumber":104,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":105,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":106,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":107,"author":{"gitId":"DINGMAN17"},"content":"    private static void checkValidTaskStatus(String taskStatus) throws InvalidStorageInput {","lastModifiedDate":"2021-11-15"},{"lineNumber":108,"author":{"gitId":"DINGMAN17"},"content":"        if (!\"01\".contains(taskStatus)) {","lastModifiedDate":"2021-11-15"},{"lineNumber":109,"author":{"gitId":"DINGMAN17"},"content":"            throw new InvalidStorageInput(\"wrong task status, must be 0 or 1\");","lastModifiedDate":"2021-11-15"},{"lineNumber":110,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":111,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":112,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":112}},{"path":"src/main/java/duke/storage/FileEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Task;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import java.util.List;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":" * Encode the tasklist object to a list of strings in order to be saved in a txt file","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"public class FileEncoder {","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"    public static List\u003cString\u003e encodeTasks(List\u003cTask\u003e tasksToSave) {","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"        List\u003cString\u003e toSave \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"        for (Task task: tasksToSave) {","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"            toSave.add(encodeIndividual(task));","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        return toSave;","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"    private static String encodeIndividual(Task task) {","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"        StringBuilder taskString \u003d new StringBuilder();","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"        taskString.append(task.getTaskType()).append(\" | \");","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"        taskString.append(task.isDone() ? 1 : 0).append(\" | \");","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"        taskString.append(task.getTaskName());","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"        if (task.getTime() !\u003d null) {","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"            taskString.append(\" | \").append(task.getTime());","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"        return taskString.toString();","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":31}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.FileProcessError;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Task;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import java.io.*;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"import java.util.List;","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":" * Perform necessary actions to save the list of tasks to txt file or read the existing","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":" * records from a txt file.","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"public class Storage {","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"    public static final String DEFAULT_FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"    public String filePath;","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"    public Storage(String filePath) throws FileProcessError {","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"            createFileIfNotExists();","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"            throw new FileProcessError(\"Can\u0027t create a new file based on file path defined\");","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    public Storage() throws FileProcessError {","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"        this(DEFAULT_FILE_PATH);","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"    private void createFileIfNotExists() throws IOException {","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"        file.createNewFile();","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"    public void saveToFile(List\u003cTask\u003e tasks) throws FileProcessError {","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"        List\u003cString\u003e toSave \u003d FileEncoder.encodeTasks(tasks);","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"        try (FileWriter writer \u003d new FileWriter(filePath)){","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"            for(String item: toSave) {","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"                writer.write(item + System.lineSeparator());","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"            throw new FileProcessError(\"Error occurred when saving to file\");","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"    public List\u003cTask\u003e loadFile() throws FileProcessError {","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"        List\u003cString\u003e originalTasks;","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"        try (Scanner scanner \u003d new Scanner(new File(filePath))) {","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"            originalTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2021-11-15"},{"lineNumber":55,"author":{"gitId":"DINGMAN17"},"content":"                originalTasks.add(scanner.nextLine());","lastModifiedDate":"2021-11-15"},{"lineNumber":56,"author":{"gitId":"DINGMAN17"},"content":"            }","lastModifiedDate":"2021-11-15"},{"lineNumber":57,"author":{"gitId":"DINGMAN17"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":58,"author":{"gitId":"DINGMAN17"},"content":"            throw new FileProcessError(\"Error occurred when loading the file\");","lastModifiedDate":"2021-11-15"},{"lineNumber":59,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":60,"author":{"gitId":"DINGMAN17"},"content":"        if (originalTasks.isEmpty()) {","lastModifiedDate":"2021-11-15"},{"lineNumber":61,"author":{"gitId":"DINGMAN17"},"content":"            return null;","lastModifiedDate":"2021-11-15"},{"lineNumber":62,"author":{"gitId":"DINGMAN17"},"content":"        } else {","lastModifiedDate":"2021-11-15"},{"lineNumber":63,"author":{"gitId":"DINGMAN17"},"content":"            return FileDecoder.decodeTasks(originalTasks);","lastModifiedDate":"2021-11-15"},{"lineNumber":64,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":65,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":66,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":66}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.task;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Parser;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":" * Represent a task with a specific deadline, represented by a dateTime object.","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"    private LocalDateTime by;","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"    public Deadline(String taskName, String by) {","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"        super(taskName);","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        this.by \u003d Parser.parseDateTime(by);","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"    public String getTaskType() { return \"DEADLINE\"; }","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"    public String getTime() {","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"        return by.toString().replace(\"T\", \" \");","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + Parser.formatDatetimeToString(by) + \")\";","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"        if (this \u003d\u003d o) return true;","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"        if (!(o instanceof Deadline)) return false;","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"        if (!super.equals(o)) return false;","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"        Deadline deadline \u003d (Deadline) o;","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"        return getTime().equals(deadline.getTime());","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-12"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"        return Objects.hash(super.hashCode(), getTime());","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"DINGMAN17":46}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.task;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Parser;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":" * Represent a type of task with a specific time, represented by a dateTime object.","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":" *","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"    private LocalDateTime at;","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"    public Event(String taskName, String at) {","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"        super(taskName);","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        this.at \u003d Parser.parseDateTime(at);","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"    public String getTaskType() { return \"EVENT\"; }","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"    public String getTime() {","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"        return at.toString().replace(\"T\", \" \");","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"        return \"[E]\" + super.toString() +","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"                \" (at: \" + Parser.formatDatetimeToString(at) + \")\";","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"        if (this \u003d\u003d o) return true;","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"        if (!(o instanceof Event)) return false;","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"        if (!super.equals(o)) return false;","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"        Event event \u003d (Event) o;","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"        return Objects.equals(getTime(), event.getTime());","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-12"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"        return Objects.hash(super.hashCode(), getTime());","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"DINGMAN17":47}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.task;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Objects;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"public abstract class Task {","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"    private final String taskName;","lastModifiedDate":"2021-11-14"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"    private boolean isDone;","lastModifiedDate":"2021-11-14"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"    public Task(String taskName) {","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"    public String getTaskName() {","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"        return taskName;","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"    public boolean isDone() {","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"        return isDone;","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"        isDone \u003d done;","lastModifiedDate":"2021-11-14"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"    public abstract String getTime();","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"    public String toString() {","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"        return \"[\" + getStatusIcon() + \"] \" + taskName;","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"        if (this \u003d\u003d o) return true;","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"        if (!(o instanceof Task)) return false;","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"        Task task \u003d (Task) o;","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"        return isDone() \u003d\u003d task.isDone() \u0026\u0026 getTaskName().equals(task.getTaskName());","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"    public int hashCode() {","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"        return Objects.hash(getTaskName(), isDone());","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"DINGMAN17":52}},{"path":"src/main/java/duke/task/TaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.task;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Map;","lastModifiedDate":"2021-11-14"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"/**","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":" * Initiate task objects based on specified task type","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":" */","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"public class TaskFactory {","lastModifiedDate":"2021-11-14"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"    public enum validTaskTypes {","lastModifiedDate":"2021-11-14"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"        TODO, DEADLINE, EVENT","lastModifiedDate":"2021-11-14"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"    public static Task creatTask(Map\u003cString, String\u003e inputs) {","lastModifiedDate":"2021-11-14"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"        validTaskTypes taskType \u003d validTaskTypes.valueOf(inputs.get(\"TaskType\"));","lastModifiedDate":"2021-11-14"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        switch (taskType) {","lastModifiedDate":"2021-11-14"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"            case TODO:","lastModifiedDate":"2021-11-14"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"                return new Todo(inputs.get(\"NameOrIndex\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"            case DEADLINE:","lastModifiedDate":"2021-11-14"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"                return new Deadline(inputs.get(\"NameOrIndex\"), inputs.get(\"Time\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"            case EVENT:","lastModifiedDate":"2021-11-14"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"                return new Event(inputs.get(\"NameOrIndex\"), inputs.get(\"Time\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"            default:","lastModifiedDate":"2021-11-14"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"                System.out.println(\"Wrong type of task\");","lastModifiedDate":"2021-11-14"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"                return null;","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-14"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-14"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-14"}],"authorContributionMap":{"DINGMAN17":30}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.task;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-14"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-12"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"        super(taskName);","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"    public String getTaskType() { return \"TODO\"; }","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"    public String getTime() {","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"        return null;","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"    public String toString() {","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-09-12"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"DINGMAN17":20}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.command;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.TaskList;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.app.Ui;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.exceptions.FileProcessError;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import duke.storage.Storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Task;","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"import java.util.List;","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"import java.util.Map;","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"class AddCommandTest {","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"    List\u003cTask\u003e tasksBefore;","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"    TaskList tasklist;","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"    Ui ui \u003d new Ui();","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"    Storage storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"    AbstractCommand addCommand;","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"    Map\u003cString, String\u003e parsedUserInput;","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"    @BeforeEach","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"    void setUp() {","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"        tasksBefore \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"        tasklist \u003d new TaskList();","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"        parsedUserInput \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"        addCommand \u003d new AddCommand();","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"        try {","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"            storage \u003d new Storage(\"./src/test/resource/testAddCommand.txt\");","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"        } catch (FileProcessError e) {","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"            e.printStackTrace();","lastModifiedDate":"2021-11-15"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"        }","lastModifiedDate":"2021-11-15"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"    @Test","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"    void execute_success() {","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"        tasksBefore.add(new Todo(\"reading\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"        parsedUserInput.put(\"TaskType\", \"TODO\");","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"        parsedUserInput.put(\"NameOrIndex\", \"reading\");","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"        tasklist.setParsedUserInputs(parsedUserInput);","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"        addCommand.execute(tasklist, storage, ui);","lastModifiedDate":"2021-11-15"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"        assertEquals(tasksBefore, tasklist.getTaskList());","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"    @Test","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"    void execute_redundantTask_fail() {","lastModifiedDate":"2021-11-15"},{"lineNumber":55,"author":{"gitId":"DINGMAN17"},"content":"        tasksBefore.add(new Todo(\"reading\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":56,"author":{"gitId":"DINGMAN17"},"content":"        tasksBefore.add(new Todo(\"reading\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":57,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":58,"author":{"gitId":"DINGMAN17"},"content":"        parsedUserInput.put(\"TaskType\", \"TODO\");","lastModifiedDate":"2021-11-15"},{"lineNumber":59,"author":{"gitId":"DINGMAN17"},"content":"        parsedUserInput.put(\"NameOrIndex\", \"reading\");","lastModifiedDate":"2021-11-15"},{"lineNumber":60,"author":{"gitId":"DINGMAN17"},"content":"        tasklist.setParsedUserInputs(parsedUserInput);","lastModifiedDate":"2021-11-15"},{"lineNumber":61,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":62,"author":{"gitId":"DINGMAN17"},"content":"        addCommand.execute(tasklist, storage, ui);","lastModifiedDate":"2021-11-15"},{"lineNumber":63,"author":{"gitId":"DINGMAN17"},"content":"        assertNotEquals(tasksBefore, tasklist.getTaskList());","lastModifiedDate":"2021-11-15"},{"lineNumber":64,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":65,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":65}},{"path":"src/test/java/duke/storage/FileDecoderTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DINGMAN17"},"content":"package duke.storage;","lastModifiedDate":"2021-11-15"},{"lineNumber":2,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":3,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-11-15"},{"lineNumber":4,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Task;","lastModifiedDate":"2021-11-15"},{"lineNumber":5,"author":{"gitId":"DINGMAN17"},"content":"import duke.task.Todo;","lastModifiedDate":"2021-11-15"},{"lineNumber":6,"author":{"gitId":"DINGMAN17"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2021-11-15"},{"lineNumber":7,"author":{"gitId":"DINGMAN17"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-11-15"},{"lineNumber":8,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"DINGMAN17"},"content":"import java.util.List;","lastModifiedDate":"2021-11-15"},{"lineNumber":11,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":12,"author":{"gitId":"DINGMAN17"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-11-15"},{"lineNumber":13,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":14,"author":{"gitId":"DINGMAN17"},"content":"class FileDecoderTest {","lastModifiedDate":"2021-11-15"},{"lineNumber":15,"author":{"gitId":"DINGMAN17"},"content":"    List\u003cString\u003e beforeTasks;","lastModifiedDate":"2021-11-15"},{"lineNumber":16,"author":{"gitId":"DINGMAN17"},"content":"    List\u003cTask\u003e afterTasks;","lastModifiedDate":"2021-11-15"},{"lineNumber":17,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"    @BeforeEach","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"DINGMAN17"},"content":"    void setUp() {","lastModifiedDate":"2021-11-15"},{"lineNumber":20,"author":{"gitId":"DINGMAN17"},"content":"        beforeTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":21,"author":{"gitId":"DINGMAN17"},"content":"        afterTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-15"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":24,"author":{"gitId":"DINGMAN17"},"content":"    @Test","lastModifiedDate":"2021-11-15"},{"lineNumber":25,"author":{"gitId":"DINGMAN17"},"content":"    void decodeTasks_success() {","lastModifiedDate":"2021-11-15"},{"lineNumber":26,"author":{"gitId":"DINGMAN17"},"content":"        beforeTasks.add(\"TODO | 1 | read\");","lastModifiedDate":"2021-11-15"},{"lineNumber":27,"author":{"gitId":"DINGMAN17"},"content":"        beforeTasks.add(\"DEADLINE | 0 | discussion  | 2021-11-17 12:00\");","lastModifiedDate":"2021-11-15"},{"lineNumber":28,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":29,"author":{"gitId":"DINGMAN17"},"content":"        Task task1 \u003d new Todo(\"read\");","lastModifiedDate":"2021-11-15"},{"lineNumber":30,"author":{"gitId":"DINGMAN17"},"content":"        task1.setDone(true);","lastModifiedDate":"2021-11-15"},{"lineNumber":31,"author":{"gitId":"DINGMAN17"},"content":"        afterTasks.add(task1);","lastModifiedDate":"2021-11-15"},{"lineNumber":32,"author":{"gitId":"DINGMAN17"},"content":"        afterTasks.add(new Deadline(\"discussion\", \"2021-11-17 12:00\"));","lastModifiedDate":"2021-11-15"},{"lineNumber":33,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":34,"author":{"gitId":"DINGMAN17"},"content":"        assertEquals(afterTasks, FileDecoder.decodeTasks(beforeTasks));","lastModifiedDate":"2021-11-15"},{"lineNumber":35,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":36,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":37,"author":{"gitId":"DINGMAN17"},"content":"    @Test","lastModifiedDate":"2021-11-15"},{"lineNumber":38,"author":{"gitId":"DINGMAN17"},"content":"    void decodeTasks_noDescription_fail() {","lastModifiedDate":"2021-11-15"},{"lineNumber":39,"author":{"gitId":"DINGMAN17"},"content":"        beforeTasks.add(\"DEADLINE | 0 |  | 2021-11-11 12:00\");","lastModifiedDate":"2021-11-15"},{"lineNumber":40,"author":{"gitId":"DINGMAN17"},"content":"        assertEquals(true, FileDecoder.decodeTasks(beforeTasks).isEmpty());","lastModifiedDate":"2021-11-15"},{"lineNumber":41,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":42,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":43,"author":{"gitId":"DINGMAN17"},"content":"    @Test","lastModifiedDate":"2021-11-15"},{"lineNumber":44,"author":{"gitId":"DINGMAN17"},"content":"    void decodeTasks_invalidStatus_fail() {","lastModifiedDate":"2021-11-15"},{"lineNumber":45,"author":{"gitId":"DINGMAN17"},"content":"        beforeTasks.add(\"DEADLINE | 5 | homework | 2021-11-11 12:00\");","lastModifiedDate":"2021-11-15"},{"lineNumber":46,"author":{"gitId":"DINGMAN17"},"content":"        assertEquals(true, FileDecoder.decodeTasks(beforeTasks).isEmpty());","lastModifiedDate":"2021-11-15"},{"lineNumber":47,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":48,"author":{"gitId":"DINGMAN17"},"content":"","lastModifiedDate":"2021-11-15"},{"lineNumber":49,"author":{"gitId":"DINGMAN17"},"content":"    @Test","lastModifiedDate":"2021-11-15"},{"lineNumber":50,"author":{"gitId":"DINGMAN17"},"content":"    void decodeTasks_invalidDate_fail() {","lastModifiedDate":"2021-11-15"},{"lineNumber":51,"author":{"gitId":"DINGMAN17"},"content":"        beforeTasks.add(\"DEADLINE | 5 | homework | 2021- 12:00\");","lastModifiedDate":"2021-11-15"},{"lineNumber":52,"author":{"gitId":"DINGMAN17"},"content":"        assertEquals(true, FileDecoder.decodeTasks(beforeTasks).isEmpty());","lastModifiedDate":"2021-11-15"},{"lineNumber":53,"author":{"gitId":"DINGMAN17"},"content":"    }","lastModifiedDate":"2021-11-15"},{"lineNumber":54,"author":{"gitId":"DINGMAN17"},"content":"}","lastModifiedDate":"2021-11-15"}],"authorContributionMap":{"DINGMAN17":54}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"DINGMAN17"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-11-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"DINGMAN17":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"DINGMAN17"},"content":"# delete output from previous execute","lastModifiedDate":"2021-11-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"DINGMAN17"},"content":"# execute the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2021-11-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"DINGMAN17":2,"-":36}}]
