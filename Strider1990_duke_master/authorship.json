[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"plugins {","lastModifiedDate":"2021-09-08"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"    id \u0027java\u0027","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"    id \u0027application\u0027","lastModifiedDate":"2021-09-10"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"group \u0027com.alexooi.duke\u0027","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"version \u00271.0\u0027","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"repositories {","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"    mavenCentral()","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"sourceSets {","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    main {","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"        java {","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"            srcDirs \u003d [\u0027src/main/java\u0027]","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"jar {","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    manifest {","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        attributes(","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"                \u0027Main-Class\u0027: \u0027com.alexooi.duke.Duke\u0027","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"        )","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"test {","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"    useJUnitPlatform()","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"dependencies {","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.7.2\u0027","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.2\u0027","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.7.2\u0027","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"run {","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-10"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"mainClassName \u003d \u0027com.alexooi.duke.Duke\u0027","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":37}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"@rem","lastModifiedDate":"2021-09-09"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2021-09-09"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"@rem","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2021-09-09"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2021-09-09"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2021-09-09"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"@rem","lastModifiedDate":"2021-09-09"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"@rem","lastModifiedDate":"2021-09-09"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2021-09-09"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2021-09-09"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2021-09-09"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"@rem limitations under the License.","lastModifiedDate":"2021-09-09"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"@rem","lastModifiedDate":"2021-09-09"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2021-09-09"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-09-09"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"@rem","lastModifiedDate":"2021-09-09"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2021-09-09"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"@rem","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"@rem ##########################################################################","lastModifiedDate":"2021-09-09"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2021-09-09"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2021-09-09"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2021-09-09"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2021-09-09"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2021-09-09"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2021-09-09"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2021-09-09"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2021-09-09"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2021-09-09"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2021-09-09"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"@rem Find java.exe","lastModifiedDate":"2021-09-09"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2021-09-09"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2021-09-09"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2021-09-09"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2021-09-09"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"echo.","lastModifiedDate":"2021-09-09"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2021-09-09"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"echo.","lastModifiedDate":"2021-09-09"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-09-09"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-09-09"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"goto fail","lastModifiedDate":"2021-09-09"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":":findJavaFromJavaHome","lastModifiedDate":"2021-09-09"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2021-09-09"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2021-09-09"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2021-09-09"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"echo.","lastModifiedDate":"2021-09-09"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2021-09-09"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"echo.","lastModifiedDate":"2021-09-09"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2021-09-09"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"echo location of your Java installation.","lastModifiedDate":"2021-09-09"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"goto fail","lastModifiedDate":"2021-09-09"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":":execute","lastModifiedDate":"2021-09-09"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"@rem Setup the command line","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2021-09-09"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":73,"author":{"gitId":"Strider1990"},"content":"@rem Execute Gradle","lastModifiedDate":"2021-09-09"},{"lineNumber":74,"author":{"gitId":"Strider1990"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2021-09-09"},{"lineNumber":75,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":76,"author":{"gitId":"Strider1990"},"content":":end","lastModifiedDate":"2021-09-09"},{"lineNumber":77,"author":{"gitId":"Strider1990"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2021-09-09"},{"lineNumber":78,"author":{"gitId":"Strider1990"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2021-09-09"},{"lineNumber":79,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":80,"author":{"gitId":"Strider1990"},"content":":fail","lastModifiedDate":"2021-09-09"},{"lineNumber":81,"author":{"gitId":"Strider1990"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2021-09-09"},{"lineNumber":82,"author":{"gitId":"Strider1990"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2021-09-09"},{"lineNumber":83,"author":{"gitId":"Strider1990"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2021-09-09"},{"lineNumber":84,"author":{"gitId":"Strider1990"},"content":"exit /b 1","lastModifiedDate":"2021-09-09"},{"lineNumber":85,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":86,"author":{"gitId":"Strider1990"},"content":":mainEnd","lastModifiedDate":"2021-09-09"},{"lineNumber":87,"author":{"gitId":"Strider1990"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2021-09-09"},{"lineNumber":88,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-09"},{"lineNumber":89,"author":{"gitId":"Strider1990"},"content":":omega","lastModifiedDate":"2021-09-09"}],"authorContributionMap":{"Strider1990":89}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"rootProject.name \u003d \u0027Duke-Alex\u0027","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":1}},{"path":"src/main/java/com/alexooi/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.commands.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidFileFormatException;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.storage.FileStorage;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.ui.CommandLineParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.ui.OutputFormatter;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.IOParser;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"import java.util.ServiceLoader;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"public class Duke {","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    private static Duke instance;","lastModifiedDate":"2021-09-10"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    private final OutputFormat\u003cTask\u003e prompt;","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    private final IOParser\u003cCommand, Scanner\u003e parser;","lastModifiedDate":"2021-09-09"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    private Duke(OutputFormat\u003cTask\u003e prompt, IOParser\u003cCommand, Scanner\u003e parser) {","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"        this.prompt \u003d prompt;","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    public static Duke getInstance() {","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"            instance \u003d new Duke(new OutputFormatter(), new CommandLineParser());","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"        return instance;","lastModifiedDate":"2021-09-10"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    public OutputFormat\u003cTask\u003e getPrompt() {","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        return this.prompt;","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"        Duke main \u003d Duke.getInstance();","lastModifiedDate":"2021-09-10"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"        FileStorage state \u003d new FileStorage(\"state.txt\");","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"        FileStorage archive \u003d new FileStorage(\"archive.txt\");","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"        TaskList tasks \u003d TaskList.getInstance(state, archive);","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"        ServiceLoader\u003cCommand\u003e commandLoader \u003d ServiceLoader.load(Command.class);","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"        System.out.println(main.prompt.start());","lastModifiedDate":"2021-09-10"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"        boolean isReceivingInput \u003d true;","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"        while (isReceivingInput \u0026\u0026 in.hasNext()) {","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"            try {","lastModifiedDate":"2021-09-08"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"                Command command \u003d main.parser.readInput(in, commandLoader);","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"                if (command.isExit()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"                    isReceivingInput \u003d false;","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"                } else {","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"                    String output \u003d command.execute(tasks, main.prompt);","lastModifiedDate":"2021-09-10"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"                    System.out.println(output);","lastModifiedDate":"2021-09-10"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"                }","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"            } catch (InvalidCommandException ice) {","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"                System.out.println(main.prompt.error(ice.getErrorHeader(), ice.getMessage()));","lastModifiedDate":"2021-09-10"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"            } catch (InvalidCommandFormatException icfe) {","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"                System.out.println(main.prompt.error(icfe.getErrorHeader(), icfe.getMessage()));","lastModifiedDate":"2021-09-10"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException ex) {","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"                System.out.println(main.prompt.error(ex.getMessage()));","lastModifiedDate":"2021-09-10"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":"            } catch (Exception ex) {","lastModifiedDate":"2021-09-09"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"                ex.printStackTrace();","lastModifiedDate":"2021-09-09"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"            tasks.save();","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"Strider1990"},"content":"        System.out.println(main.prompt.exit());","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":75,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":75}},{"path":"src/main/java/com/alexooi/duke/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskFactory;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^(\\\\bdeadline\\\\b|\\\\bevent\\\\b|\\\\btodo\\\\b)\\\\s?(.*)$\";","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    public AddCommand() {","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"        super();","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.ADD);","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    public AddCommand(String keyword, String args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        super(keyword, args);","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.ADD);","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"    public AddCommand build() {","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"        return new AddCommand(getKeyword(), getArgs());","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        Task newTask \u003d TaskFactory.getInstance(this);","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"        tasks.add(newTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"        return prompt.add(newTask, tasks.size());","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":42}},{"path":"src/main/java/com/alexooi/duke/commands/ArchiveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"public class ArchiveCommand extends Command {","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^(\\\\barchive\\\\b)\\\\s+(\\\\d+|all)$\";","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    private final String ARGS_ALL \u003d \"all\";","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    public ArchiveCommand() {","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.ARCHIVE);","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    public ArchiveCommand(String keyword, String args) {","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"        super(keyword, args);","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.ARCHIVE);","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"        String output;","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        if (getArgs().equalsIgnoreCase(ARGS_ALL)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"            tasks.archive();","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"            output \u003d prompt.archive(tasks.get());","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"            tasks.removeAll();","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        } else {","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"            int idx \u003d Integer.parseUnsignedInt(getArgs()) - 1;","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"            if (idx \u003e\u003d tasks.size()) {","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"                throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_NO_SUCH_INDEX);","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"            tasks.archive(idx);","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"            Task archived \u003d tasks.remove(idx);","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"            output \u003d prompt.archive(archived);","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"        return output;","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"    public Command build() throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"        return new ArchiveCommand(getKeyword(), getArgs());","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"Strider1990":52}},{"path":"src/main/java/com/alexooi/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"public abstract class Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    private String keyword;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    private String args;","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    private CommandType commandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    public Command() {","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    public Command(String keyword) {","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"        this.setKeyword(keyword);","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    public Command(String keyword, String args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"        this(keyword);","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        this.setArgs(args);","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    public String getKeyword() {","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        return keyword;","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    public void setKeyword(String keyword) {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"    public String getArgs() {","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        return args;","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    public void setArgs(String args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"        this.args \u003d args;","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"    public Iterable\u003cString\u003e getCommandFormat() {","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"        ArrayList\u003cString\u003e commandFormat \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"        commandFormat.add(getCommandType().getFormat());","lastModifiedDate":"2021-11-07"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"        if (getCommandType().getNotes() !\u003d null) {","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"            commandFormat.add(getCommandType().getNotes());","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"        return commandFormat;","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"    public abstract String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"    public abstract Pattern getRegexPattern();","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"    public abstract Command build() throws InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"        return false;","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"    };","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"    public CommandType getCommandType() {","lastModifiedDate":"2021-11-07"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"        return commandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"    public void setCommandType(CommandType commandType) {","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":72}},{"path":"src/main/java/com/alexooi/duke/commands/CompleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"public class CompleteCommand extends Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^\\\\b(done)\\\\b (.+)$\";","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    public CompleteCommand() {","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.COMPLETE);","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    public CompleteCommand(String keyword, String args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"        super(keyword, args);","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.COMPLETE);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    public CompleteCommand build() {","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"        return new CompleteCommand(getKeyword(), getArgs());","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        int idx \u003d Integer.parseInt(getArgs()) - 1;","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"        if (idx \u003e tasks.size() - 1) {","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"            throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_NO_SUCH_INDEX);","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        Task doneTask \u003d tasks.getTask(idx);","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"        doneTask.setDone(!doneTask.getDone());","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"        return prompt.done(doneTask, doneTask.getDone());","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":43}},{"path":"src/main/java/com/alexooi/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^\\\\b(delete)\\\\b (.+)$\";","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    public DeleteCommand() {","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.REMOVE);","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    public DeleteCommand(String keyword, String args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"        super(keyword, args);","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.REMOVE);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    public DeleteCommand build() {","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"        return new DeleteCommand(getKeyword(), getArgs());","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        int idx \u003d Integer.parseInt(getArgs()) - 1;","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"        if (idx \u003e tasks.size() - 1) {","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"            throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_NO_SUCH_INDEX);","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        Task removedTask \u003d tasks.remove(idx);","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"        return prompt.remove(removedTask, tasks.size());","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":42}},{"path":"src/main/java/com/alexooi/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^(bye)$\";","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    public ExitCommand() {","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.EXIT);","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    public ExitCommand(String keyword) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"        super(keyword);","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.EXIT);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    public ExitCommand build() {","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"        return new ExitCommand(getKeyword());","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        return true;","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"        return prompt.exit();","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":42}},{"path":"src/main/java/com/alexooi/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import java.util.List;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^(\\\\bfind\\\\b) (.*)$\";","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    public FindCommand() {","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.FIND);","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    public FindCommand(String keyword, String args) {","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"        super(keyword, args);","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.FIND);","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"        ArrayList\u003cTask\u003e taskList \u003d tasks.get();","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"        List\u003cTask\u003e filteredList \u003d taskList.stream().filter((task) -\u003e task.getDescription().contains(getArgs())).collect(Collectors.toList());","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"        return prompt.find(filteredList);","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    public Command build() throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"        return new FindCommand(getKeyword(), getArgs());","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"Strider1990":44}},{"path":"src/main/java/com/alexooi/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import java.util.ServiceLoader;","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^(help)$\";","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    public HelpCommand() {","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.HELP);","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    public HelpCommand(String keyword) {","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        super(keyword);","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.HELP);","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        ServiceLoader\u003cCommand\u003e commandLoader \u003d ServiceLoader.load(Command.class);","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"        ArrayList\u003cString\u003e promptInput \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"        for (Command cmd : commandLoader) {","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"            ArrayList\u003cString\u003e commandFormat \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"            cmd.getCommandFormat().forEach(commandFormat::add);","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"            promptInput.add(String.join(\" : \", commandFormat));","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"        return prompt.help(promptInput);","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"    public Command build() throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"        return new HelpCommand(getKeyword());","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Strider1990":46}},{"path":"src/main/java/com/alexooi/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^(list)$\";","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    public ListCommand() {","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.LIST);","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    public ListCommand(String keyword) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"        super(keyword);","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.LIST);","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    public ListCommand build() {","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"        return new ListCommand(getKeyword());","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        return prompt.list(tasks.get());","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":37}},{"path":"src/main/java/com/alexooi/duke/commands/ViewScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.commands;","lastModifiedDate":"2021-11-06"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.CommandType;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.DateParser;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Deadline;","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Event;","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.TaskList;","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.utility.InputDateParser;","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-11-06"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"import java.util.List;","lastModifiedDate":"2021-11-06"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-11-06"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"public class ViewScheduleCommand extends Command {","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    private final String REGEX_PATTERN \u003d \"^(\\\\bview\\\\b) (.*)$\";","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    DateParser parser;","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    public ViewScheduleCommand() {","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.VIEW_SCHEDULE);","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"        this.parser \u003d new InputDateParser();","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    public ViewScheduleCommand(String keyword, String args) {","lastModifiedDate":"2021-11-06"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"        super(keyword, args);","lastModifiedDate":"2021-11-06"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        setCommandType(CommandType.VIEW_SCHEDULE);","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"        this.parser \u003d new InputDateParser();","lastModifiedDate":"2021-11-06"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    public String execute(TaskList tasks, OutputFormat\u003cTask\u003e prompt) throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        ArrayList\u003cTask\u003e taskList \u003d tasks.get();","lastModifiedDate":"2021-11-06"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"        LocalDateTime dateTime \u003d parser.parseInput(getArgs());","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        if (dateTime \u003d\u003d null) {","lastModifiedDate":"2021-11-06"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"            throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_VIEW_SCHEDULE);","lastModifiedDate":"2021-11-06"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"        List\u003cTask\u003e filteredList \u003d taskList.stream().filter((element) -\u003e {","lastModifiedDate":"2021-11-06"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"            boolean isScheduled \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"            switch (element.getType()) {","lastModifiedDate":"2021-11-06"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"            case EVENT:","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"                Event event \u003d (Event) element;","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"                if (event.getTiming().toLocalDate().equals(dateTime.toLocalDate())) {","lastModifiedDate":"2021-11-06"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"                    isScheduled \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"                }","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"                break;","lastModifiedDate":"2021-11-06"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"            case DEADLINE:","lastModifiedDate":"2021-11-06"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"                Deadline deadline \u003d (Deadline) element;","lastModifiedDate":"2021-11-06"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"                if (deadline.getDueDate().toLocalDate().equals(dateTime.toLocalDate())) {","lastModifiedDate":"2021-11-06"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"                    isScheduled \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"                }","lastModifiedDate":"2021-11-06"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"                break;","lastModifiedDate":"2021-11-06"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-11-06"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"            return isScheduled;","lastModifiedDate":"2021-11-06"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"        }).collect(Collectors.toList());","lastModifiedDate":"2021-11-06"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"        return prompt.viewSchedule(filteredList, dateTime.toLocalDate());","lastModifiedDate":"2021-11-06"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"    public Pattern getRegexPattern() {","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":"        return Pattern.compile(REGEX_PATTERN, Pattern.CASE_INSENSITIVE);","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"    public ViewScheduleCommand build() throws InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"        if (!parser.isDate(getArgs(), DateTimeFormatter.ISO_DATE)) {","lastModifiedDate":"2021-11-06"},{"lineNumber":73,"author":{"gitId":"Strider1990"},"content":"            throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_VIEW_SCHEDULE);","lastModifiedDate":"2021-11-06"},{"lineNumber":74,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":75,"author":{"gitId":"Strider1990"},"content":"        return new ViewScheduleCommand(getKeyword(), getArgs());","lastModifiedDate":"2021-11-06"},{"lineNumber":76,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":77,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"Strider1990":77}},{"path":"src/main/java/com/alexooi/duke/enums/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.enums;","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"public enum CommandType {","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"    ADD(\"todo \u003cdescription\u003e\\n    deadline \u003cdescription\u003e /by \u003cdate\u003e\\n    event \u003cdescription\u003e /at \u003cdate\u003e\", \"\u003cdate\u003e must be in yyyy-mm-dd or yyyy-mm-ddThh:mm format.\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"    REMOVE(\"remove \u003cnum\u003e\", \"\u003cnum\u003e must be a number that currently exists in the list.\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"    COMPLETE(\"done \u003cnum\u003e\", \"\u003cnum\u003e must be a number that currently exists in the list.\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    ARCHIVE(\"archive \u003cnum\u003e/all\", \"\u003cnum\u003e must be a number that currently exists in the list.\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"    VIEW_SCHEDULE(\"view \u003cdate\u003e\", \"\u003cdate\u003e must be in yyyy-mm-dd.\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    LIST(\"list\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"    FIND(\"find \u003cdescription\u003e\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    EXIT(\"bye\"),","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    HELP(\"help\");","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    private String format;","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    private String notes;","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    CommandType(String format, String notes) {","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"        setFormat(format);","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"        setNotes(notes);","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    CommandType(String format) {","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"        setFormat(format);","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    public String getFormat() {","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        return format;","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    public void setFormat(String format) {","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        this.format \u003d format;","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    public String getNotes() {","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        return notes;","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"    public void setNotes(String notes) {","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        this.notes \u003d notes;","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-11-07"}],"authorContributionMap":{"Strider1990":41}},{"path":"src/main/java/com/alexooi/duke/enums/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.enums;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"public enum TaskType {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    TASK(\"task\");","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    private String type;","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    TaskType(String type) {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"        setType(type);","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    public String getType() {","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"        return type;","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    public void setType(String type) {","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    public String toString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"        return getType();","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":26}},{"path":"src/main/java/com/alexooi/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.exceptions;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"    private static final String ERROR_PREFIX \u003d \"Invalid Command:\";","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"    public static final String ERROR_GENERIC \u003d \"I don\u0027t know what that command means!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    public InvalidCommandException(String errorMessage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    public String getErrorHeader() {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"        return ERROR_PREFIX;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":14}},{"path":"src/main/java/com/alexooi/duke/exceptions/InvalidCommandFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.exceptions;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"public class InvalidCommandFormatException extends Throwable {","lastModifiedDate":"2021-09-08"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"    private static final String ERROR_PREFIX \u003d \"Invalid Command Format:\";","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"    public static final String ERROR_DEADLINE \u003d","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"            \"Deadline should be in the format: deadline \u003cdescription\u003e /by \u003cdate\u003e where \u003cdate\u003e is in the format of yyyy-mm-dd.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    public static final String ERROR_EVENT \u003d","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"            \"Event should be in the format: event \u003cdescription\u003e /at \u003cdate\u003e where \u003cdate\u003e is in the format of yyyy-mm-dd.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    public static final String ERROR_TODO \u003d","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"            \"Todo should be in the format: todo \u003cdescription\u003e.\";","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    public static final String ERROR_VIEW_SCHEDULE \u003d","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"            \"View schedule should be in the format: view \u003cdate\u003e.\";","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    public static final String ERROR_NO_SUCH_INDEX \u003d","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"            \"The task number is not valid. Please use the corresponding task number when listing the tasks\";","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    public InvalidCommandFormatException(String errorMessage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"        super(errorMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    public String getErrorHeader() {","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        return ERROR_PREFIX;","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    public String toString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        return getMessage();","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":27}},{"path":"src/main/java/com/alexooi/duke/exceptions/InvalidFileFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.exceptions;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"public class InvalidFileFormatException extends Throwable {","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"    private static final String ERROR_PREFIX \u003d \"Invalid File Format:\";","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"    public static final String ERROR_DATE \u003d \"Unable to parse date from file, file may have been modified manually or corrupted.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    public InvalidFileFormatException() {}","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    public InvalidFileFormatException(String errorMessage) {","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"        super(errorMessage);","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    public String getErrorHeader() {","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"        return ERROR_PREFIX;","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    public String toString() {","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"        return getMessage();","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Strider1990":20}},{"path":"src/main/java/com/alexooi/duke/interfaces/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.interfaces;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"public interface DateParser {","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    boolean isDate(String input, DateTimeFormatter formatter);","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"    boolean isDateTime(String input, DateTimeFormatter formatter);","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    LocalDateTime parseInput(String input);","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Strider1990":10}},{"path":"src/main/java/com/alexooi/duke/interfaces/IOParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.interfaces;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"public interface IOParser\u003cT, S\u003e {","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"    T readInput(S sc, Iterable\u003cT\u003e it) throws Exception, InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":7}},{"path":"src/main/java/com/alexooi/duke/interfaces/OutputFormat.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.interfaces;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"public interface OutputFormat\u003cT\u003e {","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"    String start();","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"    String add(T printable, int length);","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"    String done(T printable, boolean isDone);","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    String remove(T printable, int length);","lastModifiedDate":"2021-09-10"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    String error(String header, String errorMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    String error(String errorMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    String list(Iterable\u003cT\u003e inputs);","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    String viewSchedule(Iterable\u003cT\u003e inputs, LocalDate date);","lastModifiedDate":"2021-11-06"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    String find(Iterable\u003cT\u003e inputs);","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    String archive(T printable);","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    String archive(Iterable\u003cT\u003e inputs);","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    String help(Iterable\u003cString\u003e inputs);","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    String exit();","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":31}},{"path":"src/main/java/com/alexooi/duke/interfaces/StorageClient.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.interfaces;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"public interface StorageClient\u003cT\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"    T load();","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"    void save(String input, boolean isAppend);","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Strider1990":6}},{"path":"src/main/java/com/alexooi/duke/storage/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.storage;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.StorageClient;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import java.io.*;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":" * The concrete implementation of the StorageClient for storing in files.","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"public class FileStorage implements StorageClient\u003cBufferedReader\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    String filePath;","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    public FileStorage(String filePath) {","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"     * Loads the specific file at the file path and returns a reader for use by the parser","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"     * @return  A buffered reader that can be used to scan the file.","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    public BufferedReader load() {","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2021-10-23"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"            if (file.exists()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"                FileReader reader \u003d new FileReader(file);","lastModifiedDate":"2021-10-23"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"                return new BufferedReader(reader);","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"            } else if (file.createNewFile()) {","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"                FileReader reader \u003d new FileReader(file);","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"                return new BufferedReader(reader);","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"            } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"                throw new IOException();","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"        } catch (FileNotFoundException fnfe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"            System.out.println(\"File Not Found Exception: Shouldn\u0027t have hit this!\");","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"            System.out.println(\"IOException: Had an issue creating file\");","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"        return null;","lastModifiedDate":"2021-10-23"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"     * Save the input into the file at the file path.","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"     * @param input     The string to write into the file","lastModifiedDate":"2021-11-07"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"     * @param isAppend  Whether to append to the file or overwrite the file","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"    public void save(String input, boolean isAppend) {","lastModifiedDate":"2021-11-06"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"            FileWriter writer \u003d new FileWriter(file, isAppend);","lastModifiedDate":"2021-11-06"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"            BufferedWriter out \u003d new BufferedWriter(writer);","lastModifiedDate":"2021-10-23"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"            out.write(input);","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"            out.close();","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"            System.out.println(\"Had trouble saving!\");","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Strider1990":58}},{"path":"src/main/java/com/alexooi/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.TaskType;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.DateParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"public class Deadline extends Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    private LocalDateTime dueDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    public Deadline(String description, LocalDateTime dueDate) {","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"        super(TaskType.DEADLINE, description);","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"        this.setDueDate(dueDate);","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    public LocalDateTime getDueDate() {","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"        return dueDate;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    public void setDueDate(LocalDateTime dueDate) {","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    public String toStatusString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"        return \"[D]\" + super.toStatusString() + \" (by: \" + getDueDate() + \")\";","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    public String toSaveString() {","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        return super.toSaveString() + \"|\" + dueDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":33}},{"path":"src/main/java/com/alexooi/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.TaskType;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.DateParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"public class Event extends Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"    private LocalDateTime timing;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    public Event(String description, LocalDateTime timing) {","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"        super(TaskType.EVENT, description);","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"        this.setTiming(timing);","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    public LocalDateTime getTiming() {","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"        return timing;","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    public void setTiming(LocalDateTime timing) {","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        this.timing \u003d timing;","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    public String toStatusString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"        return \"[E]\" + super.toStatusString() + \" (at: \" + getTiming() + \")\";","lastModifiedDate":"2021-10-23"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    public String toSaveString() {","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        return super.toSaveString() + \"|\" + getTiming();","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":33}},{"path":"src/main/java/com/alexooi/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.TaskType;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"public abstract class Task {","lastModifiedDate":"2021-09-10"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"    private String description;","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    private Boolean isDone;","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"    private TaskType type;","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"    public Task() {","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"        isDone \u003d false;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    public Task(TaskType type, String description) {","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"        this();","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"        setType(type);","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"        setDescription(description);","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    public String getDescription() {","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        return this.description;","lastModifiedDate":"2021-09-08"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2021-09-08"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-09-08"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    public Boolean getDone() {","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"        return isDone;","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    public void setDone(Boolean done) {","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"        isDone \u003d done;","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    public TaskType getType() {","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        return type;","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"    public void setType(TaskType type) {","lastModifiedDate":"2021-09-08"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-09-08"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"    public String toStatusString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"        String doneStr \u003d (getDone()) ? \"X\" : \" \";","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"        return \"[\" + doneStr + \"] \" + this;","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"    public String toString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"        return getDescription();","lastModifiedDate":"2021-09-08"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"    public String toSaveString() {","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"        String doneStr \u003d (getDone()) ? \"T\" : \"F\";","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"        return getType() + \"|\" + doneStr + \"|\" + getDescription();","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":58}},{"path":"src/main/java/com/alexooi/duke/tasks/TaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.TaskType;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.commands.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidFileFormatException;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.DateParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.utility.InputDateParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"public class TaskFactory {","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    private static final String KEY_DESCRIPTION \u003d \"description\";","lastModifiedDate":"2021-09-08"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    private static final String KEY_DATE \u003d \"date\";","lastModifiedDate":"2021-09-08"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    private static final String DEADLINE_PATTERN \u003d","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"            \"^(?\u003c\" + KEY_DESCRIPTION + \"\u003e.+) /by (?\u003c\" + KEY_DATE + \"\u003e.+)$\";","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    private static final String EVENT_PATTERN \u003d","lastModifiedDate":"2021-09-08"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"            \"^(?\u003c\" + KEY_DESCRIPTION + \"\u003e.+) /at (?\u003c\" + KEY_DATE + \"\u003e.+)$\";","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    private static final DateParser dateParser \u003d new InputDateParser();","lastModifiedDate":"2021-10-23"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"     * This function takes in a command and","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"     * @param cmd   The command containing the keyword (Task name) and arguments (Date if applicable)","lastModifiedDate":"2021-11-07"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"     * @return      Deadline, Event or Todo task","lastModifiedDate":"2021-11-07"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"     * @throws InvalidCommandFormatException    If the date does is not parsable for Deadline and Event, this exception is thrown","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"    public static Task getInstance(Command cmd) throws InvalidCommandFormatException {","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"        String keyword \u003d cmd.getKeyword();","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        String args \u003d cmd.getArgs();","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"        if (keyword.equalsIgnoreCase(TaskType.DEADLINE.toString())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"            Matcher deadlineMatch \u003d","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"                    Pattern.compile(DEADLINE_PATTERN, Pattern.CASE_INSENSITIVE).matcher(args);","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"            if (deadlineMatch.matches()) {","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"                String description \u003d deadlineMatch.group(KEY_DESCRIPTION);","lastModifiedDate":"2021-09-08"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"                String dueDate \u003d deadlineMatch.group(KEY_DATE);","lastModifiedDate":"2021-09-08"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"                LocalDateTime dueBy \u003d dateParser.parseInput(dueDate);","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"                if (dueBy \u003d\u003d null) {","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"                    throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_DEADLINE);","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"                }","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"                return new Deadline(description, dueBy);","lastModifiedDate":"2021-11-07"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"            } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"                throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_DEADLINE);","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"        } else if (keyword.equalsIgnoreCase(TaskType.EVENT.toString())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"            Matcher eventMatch \u003d Pattern.compile(EVENT_PATTERN, Pattern.CASE_INSENSITIVE).matcher(args);","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"            if (eventMatch.matches()) {","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"                String description \u003d eventMatch.group(KEY_DESCRIPTION);","lastModifiedDate":"2021-09-08"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"                String timing \u003d eventMatch.group(KEY_DATE);","lastModifiedDate":"2021-09-08"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"                LocalDateTime eventTime \u003d dateParser.parseInput(timing);","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"                if (eventTime \u003d\u003d null) {","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"                    throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_DEADLINE);","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"                }","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"                return new Event(description, eventTime);","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"            } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"                throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_EVENT);","lastModifiedDate":"2021-09-08"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"        } else if (keyword.equalsIgnoreCase(TaskType.TODO.toString())) {","lastModifiedDate":"2021-09-08"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"            if (args.length() \u003e 0) {","lastModifiedDate":"2021-09-08"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"                return new Todo(args);","lastModifiedDate":"2021-09-08"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"            } else {","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"                throw new InvalidCommandFormatException(InvalidCommandFormatException.ERROR_TODO);","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"        throw new InvalidCommandFormatException(","lastModifiedDate":"2021-09-08"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":"                \"Cannot find the appropriate task to create.\");","lastModifiedDate":"2021-09-08"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"     * This function parses an input string that is formatted in the save file format and returns the respective Task","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"     * @param s     The input string to parse into a task","lastModifiedDate":"2021-11-07"},{"lineNumber":73,"author":{"gitId":"Strider1990"},"content":"     * @return      The Deadline, Event or To do Task","lastModifiedDate":"2021-11-07"},{"lineNumber":74,"author":{"gitId":"Strider1990"},"content":"     * @throws InvalidFileFormatException   This exception gets thrown if the line being parsed does not match any Task.","lastModifiedDate":"2021-11-07"},{"lineNumber":75,"author":{"gitId":"Strider1990"},"content":"     *                                          It should not occur unless the file has been modified externally.","lastModifiedDate":"2021-11-07"},{"lineNumber":76,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"Strider1990"},"content":"    public static Task getInstance(String s) throws InvalidFileFormatException {","lastModifiedDate":"2021-10-23"},{"lineNumber":78,"author":{"gitId":"Strider1990"},"content":"        String[] line \u003d s.split(\"\\\\|\");","lastModifiedDate":"2021-10-23"},{"lineNumber":79,"author":{"gitId":"Strider1990"},"content":"        assert line.length \u003e 2;","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"Strider1990"},"content":"        boolean doneState \u003d line[1].equalsIgnoreCase(\"t\");","lastModifiedDate":"2021-10-23"},{"lineNumber":81,"author":{"gitId":"Strider1990"},"content":"        Task currentTask;","lastModifiedDate":"2021-10-23"},{"lineNumber":82,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":83,"author":{"gitId":"Strider1990"},"content":"        String keyword \u003d line[0];","lastModifiedDate":"2021-10-23"},{"lineNumber":84,"author":{"gitId":"Strider1990"},"content":"        if (keyword.equalsIgnoreCase(TaskType.DEADLINE.toString())) {","lastModifiedDate":"2021-10-23"},{"lineNumber":85,"author":{"gitId":"Strider1990"},"content":"            String description \u003d line[2];","lastModifiedDate":"2021-10-23"},{"lineNumber":86,"author":{"gitId":"Strider1990"},"content":"            String dueDate \u003d line[3];","lastModifiedDate":"2021-10-23"},{"lineNumber":87,"author":{"gitId":"Strider1990"},"content":"            LocalDateTime dueBy \u003d dateParser.parseInput(dueDate);","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"Strider1990"},"content":"            if (dueBy \u003d\u003d null) {","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"Strider1990"},"content":"                throw new InvalidFileFormatException(InvalidFileFormatException.ERROR_DATE);","lastModifiedDate":"2021-11-07"},{"lineNumber":90,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-11-07"},{"lineNumber":91,"author":{"gitId":"Strider1990"},"content":"            currentTask \u003d new Deadline(description, dueBy);","lastModifiedDate":"2021-11-07"},{"lineNumber":92,"author":{"gitId":"Strider1990"},"content":"        } else if (keyword.equalsIgnoreCase(TaskType.EVENT.toString())) {","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"Strider1990"},"content":"            String description \u003d line[2];","lastModifiedDate":"2021-10-23"},{"lineNumber":94,"author":{"gitId":"Strider1990"},"content":"            String timing \u003d line[3];","lastModifiedDate":"2021-10-23"},{"lineNumber":95,"author":{"gitId":"Strider1990"},"content":"            LocalDateTime eventTime \u003d dateParser.parseInput(timing);","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"Strider1990"},"content":"            if (eventTime \u003d\u003d null) {","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"Strider1990"},"content":"                throw new InvalidFileFormatException(InvalidFileFormatException.ERROR_DATE);","lastModifiedDate":"2021-11-07"},{"lineNumber":98,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-11-07"},{"lineNumber":99,"author":{"gitId":"Strider1990"},"content":"            currentTask \u003d new Event(description, eventTime);","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"Strider1990"},"content":"        } else if (keyword.equalsIgnoreCase(TaskType.TODO.toString())) {","lastModifiedDate":"2021-10-23"},{"lineNumber":101,"author":{"gitId":"Strider1990"},"content":"            currentTask \u003d new Todo(line[2]);","lastModifiedDate":"2021-10-23"},{"lineNumber":102,"author":{"gitId":"Strider1990"},"content":"        } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":103,"author":{"gitId":"Strider1990"},"content":"            throw new InvalidFileFormatException();","lastModifiedDate":"2021-10-23"},{"lineNumber":104,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":105,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":106,"author":{"gitId":"Strider1990"},"content":"        currentTask.setDone(doneState);","lastModifiedDate":"2021-10-23"},{"lineNumber":107,"author":{"gitId":"Strider1990"},"content":"        return currentTask;","lastModifiedDate":"2021-10-23"},{"lineNumber":108,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":109,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":109}},{"path":"src/main/java/com/alexooi/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.Duke;","lastModifiedDate":"2021-11-07"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-07"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidFileFormatException;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.StorageClient;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.io.IOException;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-10"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":" * This class follows the Singleton design pattern as it is used extensively throughout the application","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"public class TaskList {","lastModifiedDate":"2021-09-10"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    private static TaskList instance;","lastModifiedDate":"2021-09-10"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    private final StorageClient\u003cBufferedReader\u003e stateClient;","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    private final StorageClient\u003cBufferedReader\u003e archiveClient;","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    private TaskList(StorageClient\u003cBufferedReader\u003e stateClient, StorageClient\u003cBufferedReader\u003e archiveClient) {","lastModifiedDate":"2021-11-06"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"        assert stateClient !\u003d null \u0026\u0026 archiveClient !\u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-10"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"        this.stateClient \u003d stateClient;","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        this.archiveClient \u003d archiveClient;","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"        BufferedReader input \u003d stateClient.load();","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        load(input);","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"     * This function lazily creates the TaskList if not already existing, else it returns the current instance of the TaskList","lastModifiedDate":"2021-11-07"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"     * @param stateClient   The StorageClient corresponding to where the state is stored","lastModifiedDate":"2021-11-07"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"     * @param archiveClient The StorageClient corresponding to where the task archive is stored","lastModifiedDate":"2021-11-07"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"     * @return              The instance of the TaskList.","lastModifiedDate":"2021-11-07"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    public static TaskList getInstance(StorageClient\u003cBufferedReader\u003e stateClient, StorageClient\u003cBufferedReader\u003e archiveClient) {","lastModifiedDate":"2021-11-06"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        if (instance \u003d\u003d null) {","lastModifiedDate":"2021-09-10"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"            instance \u003d new TaskList(stateClient, archiveClient);","lastModifiedDate":"2021-11-06"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-09-10"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"        return instance;","lastModifiedDate":"2021-09-10"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"     * Adds a task to the task list","lastModifiedDate":"2021-11-07"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"     * @param task  The task to add","lastModifiedDate":"2021-11-07"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"    public void add(Task task) {","lastModifiedDate":"2021-09-10"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"        taskList.add(task);","lastModifiedDate":"2021-09-10"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"     * Removes a task from the task list by its index","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"     * @param idx   The index of the task to remove","lastModifiedDate":"2021-11-07"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"     * @return      The task that has been removed.","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"    public Task remove(int idx) {","lastModifiedDate":"2021-09-10"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"        return taskList.remove(idx);","lastModifiedDate":"2021-09-10"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"     * Removes all tasks from the task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"    public void removeAll() {","lastModifiedDate":"2021-11-06"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"        taskList.clear();","lastModifiedDate":"2021-11-06"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"     * Get the list of tasks","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"     * @return  Returns an ArrayList containing all the tasks currently in the task list","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"    public ArrayList\u003cTask\u003e get() {","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"Strider1990"},"content":"        return taskList;","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":77,"author":{"gitId":"Strider1990"},"content":"     * Get a task by its index","lastModifiedDate":"2021-11-07"},{"lineNumber":78,"author":{"gitId":"Strider1990"},"content":"     * @param idx   The index of the task to retrieve","lastModifiedDate":"2021-11-07"},{"lineNumber":79,"author":{"gitId":"Strider1990"},"content":"     * @return      The task at index idx","lastModifiedDate":"2021-11-07"},{"lineNumber":80,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"Strider1990"},"content":"    public Task getTask(int idx) {","lastModifiedDate":"2021-09-10"},{"lineNumber":82,"author":{"gitId":"Strider1990"},"content":"        return taskList.get(idx);","lastModifiedDate":"2021-09-10"},{"lineNumber":83,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":84,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":85,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"Strider1990"},"content":"     * Get the length of the task list","lastModifiedDate":"2021-11-07"},{"lineNumber":87,"author":{"gitId":"Strider1990"},"content":"     * @return      The length of the task list","lastModifiedDate":"2021-11-07"},{"lineNumber":88,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":89,"author":{"gitId":"Strider1990"},"content":"    public int size() {","lastModifiedDate":"2021-09-10"},{"lineNumber":90,"author":{"gitId":"Strider1990"},"content":"        return taskList.size();","lastModifiedDate":"2021-09-10"},{"lineNumber":91,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":92,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":93,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"Strider1990"},"content":"     * Archives a single task in the task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"Strider1990"},"content":"     * @param idx The index of the task to archive.","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"Strider1990"},"content":"    public void archive(int idx) {","lastModifiedDate":"2021-11-06"},{"lineNumber":98,"author":{"gitId":"Strider1990"},"content":"        String output \u003d taskList.get(idx).toSaveString() + System.lineSeparator();","lastModifiedDate":"2021-11-06"},{"lineNumber":99,"author":{"gitId":"Strider1990"},"content":"        assert archiveClient !\u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":100,"author":{"gitId":"Strider1990"},"content":"        archiveClient.save(output, true);","lastModifiedDate":"2021-11-06"},{"lineNumber":101,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":102,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":103,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"Strider1990"},"content":"     * Archive all tasks in the task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"Strider1990"},"content":"    public void archive() {","lastModifiedDate":"2021-11-06"},{"lineNumber":107,"author":{"gitId":"Strider1990"},"content":"        String output \u003d toSaveListString();","lastModifiedDate":"2021-11-06"},{"lineNumber":108,"author":{"gitId":"Strider1990"},"content":"        assert archiveClient !\u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":109,"author":{"gitId":"Strider1990"},"content":"        archiveClient.save(output, true);","lastModifiedDate":"2021-11-06"},{"lineNumber":110,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":111,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":112,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":113,"author":{"gitId":"Strider1990"},"content":"     * Save the state of the task list.","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"Strider1990"},"content":"    public void save() {","lastModifiedDate":"2021-10-23"},{"lineNumber":116,"author":{"gitId":"Strider1990"},"content":"        String output \u003d toSaveListString();","lastModifiedDate":"2021-11-06"},{"lineNumber":117,"author":{"gitId":"Strider1990"},"content":"        assert stateClient !\u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"Strider1990"},"content":"        stateClient.save(output, false);","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":121,"author":{"gitId":"Strider1990"},"content":"    private String toSaveListString() {","lastModifiedDate":"2021-11-06"},{"lineNumber":122,"author":{"gitId":"Strider1990"},"content":"        return taskList.stream().reduce(\"\",","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"Strider1990"},"content":"                (partialOutput, task) -\u003e partialOutput + task.toSaveString() + System.lineSeparator(),","lastModifiedDate":"2021-10-23"},{"lineNumber":124,"author":{"gitId":"Strider1990"},"content":"                String::concat","lastModifiedDate":"2021-10-23"},{"lineNumber":125,"author":{"gitId":"Strider1990"},"content":"        );","lastModifiedDate":"2021-10-23"},{"lineNumber":126,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":127,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":128,"author":{"gitId":"Strider1990"},"content":"    private void load(BufferedReader in) {","lastModifiedDate":"2021-10-23"},{"lineNumber":129,"author":{"gitId":"Strider1990"},"content":"        boolean isEndOfInput \u003d false;","lastModifiedDate":"2021-11-06"},{"lineNumber":130,"author":{"gitId":"Strider1990"},"content":"        Duke main \u003d Duke.getInstance();","lastModifiedDate":"2021-11-07"},{"lineNumber":131,"author":{"gitId":"Strider1990"},"content":"        while (!isEndOfInput) {","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"Strider1990"},"content":"            try {","lastModifiedDate":"2021-10-23"},{"lineNumber":133,"author":{"gitId":"Strider1990"},"content":"                String taskStr \u003d in.readLine();","lastModifiedDate":"2021-10-23"},{"lineNumber":134,"author":{"gitId":"Strider1990"},"content":"                if (taskStr \u003d\u003d null) {","lastModifiedDate":"2021-10-23"},{"lineNumber":135,"author":{"gitId":"Strider1990"},"content":"                    isEndOfInput \u003d true;","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"Strider1990"},"content":"                } else {","lastModifiedDate":"2021-10-23"},{"lineNumber":137,"author":{"gitId":"Strider1990"},"content":"                    taskList.add(TaskFactory.getInstance(taskStr));","lastModifiedDate":"2021-10-23"},{"lineNumber":138,"author":{"gitId":"Strider1990"},"content":"                }","lastModifiedDate":"2021-10-23"},{"lineNumber":139,"author":{"gitId":"Strider1990"},"content":"            } catch (IOException ioe) {","lastModifiedDate":"2021-11-07"},{"lineNumber":140,"author":{"gitId":"Strider1990"},"content":"                System.out.println(main.getPrompt().error(ioe.getMessage()));","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"Strider1990"},"content":"            } catch (InvalidFileFormatException iffe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":142,"author":{"gitId":"Strider1990"},"content":"                System.out.println(main.getPrompt().error(iffe.getErrorHeader(), iffe.getMessage()));","lastModifiedDate":"2021-11-07"},{"lineNumber":143,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-10-23"},{"lineNumber":144,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":145,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":146,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":147,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-10"}],"authorContributionMap":{"Strider1990":147}},{"path":"src/main/java/com/alexooi/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.enums.TaskType;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"public class Todo extends Task {","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"    public Todo(String description) {","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"        super(TaskType.TODO, description);","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    public String toStatusString() {","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"        return \"[T]\" + super.toStatusString();","lastModifiedDate":"2021-09-08"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":14}},{"path":"src/main/java/com/alexooi/duke/ui/CommandLineParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.ui;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.commands.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.IOParser;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import java.util.*;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"public class CommandLineParser implements IOParser\u003cCommand, Scanner\u003e {","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"     * This function reads the user input and matches it against a list of commands.","lastModifiedDate":"2021-11-07"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"     * It parses the keyword and arguments of the command and returns the command found for execution.","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"     * @param sc        Scanner object to read in input","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"     * @param commands  A list of commands implemented to match against the input","lastModifiedDate":"2021-11-07"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"     * @return          The command that was detected","lastModifiedDate":"2021-11-07"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"     * @throws InvalidCommandException          Reaches this exception if no command is found matching the input","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"     * @throws InvalidCommandFormatException    Reaches this exception if a command is found the but the input is invalid","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    public Command readInput(Scanner sc, Iterable\u003cCommand\u003e commands)","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"            throws InvalidCommandException, InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"        assert sc !\u003d null;","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"        String input \u003d sc.nextLine();","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        for (Command cmd : commands) {","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"            Pattern servicePattern \u003d cmd.getRegexPattern();","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"            Matcher patternMatcher \u003d servicePattern.matcher(input);","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"            if (patternMatcher.matches()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"                String keyword \u003d patternMatcher.group(1);","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"                cmd.setKeyword(keyword);","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"                if (patternMatcher.groupCount() \u003e 1) {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"                    String args \u003d patternMatcher.group(2);","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"                    cmd.setArgs(args);","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"                }","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"                return cmd.build();","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"        throw new InvalidCommandException(InvalidCommandException.ERROR_GENERIC);","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":44}},{"path":"src/main/java/com/alexooi/duke/ui/OutputFormatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.ui;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.tasks.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.OutputFormat;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"/**","lastModifiedDate":"2021-11-07"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":" * This class is the concrete implementation of OutputFormat. It is used for formatting the chatbot output to the","lastModifiedDate":"2021-11-07"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":" * desired output format.","lastModifiedDate":"2021-11-07"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":" */","lastModifiedDate":"2021-11-07"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"public class OutputFormatter implements OutputFormat\u003cTask\u003e {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    private static final String PADDING \u003d \"    \";","lastModifiedDate":"2021-09-08"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    private static final String HORIZONTAL_LINE \u003d \"_________________________________________\";","lastModifiedDate":"2021-09-08"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    private static final String START \u003d \"Hello! I\u0027m Tassie, your virtual assistant.\\n    What can I do for you?\\n\\n    Note: Enter help to see a list of commands.\";","lastModifiedDate":"2021-11-07"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    private static final String COMMAND_LIST \u003d \"The following commands are available:\";","lastModifiedDate":"2021-11-07"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    private static final String END \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2021-09-08"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"    private static final String DONE \u003d \"Nice! I\u0027ve marked this task as done:\";","lastModifiedDate":"2021-09-08"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    private static final String UNDO \u003d \"Okay, I\u0027ve unmarked this task:\";","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"    private static final String ADD \u003d \"added: \";","lastModifiedDate":"2021-09-08"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"    private static final String REMOVE \u003d \"Noted. I\u0027ve removed this task:\";","lastModifiedDate":"2021-09-10"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"    private static final String VIEW_SCHEDULE \u003d \"You have the following tasks scheduled on \";","lastModifiedDate":"2021-11-06"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    private static final String FIND \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2021-11-06"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"    private static final String ARCHIVE_SINGLE \u003d \"We successfully archived the following task:\";","lastModifiedDate":"2021-11-06"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    private static final String ARCHIVE_ALL \u003d \"We successfully archived all of your tasks!\";","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when first starting the application.","lastModifiedDate":"2021-11-07"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"     * @return   formatted string containing the output to print.","lastModifiedDate":"2021-11-07"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    public String start() {","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(formatLine(START));","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when adding a new Task","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"     * @param printable Task or Child Task that has implemented the toString() method","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"     * @param length    Length of the task list after adding the new Task","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"     * @return          formatted string containing the output to print","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"    public String add(Task printable, int length) {","lastModifiedDate":"2021-09-08"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"        String output \u003d formatLine(ADD + printable.toString());","lastModifiedDate":"2021-09-08"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"        output +\u003d count(length);","lastModifiedDate":"2021-09-10"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-09-08"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when marking a Task as done.","lastModifiedDate":"2021-11-07"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"     * @param printable Task or Child Task that has implemented the toStatusString method","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"     * @return          formatted string containing the output to print","lastModifiedDate":"2021-11-07"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"    public String done(Task printable, boolean isDone) {","lastModifiedDate":"2021-11-07"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"        String output \u003d \"\";","lastModifiedDate":"2021-11-07"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"        if (isDone) {","lastModifiedDate":"2021-11-07"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"            output +\u003d formatLine(DONE);","lastModifiedDate":"2021-11-07"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"        } else {","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"            output +\u003d formatLine(UNDO);","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"        output +\u003d formatLine(\"   \" + printable.toStatusString());","lastModifiedDate":"2021-09-08"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-09-08"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when removing a Task.","lastModifiedDate":"2021-11-07"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"     * @param printable The task that has been removed","lastModifiedDate":"2021-11-07"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"     * @param length    Length of the task list after removing the Task","lastModifiedDate":"2021-11-07"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"     * @return          formatted string containing the output to print","lastModifiedDate":"2021-11-07"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-10"},{"lineNumber":73,"author":{"gitId":"Strider1990"},"content":"    public String remove(Task printable, int length) {","lastModifiedDate":"2021-09-10"},{"lineNumber":74,"author":{"gitId":"Strider1990"},"content":"        String output \u003d formatLine(REMOVE);","lastModifiedDate":"2021-09-10"},{"lineNumber":75,"author":{"gitId":"Strider1990"},"content":"        output +\u003d formatLine(\"   \" + printable.toStatusString());","lastModifiedDate":"2021-09-10"},{"lineNumber":76,"author":{"gitId":"Strider1990"},"content":"        output +\u003d count(length);","lastModifiedDate":"2021-09-10"},{"lineNumber":77,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-09-10"},{"lineNumber":78,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":79,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":80,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":81,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when there is an error that has occurred.","lastModifiedDate":"2021-11-07"},{"lineNumber":82,"author":{"gitId":"Strider1990"},"content":"     * @param header        The header to print for the error","lastModifiedDate":"2021-11-07"},{"lineNumber":83,"author":{"gitId":"Strider1990"},"content":"     * @param errorMessage  The error message of the error that occurred","lastModifiedDate":"2021-11-07"},{"lineNumber":84,"author":{"gitId":"Strider1990"},"content":"     * @return              formatted string containing the error header and message","lastModifiedDate":"2021-11-07"},{"lineNumber":85,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":86,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":87,"author":{"gitId":"Strider1990"},"content":"    public String error(String header, String errorMessage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":88,"author":{"gitId":"Strider1990"},"content":"        String output \u003d formatLine(header) + formatLine(errorMessage);","lastModifiedDate":"2021-09-08"},{"lineNumber":89,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-09-08"},{"lineNumber":90,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":91,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":92,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":93,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when there is an error that has occurred.","lastModifiedDate":"2021-11-07"},{"lineNumber":94,"author":{"gitId":"Strider1990"},"content":"     * @param errorMessage  The error message of the error that occurred","lastModifiedDate":"2021-11-07"},{"lineNumber":95,"author":{"gitId":"Strider1990"},"content":"     * @return              formatted string containing the error message","lastModifiedDate":"2021-11-07"},{"lineNumber":96,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":97,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":98,"author":{"gitId":"Strider1990"},"content":"    public String error(String errorMessage) {","lastModifiedDate":"2021-09-08"},{"lineNumber":99,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(formatLine(errorMessage));","lastModifiedDate":"2021-09-08"},{"lineNumber":100,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":101,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":102,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":103,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when listing the current task list","lastModifiedDate":"2021-11-07"},{"lineNumber":104,"author":{"gitId":"Strider1990"},"content":"     * @param inputs An iterable list of Tasks","lastModifiedDate":"2021-11-07"},{"lineNumber":105,"author":{"gitId":"Strider1990"},"content":"     * @return       formatted string containing the list of Tasks","lastModifiedDate":"2021-11-07"},{"lineNumber":106,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":107,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":108,"author":{"gitId":"Strider1990"},"content":"    public String list(Iterable\u003cTask\u003e inputs) {","lastModifiedDate":"2021-09-08"},{"lineNumber":109,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(formatList(inputs));","lastModifiedDate":"2021-11-07"},{"lineNumber":110,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":111,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":112,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":113,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when viewing the schedule of a specific date","lastModifiedDate":"2021-11-07"},{"lineNumber":114,"author":{"gitId":"Strider1990"},"content":"     * @param inputs An iterable list of tasks on that date","lastModifiedDate":"2021-11-07"},{"lineNumber":115,"author":{"gitId":"Strider1990"},"content":"     * @param date   Date that is being viewed","lastModifiedDate":"2021-11-07"},{"lineNumber":116,"author":{"gitId":"Strider1990"},"content":"     * @return       formatted string containing the list of Tasks on that specific date","lastModifiedDate":"2021-11-07"},{"lineNumber":117,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":118,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":119,"author":{"gitId":"Strider1990"},"content":"    public String viewSchedule(Iterable\u003cTask\u003e inputs, LocalDate date) {","lastModifiedDate":"2021-11-06"},{"lineNumber":120,"author":{"gitId":"Strider1990"},"content":"        String output \u003d formatLine(VIEW_SCHEDULE + date.toString()) +","lastModifiedDate":"2021-11-07"},{"lineNumber":121,"author":{"gitId":"Strider1990"},"content":"                formatList(inputs);","lastModifiedDate":"2021-11-07"},{"lineNumber":122,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-11-07"},{"lineNumber":123,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":124,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":125,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":126,"author":{"gitId":"Strider1990"},"content":"     * Generates the output of a description find","lastModifiedDate":"2021-11-07"},{"lineNumber":127,"author":{"gitId":"Strider1990"},"content":"     * @param inputs An iterable list of tasks that matches the find","lastModifiedDate":"2021-11-07"},{"lineNumber":128,"author":{"gitId":"Strider1990"},"content":"     * @return       formatted string containing the list of Tasks that match the keyword","lastModifiedDate":"2021-11-07"},{"lineNumber":129,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":130,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":131,"author":{"gitId":"Strider1990"},"content":"    public String find(Iterable\u003cTask\u003e inputs) {","lastModifiedDate":"2021-11-06"},{"lineNumber":132,"author":{"gitId":"Strider1990"},"content":"        String output \u003d formatLine(FIND) +","lastModifiedDate":"2021-11-07"},{"lineNumber":133,"author":{"gitId":"Strider1990"},"content":"                formatList(inputs);","lastModifiedDate":"2021-11-07"},{"lineNumber":134,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-11-07"},{"lineNumber":135,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":136,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":137,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":138,"author":{"gitId":"Strider1990"},"content":"     * Generates the output of a single Task archival","lastModifiedDate":"2021-11-07"},{"lineNumber":139,"author":{"gitId":"Strider1990"},"content":"     * @param printable The task that has been archived","lastModifiedDate":"2021-11-07"},{"lineNumber":140,"author":{"gitId":"Strider1990"},"content":"     * @return          Formatted string containing the Task","lastModifiedDate":"2021-11-07"},{"lineNumber":141,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":142,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":143,"author":{"gitId":"Strider1990"},"content":"    public String archive(Task printable) {","lastModifiedDate":"2021-11-06"},{"lineNumber":144,"author":{"gitId":"Strider1990"},"content":"        String output \u003d formatLine(ARCHIVE_SINGLE) + formatLine(printable.toStatusString());","lastModifiedDate":"2021-11-06"},{"lineNumber":145,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-11-06"},{"lineNumber":146,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":147,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":148,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":149,"author":{"gitId":"Strider1990"},"content":"     * Generates the output of a complete Task List archival","lastModifiedDate":"2021-11-07"},{"lineNumber":150,"author":{"gitId":"Strider1990"},"content":"     * @param inputs The list of tasks the have been archived","lastModifiedDate":"2021-11-07"},{"lineNumber":151,"author":{"gitId":"Strider1990"},"content":"     * @return       Formatted string containing all the tasks that are archived","lastModifiedDate":"2021-11-07"},{"lineNumber":152,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":153,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":154,"author":{"gitId":"Strider1990"},"content":"    public String archive(Iterable\u003cTask\u003e inputs) {","lastModifiedDate":"2021-11-06"},{"lineNumber":155,"author":{"gitId":"Strider1990"},"content":"        String output \u003d formatLine(ARCHIVE_ALL) +","lastModifiedDate":"2021-11-06"},{"lineNumber":156,"author":{"gitId":"Strider1990"},"content":"                formatList(inputs);","lastModifiedDate":"2021-11-06"},{"lineNumber":157,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(output);","lastModifiedDate":"2021-11-06"},{"lineNumber":158,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-07"},{"lineNumber":159,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-07"},{"lineNumber":160,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-07"},{"lineNumber":161,"author":{"gitId":"Strider1990"},"content":"    public String help(Iterable\u003cString\u003e inputs) {","lastModifiedDate":"2021-11-07"},{"lineNumber":162,"author":{"gitId":"Strider1990"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2021-11-07"},{"lineNumber":163,"author":{"gitId":"Strider1990"},"content":"        builder.append(formatLine(COMMAND_LIST));","lastModifiedDate":"2021-11-07"},{"lineNumber":164,"author":{"gitId":"Strider1990"},"content":"        for (String input : inputs) {","lastModifiedDate":"2021-11-07"},{"lineNumber":165,"author":{"gitId":"Strider1990"},"content":"            builder.append(formatLine(input));","lastModifiedDate":"2021-11-07"},{"lineNumber":166,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-07"},{"lineNumber":167,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(builder.toString());","lastModifiedDate":"2021-11-07"},{"lineNumber":168,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":169,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":170,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":171,"author":{"gitId":"Strider1990"},"content":"     * Generates the output when the user is exiting","lastModifiedDate":"2021-11-07"},{"lineNumber":172,"author":{"gitId":"Strider1990"},"content":"     * @return  Formatted string for the exit message","lastModifiedDate":"2021-11-07"},{"lineNumber":173,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":174,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-09-08"},{"lineNumber":175,"author":{"gitId":"Strider1990"},"content":"    public String exit() {","lastModifiedDate":"2021-09-08"},{"lineNumber":176,"author":{"gitId":"Strider1990"},"content":"        return formatOutput(formatLine(END));","lastModifiedDate":"2021-09-08"},{"lineNumber":177,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":178,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":179,"author":{"gitId":"Strider1990"},"content":"    private String count(int length) {","lastModifiedDate":"2021-09-10"},{"lineNumber":180,"author":{"gitId":"Strider1990"},"content":"        String multipleStr \u003d (length \u003e 1) ? \"tasks\" : \"task\";","lastModifiedDate":"2021-09-10"},{"lineNumber":181,"author":{"gitId":"Strider1990"},"content":"        String taskStr \u003d length + \" \" + multipleStr;","lastModifiedDate":"2021-09-10"},{"lineNumber":182,"author":{"gitId":"Strider1990"},"content":"        return formatLine(\"Now you have \" + taskStr + \" in the list.\");","lastModifiedDate":"2021-09-10"},{"lineNumber":183,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-10"},{"lineNumber":184,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-10"},{"lineNumber":185,"author":{"gitId":"Strider1990"},"content":"    private String formatLine(String output) {","lastModifiedDate":"2021-09-08"},{"lineNumber":186,"author":{"gitId":"Strider1990"},"content":"        return PADDING + output + System.lineSeparator();","lastModifiedDate":"2021-09-08"},{"lineNumber":187,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":188,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":189,"author":{"gitId":"Strider1990"},"content":"    private String formatOutput(String output) {","lastModifiedDate":"2021-09-08"},{"lineNumber":190,"author":{"gitId":"Strider1990"},"content":"        return formatLine(HORIZONTAL_LINE) + output + PADDING + HORIZONTAL_LINE;","lastModifiedDate":"2021-09-08"},{"lineNumber":191,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":192,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-11-06"},{"lineNumber":193,"author":{"gitId":"Strider1990"},"content":"    private String formatList(Iterable\u003cTask\u003e inputs) {","lastModifiedDate":"2021-11-06"},{"lineNumber":194,"author":{"gitId":"Strider1990"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2021-11-06"},{"lineNumber":195,"author":{"gitId":"Strider1990"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-11-06"},{"lineNumber":196,"author":{"gitId":"Strider1990"},"content":"        for (Task input : inputs) {","lastModifiedDate":"2021-11-06"},{"lineNumber":197,"author":{"gitId":"Strider1990"},"content":"            output.append(formatLine(count + \". \" + input.toStatusString()));","lastModifiedDate":"2021-11-06"},{"lineNumber":198,"author":{"gitId":"Strider1990"},"content":"            count++;","lastModifiedDate":"2021-11-06"},{"lineNumber":199,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-11-06"},{"lineNumber":200,"author":{"gitId":"Strider1990"},"content":"        return output.toString();","lastModifiedDate":"2021-11-06"},{"lineNumber":201,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-11-06"},{"lineNumber":202,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":202}},{"path":"src/main/java/com/alexooi/duke/utility/InputDateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.utility;","lastModifiedDate":"2021-10-23"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.interfaces.DateParser;","lastModifiedDate":"2021-10-23"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-10-23"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2021-10-23"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-10-23"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2021-10-23"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-10-23"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"public class InputDateParser implements DateParser {","lastModifiedDate":"2021-10-23"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"    private final DateTimeFormatter[] ACCEPTED_DATE_FORMATS \u003d {","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"            DateTimeFormatter.ISO_DATE","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    };","lastModifiedDate":"2021-10-23"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"    private final DateTimeFormatter[] ACCEPTED_DATE_TIME_FORMATS \u003d {","lastModifiedDate":"2021-10-23"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"            DateTimeFormatter.ISO_DATE_TIME","lastModifiedDate":"2021-10-23"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    };","lastModifiedDate":"2021-10-23"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"     * Checks if a string matches some particular date formats, returning true if it does, false if not.","lastModifiedDate":"2021-11-07"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"     * @param input             Date in string format","lastModifiedDate":"2021-11-07"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"     * @param acceptedFormats   Can be a DateTimeFormatter or a list of accepted formats built using DateTimeFormatterBuilder","lastModifiedDate":"2021-11-07"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"     * @return                  True if the string is an accepted date format, false if not","lastModifiedDate":"2021-11-07"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    public boolean isDate(String input, DateTimeFormatter acceptedFormats) {","lastModifiedDate":"2021-11-06"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"            LocalDate.parse(input, acceptedFormats);","lastModifiedDate":"2021-10-23"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"            return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"        return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"     * Checks if a string matches some particular date formats, returning true if it does, false if not","lastModifiedDate":"2021-11-07"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"     * @param input             Date and Time in string format","lastModifiedDate":"2021-11-07"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"     * @param acceptedFormats   Can be a DateTimeFormatter or a list of accepted formats built using DateTimeFormatterBuilder","lastModifiedDate":"2021-11-07"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"     * @return                  True if the string is an accepted Date and Time format, false if not","lastModifiedDate":"2021-11-07"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-11-06"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    public boolean isDateTime(String input, DateTimeFormatter acceptedFormats) {","lastModifiedDate":"2021-11-06"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"        try {","lastModifiedDate":"2021-10-23"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"            LocalDateTime.parse(input, acceptedFormats);","lastModifiedDate":"2021-10-23"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"        } catch (DateTimeParseException dtpe) {","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"            return false;","lastModifiedDate":"2021-10-23"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"        return true;","lastModifiedDate":"2021-10-23"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"    private DateTimeFormatter formatBuilder(DateTimeFormatter[] formats) {","lastModifiedDate":"2021-11-07"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"        DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"        for (DateTimeFormatter formatter : formats) {","lastModifiedDate":"2021-10-23"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"            builder.appendOptional(formatter);","lastModifiedDate":"2021-10-23"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"        return builder.toFormatter();","lastModifiedDate":"2021-10-23"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-10-23"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"    /**","lastModifiedDate":"2021-11-07"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"     * Parses a LocalDateTime object from an input string","lastModifiedDate":"2021-11-07"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"     * @param input Date or Date and Time in string format","lastModifiedDate":"2021-11-07"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"     * @return      Returns a LocalDateTime object containing the parsed Date and parsed Time if applicable,","lastModifiedDate":"2021-11-07"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"     *                  otherwise time defaults to start of day 00:00. If the string cannot be parsed, then returns null","lastModifiedDate":"2021-11-07"},{"lineNumber":64,"author":{"gitId":"Strider1990"},"content":"     */","lastModifiedDate":"2021-11-07"},{"lineNumber":65,"author":{"gitId":"Strider1990"},"content":"    @Override","lastModifiedDate":"2021-10-23"},{"lineNumber":66,"author":{"gitId":"Strider1990"},"content":"    public LocalDateTime parseInput(String input) {","lastModifiedDate":"2021-10-23"},{"lineNumber":67,"author":{"gitId":"Strider1990"},"content":"        DateTimeFormatter dateTimeFormats \u003d formatBuilder(ACCEPTED_DATE_TIME_FORMATS);","lastModifiedDate":"2021-10-23"},{"lineNumber":68,"author":{"gitId":"Strider1990"},"content":"        DateTimeFormatter dateFormats \u003d formatBuilder(ACCEPTED_DATE_FORMATS);","lastModifiedDate":"2021-10-23"},{"lineNumber":69,"author":{"gitId":"Strider1990"},"content":"        if (isDateTime(input, dateTimeFormats)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":70,"author":{"gitId":"Strider1990"},"content":"            return LocalDateTime.parse(input, dateTimeFormats);","lastModifiedDate":"2021-10-23"},{"lineNumber":71,"author":{"gitId":"Strider1990"},"content":"        } else if (isDate(input, dateFormats)) {","lastModifiedDate":"2021-10-23"},{"lineNumber":72,"author":{"gitId":"Strider1990"},"content":"            return LocalDate.parse(input, dateFormats).atStartOfDay();","lastModifiedDate":"2021-10-23"},{"lineNumber":73,"author":{"gitId":"Strider1990"},"content":"        }","lastModifiedDate":"2021-10-23"},{"lineNumber":74,"author":{"gitId":"Strider1990"},"content":"        return null;","lastModifiedDate":"2021-10-23"},{"lineNumber":75,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-10-23"},{"lineNumber":76,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-10-23"}],"authorContributionMap":{"Strider1990":76}},{"path":"src/test/java/com/alexooi/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2021-09-09"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-08"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"public class TaskTest {","lastModifiedDate":"2021-09-08"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"    @Test","lastModifiedDate":"2021-09-08"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"    void getDescriptionSuccess() {","lastModifiedDate":"2021-09-09"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"        Task task \u003d new Todo(\"read book\");","lastModifiedDate":"2021-09-10"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"        Assertions.assertEquals(\"read book\", task.getDescription());","lastModifiedDate":"2021-09-09"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-08"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-08"}],"authorContributionMap":{"Strider1990":12}},{"path":"src/test/java/com/alexooi/duke/ui/CommandLineParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"package com.alexooi.duke.ui;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.commands.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandException;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"import com.alexooi.duke.exceptions.InvalidCommandFormatException;","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"import java.util.Scanner;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"import java.util.ServiceLoader;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"class CommandLineParserTest {","lastModifiedDate":"2021-10-23"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"    private static final CommandLineParser COMMAND_LINE_PARSER \u003d new CommandLineParser();","lastModifiedDate":"2021-10-23"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"    private final ServiceLoader\u003cCommand\u003e commandLoader \u003d ServiceLoader.load(Command.class);","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"    @Test","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"    void readInput_CommandTodoSuccess() throws InvalidCommandException, InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"        String input \u003d \"todo read book\";","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"Strider1990"},"content":"        Scanner sc \u003d new Scanner(input).useDelimiter(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"Strider1990"},"content":"        Command cmd \u003d COMMAND_LINE_PARSER.readInput(sc, commandLoader);","lastModifiedDate":"2021-10-23"},{"lineNumber":21,"author":{"gitId":"Strider1990"},"content":"        assertEquals(\"todo\", cmd.getKeyword(), \"Parser assertEquals Todo Keyword failed.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"Strider1990"},"content":"        assertEquals(\"read book\", cmd.getArgs(), \"Parser assertEquals Todo Args failed.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"Strider1990"},"content":"    @Test","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"Strider1990"},"content":"    void readInput_CommandTodoFail() {","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"Strider1990"},"content":"        String input \u003d \"todo1\";","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"        Scanner sc \u003d new Scanner(input).useDelimiter(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e COMMAND_LINE_PARSER.readInput(sc, commandLoader));","lastModifiedDate":"2021-10-23"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"    @Test","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    void readInput_CommandDeadlineSuccess() throws InvalidCommandException, InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"        String input \u003d \"deadline return book /by 2021-09-15\";","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"Strider1990"},"content":"        Scanner sc \u003d new Scanner(input).useDelimiter(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"Strider1990"},"content":"        Command cmd \u003d COMMAND_LINE_PARSER.readInput(sc, commandLoader);","lastModifiedDate":"2021-10-23"},{"lineNumber":37,"author":{"gitId":"Strider1990"},"content":"        assertEquals(\"deadline\", cmd.getKeyword(), \"Parser assertEquals Deadline Keyword failed.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"Strider1990"},"content":"        assertEquals(\"return book /by 2021-09-15\", cmd.getArgs(), \"Parser assertEquals Deadline Args failed.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"Strider1990"},"content":"    @Test","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"Strider1990"},"content":"    void readInput_CommandDeadlineFail() {","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"Strider1990"},"content":"        String input \u003d \"deadlinereturn book /by 2021-09-15\";","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"Strider1990"},"content":"        Scanner sc \u003d new Scanner(input).useDelimiter(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"Strider1990"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e COMMAND_LINE_PARSER.readInput(sc, commandLoader));","lastModifiedDate":"2021-10-23"},{"lineNumber":46,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"Strider1990"},"content":"    @Test","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"Strider1990"},"content":"    void readInput_CommandEventSuccess() throws InvalidCommandException, InvalidCommandFormatException {","lastModifiedDate":"2021-11-06"},{"lineNumber":50,"author":{"gitId":"Strider1990"},"content":"        String input \u003d \"event meet friend /at 2021-09-15\";","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"Strider1990"},"content":"        Scanner sc \u003d new Scanner(input).useDelimiter(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"Strider1990"},"content":"        Command cmd \u003d COMMAND_LINE_PARSER.readInput(sc, commandLoader);","lastModifiedDate":"2021-10-23"},{"lineNumber":53,"author":{"gitId":"Strider1990"},"content":"        assertEquals(\"event\", cmd.getKeyword(), \"Parser assertEquals Event Keyword failed.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"Strider1990"},"content":"        assertEquals(\"meet friend /at 2021-09-15\", cmd.getArgs(), \"Parser assertEquals Event Args failed.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"Strider1990"},"content":"    @Test","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"Strider1990"},"content":"    void readInput_CommandEventFail() {","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"Strider1990"},"content":"        String input \u003d \"eventmeet friend /at 2021-09-15\";","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"Strider1990"},"content":"        Scanner sc \u003d new Scanner(input).useDelimiter(\"\\n\");","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"Strider1990"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e COMMAND_LINE_PARSER.readInput(sc, commandLoader));","lastModifiedDate":"2021-10-23"},{"lineNumber":62,"author":{"gitId":"Strider1990"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"Strider1990"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"Strider1990":63}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Strider1990"},"content":"help","lastModifiedDate":"2021-11-07"},{"lineNumber":2,"author":{"gitId":"Strider1990"},"content":"todo read book","lastModifiedDate":"2021-11-06"},{"lineNumber":3,"author":{"gitId":"Strider1990"},"content":"deadline return book /by 2021-09-20","lastModifiedDate":"2021-11-06"},{"lineNumber":4,"author":{"gitId":"Strider1990"},"content":"list","lastModifiedDate":"2021-11-06"},{"lineNumber":5,"author":{"gitId":"Strider1990"},"content":"event meet friend /at 2021-09-15","lastModifiedDate":"2021-11-06"},{"lineNumber":6,"author":{"gitId":"Strider1990"},"content":"done 2","lastModifiedDate":"2021-11-06"},{"lineNumber":7,"author":{"gitId":"Strider1990"},"content":"list","lastModifiedDate":"2021-11-06"},{"lineNumber":8,"author":{"gitId":"Strider1990"},"content":"view 2021-09-20","lastModifiedDate":"2021-11-06"},{"lineNumber":9,"author":{"gitId":"Strider1990"},"content":"find book","lastModifiedDate":"2021-11-06"},{"lineNumber":10,"author":{"gitId":"Strider1990"},"content":"delete 2","lastModifiedDate":"2021-11-06"},{"lineNumber":11,"author":{"gitId":"Strider1990"},"content":"list","lastModifiedDate":"2021-11-06"},{"lineNumber":12,"author":{"gitId":"Strider1990"},"content":"archive 2","lastModifiedDate":"2021-11-06"},{"lineNumber":13,"author":{"gitId":"Strider1990"},"content":"list","lastModifiedDate":"2021-11-06"},{"lineNumber":14,"author":{"gitId":"Strider1990"},"content":"archive all","lastModifiedDate":"2021-11-06"},{"lineNumber":15,"author":{"gitId":"Strider1990"},"content":"list","lastModifiedDate":"2021-11-06"}],"authorContributionMap":{"Strider1990":15}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Strider1990"},"content":"java -classpath ..\\bin com.alexooi.duke.Duke.com.alexooi.duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Strider1990":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"Strider1990"},"content":"cp -R ../src/main/resources/META-INF ../bin","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"Strider1990"},"content":"if ! find ../src/main/java -name \"*.java\" -print | xargs javac -cp ../src/main/java -Xlint:none -d ../bin","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"Strider1990"},"content":"java -cp ../bin com.alexooi.duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"Strider1990"},"content":"","lastModifiedDate":"2021-09-08"},{"lineNumber":29,"author":{"gitId":"Strider1990"},"content":"if type dos2unix \u0026\u003e /dev/null","lastModifiedDate":"2021-09-08"},{"lineNumber":30,"author":{"gitId":"Strider1990"},"content":"then","lastModifiedDate":"2021-09-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"Strider1990"},"content":"else","lastModifiedDate":"2021-09-08"},{"lineNumber":33,"author":{"gitId":"Strider1990"},"content":"    echo \"dos2unix command not found. To prevent potential issues, please install dos2unix.\"","lastModifiedDate":"2021-09-08"},{"lineNumber":34,"author":{"gitId":"Strider1990"},"content":"fi","lastModifiedDate":"2021-09-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Strider1990":9,"-":36}}]
